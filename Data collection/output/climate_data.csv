> 'ÊΩû',
  'ÈÒ' => 'ÊøÑ',
  'ÈÚ' => 'ÊæΩ',
  'ÈÛ' => 'Êæû',
  'ÈÙ' => 'Êøä',
  'Èı' => 'Êæ®',
  'Èˆ' => 'ÁÄÑ',
  'È˜' => 'Êæ•',
  'È¯' => 'ÊæÆ',
  'È˘' => 'Êæ∫',
  'È˙' => 'Êæ¨',
  'È˚' => 'Êæ™',
  'È¸' => 'Êøè',
  'È˝' => 'Êæø',
  'È˛' => 'Êæ∏',
  'Í@' => 'Êæ¢',
  'ÍA' => 'Êøâ',
  'ÍB' => 'Êæ´',
  'ÍC' => 'Êøç',
  'ÍD' => 'ÊæØ',
  'ÍE' => 'Êæ≤',
  'ÍF' => 'Êæ∞',
  'ÍG' => 'ÁáÖ',
  'ÍH' => 'ÁáÇ',
  'ÍI' => 'ÁÜø',
  'ÍJ' => 'ÁÜ∏',
  'ÍK' => 'Ááñ',
  'ÍL' => 'ÁáÄ',
  'ÍM' => 'ÁáÅ',
  'ÍN' => 'Ááã',
  'ÍO' => 'Ááî',
  'ÍP' => 'Ááä',
  'ÍQ' => 'Ááá',
  'ÍR' => 'Ááè',
  'ÍS' => 'ÁÜΩ',
  'ÍT' => 'Ááò',
  'ÍU' => 'ÁÜº',
  'ÍV' => 'ÁáÜ',
  'ÍW' => 'Ááö',
  'ÍX' => 'Ááõ',
  'ÍY' => 'Áäù',
  'ÍZ' => 'Áäû',
  'Í[' => 'Áç©',
  'Í\\' => 'Áç¶',
  'Í]' => 'Áçß',
  'Í^' => 'Áç¨',
  'Í_' => 'Áç•',
  'Í`' => 'Áç´',
  'Ía' => 'Áç™',
  'Íb' => 'Áëø',
  'Íc' => 'Áíö',
  'Íd' => 'Áí†',
  'Íe' => 'Áíî',
  'Íf' => 'Áíí',
  'Íg' => 'Áíï',
  'Íh' => 'Áí°',
  'Íi' => 'Áîã',
  'Íj' => 'ÁñÄ',
  'Ík' => 'ÁòØ',
  'Íl' => 'Áò≠',
  'Ím' => 'Áò±',
  'Ín' => 'ÁòΩ',
  'Ío' => 'Áò≥',
  'Íp' => 'Áòº',
  'Íq' => 'Áòµ',
  'Ír' => 'Áò≤',
  'Ís' => 'Áò∞',
  'Ít' => 'Áöª',
  'Íu' => 'Áõ¶',
  'Ív' => 'Áûö',
  'Íw' => 'Áûù',
  'Íx' => 'Áû°',
  'Íy' => 'Áûú',
  'Íz' => 'Áûõ',
  'Í{' => 'Áû¢',
  'Í|' => 'Áû£',
  'Í}' => 'Áûï',
  'Í~' => 'Áûô',
  'Í°' => 'Áûó',
  'Í¢' => 'Á£ù',
  'Í£' => 'Á£©',
  'Í§' => 'Á£•',
  'Í•' => 'Á£™',
  'Í¶' => 'Á£û',
  'Íß' => 'Á££',
  'Í®' => 'Á£õ',
  'Í©' => 'Á£°',
  'Í™' => 'Á£¢',
  'Í´' => 'Á£≠',
  'Í¨' => 'Á£ü',
  'Í≠' => 'Á£†',
  'ÍÆ' => 'Á¶§',
  'ÍØ' => 'Á©Ñ',
  'Í∞' => 'Á©à',
  'Í±' => 'Á©á',
  'Í≤' => 'Á™∂',
  'Í≥' => 'Á™∏',
  'Í¥' => 'Á™µ',
  'Íµ' => 'Á™±',
  'Í∂' => 'Á™∑',
  'Í∑' => 'ÁØû',
  'Í∏' => 'ÁØ£',
  'Íπ' => 'ÁØß',
  'Í∫' => 'ÁØù',
  'Íª' => 'ÁØï',
  'Íº' => 'ÁØ•',
  'ÍΩ' => 'ÁØö',
  'Íæ' => 'ÁØ®',
  'Íø' => 'ÁØπ',
  'Í¿' => 'ÁØî',
  'Í¡' => 'ÁØ™',
  'Í¬' => 'ÁØ¢',
  'Í√' => 'ÁØú',
  'Íƒ' => 'ÁØ´',
  'Í≈' => 'ÁØò',
  'Í∆' => 'ÁØü',
  'Í«' => 'Á≥í',
  'Í»' => 'Á≥î',
  'Í…' => 'Á≥ó',
  'Í ' => 'Á≥ê',
  'ÍÀ' => 'Á≥ë',
  'ÍÃ' => 'Á∏í',
  'ÍÕ' => 'Á∏°',
  'ÍŒ' => 'Á∏ó',
  'Íœ' => 'Á∏å',
  'Í–' => 'Á∏ü',
  'Í—' => 'Á∏†',
  'Í“' => 'Á∏ì',
  'Í”' => 'Á∏é',
  'Í‘' => 'Á∏ú',
  'Í’' => 'Á∏ï',
  'Í÷' => 'Á∏ö',
  'Í◊' => 'Á∏¢',
  'Íÿ' => 'Á∏ã',
  'ÍŸ' => 'Á∏è',
  'Í⁄' => 'Á∏ñ',
  'Í€' => 'Á∏ç',
  'Í‹' => 'Á∏î',
  'Í›' => 'Á∏•',
  'Íﬁ' => 'Á∏§',
  'Íﬂ' => 'ÁΩÉ',
  'Í‡' => 'ÁΩª',
  'Í·' => 'ÁΩº',
  'Í‚' => 'ÁΩ∫',
  'Í„' => 'Áæ±',
  'Í‰' => 'ÁøØ',
  'ÍÂ' => 'ËÄ™',
  'ÍÊ' => 'ËÄ©',
  'ÍÁ' => 'ËÅ¨',
  'ÍË' => 'ËÜ±',
  'ÍÈ' => 'ËÜ¶',
  'ÍÍ' => 'ËÜÆ',
  'ÍÎ' => 'ËÜπ',
  'ÍÏ' => 'ËÜµ',
  'ÍÌ' => 'ËÜ´',
  'ÍÓ' => 'ËÜ∞',
  'ÍÔ' => 'ËÜ¨',
  'Í' => 'ËÜ¥',
  'ÍÒ' => 'ËÜ≤',
  'ÍÚ' => 'ËÜ∑',
  'ÍÛ' => 'ËÜß',
  'ÍÙ' => 'Ëá≤',
  'Íı' => 'Ëâï',
  'Íˆ' => 'Ëâñ',
  'Í˜' => 'Ëâó',
  'Í¯' => 'Ëïñ',
  'Í˘' => 'ËïÖ',
  'Í˙' => 'Ëï´',
  'Í˚' => 'Ëïç',
  'Í¸' => 'Ëïì',
  'Í˝' => 'Ëï°',
  'Í˛' => 'Ëïò',
  'Î@' => 'ËïÄ',
  'ÎA' => 'ËïÜ',
  'ÎB' => 'Ëï§',
  'ÎC' => 'ËïÅ',
  'ÎD' => 'Ëï¢',
  'ÎE' => 'ËïÑ',
  'ÎF' => 'Ëïë',
  'ÎG' => 'Ëïá',
  'ÎH' => 'Ëï£',
  'ÎI' => 'Ëîæ',
  'ÎJ' => 'Ëïõ',
  'ÎK' => 'Ëï±',
  'ÎL' => 'Ëïé',
  'ÎM' => 'ËïÆ',
  'ÎN' => 'Ëïµ',
  'ÎO' => 'Ëïï',
  'ÎP' => 'Ëïß',
  'ÎQ' => 'Ëï†',
  'ÎR' => 'Ëñå',
  'ÎS' => 'Ëï¶',
  'ÎT' => 'Ëïù',
  'ÎU' => 'Ëïî',
  'ÎV' => 'Ëï•',
  'ÎW' => 'Ëï¨',
  'ÎX' => 'Ëô£',
  'ÎY' => 'Ëô•',
  'ÎZ' => 'Ëô§',
  'Î[' => 'Ëûõ',
  'Î\\' => 'Ëûè',
  'Î]' => 'Ëûó',
  'Î^' => 'Ëûì',
  'Î_' => 'Ëûí',
  'Î`' => 'Ëûà',
  'Îa' => 'ËûÅ',
  'Îb' => 'Ëûñ',
  'Îc' => 'Ëûò',
  'Îd' => 'Ëùπ',
  'Îe' => 'Ëûá',
  'Îf' => 'Ëû£',
  'Îg' => 'ËûÖ',
  'Îh' => 'Ëûê',
  'Îi' => 'Ëûë',
  'Îj' => 'Ëûù',
  'Îk' => 'ËûÑ',
  'Îl' => 'Ëûî',
  'Îm' => 'Ëûú',
  'În' => 'Ëûö',
  'Îo' => 'Ëûâ',
  'Îp' => 'Ë§û',
  'Îq' => 'Ë§¶',
  'Îr' => 'Ë§∞',
  'Îs' => 'Ë§≠',
  'Ît' => 'Ë§Æ',
  'Îu' => 'Ë§ß',
  'Îv' => 'Ë§±',
  'Îw' => 'Ë§¢',
  'Îx' => 'Ë§©',
  'Îy' => 'Ë§£',
  'Îz' => 'Ë§Ø',
  'Î{' => 'Ë§¨',
  'Î|' => 'Ë§ü',
  'Î}' => 'Ëß±',
  'Î~' => 'Ë´†',
  'Î°' => 'Ë´¢',
  'Î¢' => 'Ë´≤',
  'Î£' => 'Ë´¥',
  'Î§' => 'Ë´µ',
  'Î•' => 'Ë´ù',
  'Î¶' => 'Ë¨î',
  'Îß' => 'Ë´§',
  'Î®' => 'Ë´ü',
  'Î©' => 'Ë´∞',
  'Î™' => 'Ë´à',
  'Î´' => 'Ë´û',
  'Î¨' => 'Ë´°',
  'Î≠' => 'Ë´®',
  'ÎÆ' => 'Ë´ø',
  'ÎØ' => 'Ë´Ø',
  'Î∞' => 'Ë´ª',
  'Î±' => 'Ë≤ë',
  'Î≤' => 'Ë≤í',
  'Î≥' => 'Ë≤ê',
  'Î¥' => 'Ë≥µ',
  'Îµ' => 'Ë≥Æ',
  'Î∂' => 'Ë≥±',
  'Î∑' => 'Ë≥∞',
  'Î∏' => 'Ë≥≥',
  'Îπ' => 'Ëµ¨',
  'Î∫' => 'ËµÆ',
  'Îª' => 'Ë∂•',
  'Îº' => 'Ë∂ß',
  'ÎΩ' => 'Ë∏≥',
  'Îæ' => 'Ë∏æ',
  'Îø' => 'Ë∏∏',
  'Î¿' => 'ËπÄ',
  'Î¡' => 'ËπÖ',
  'Î¬' => 'Ë∏∂',
  'Î√' => 'Ë∏º',
  'Îƒ' => 'Ë∏Ω',
  'Î≈' => 'ËπÅ',
  'Î∆' => 'Ë∏∞',
  'Î«' => 'Ë∏ø',
  'Î»' => 'Ë∫Ω',
  'Î…' => 'Ëº∂',
  'Î ' => 'ËºÆ',
  'ÎÀ' => 'Ëºµ',
  'ÎÃ' => 'Ëº≤',
  'ÎÕ' => 'Ëºπ',
  'ÎŒ' => 'Ëº∑',
  'Îœ' => 'Ëº¥',
  'Î–' => 'ÈÅ∂',
  'Î—' => 'ÈÅπ',
  'Î“' => 'ÈÅª',
  'Î”' => 'ÈÇÜ',
  'Î‘' => 'ÈÉ∫',
  'Î’' => 'ÈÑ≥',
  'Î÷' => 'ÈÑµ',
  'Î◊' => 'ÈÑ∂',
  'Îÿ' => 'ÈÜì',
  'ÎŸ' => 'ÈÜê',
  'Î⁄' => 'ÈÜë',
  'Î€' => 'ÈÜç',
  'Î‹' => 'ÈÜè',
  'Î›' => 'Èåß',
  'Îﬁ' => 'Èåû',
  'Îﬂ' => 'Èåà',
  'Î‡' => 'Èåü',
  'Î·' => 'ÈåÜ',
  'Î‚' => 'Èåè',
  'Î„' => 'Èç∫',
  'Î‰' => 'Èå∏',
  'ÎÂ' => 'Èåº',
  'ÎÊ' => 'Èåõ',
  'ÎÁ' => 'Èå£',
  'ÎË' => 'Èåí',
  'ÎÈ' => 'ÈåÅ',
  'ÎÍ' => 'ÈçÜ',
  'ÎÎ' => 'Èå≠',
  'ÎÏ' => 'Èåé',
  'ÎÌ' => 'Èåç',
  'ÎÓ' => 'Èãã',
  'ÎÔ' => 'Èåù',
  'Î' => 'Èã∫',
  'ÎÒ' => 'Èå•',
  'ÎÚ' => 'Èåì',
  'ÎÛ' => 'Èãπ',
  'ÎÙ' => 'Èã∑',
  'Îı' => 'Èå¥',
  'Îˆ' => 'ÈåÇ',
  'Î˜' => 'Èå§',
  'Î¯' => 'Èãø',
  'Î˘' => 'Èå©',
  'Î˙' => 'Èåπ',
  'Î˚' => 'Èåµ',
  'Î¸' => 'Èå™',
  'Î˝' => 'Èåî',
  'Î˛' => 'Èåå',
  'Ï@' => 'Èåã',
  'ÏA' => 'Èãæ',
  'ÏB' => 'Èåâ',
  'ÏC' => 'ÈåÄ',
  'ÏD' => 'Èãª',
  'ÏE' => 'Èåñ',
  'ÏF' => 'Èñº',
  'ÏG' => 'Èóç',
  'ÏH' => 'Èñæ',
  'ÏI' => 'Èñπ',
  'ÏJ' => 'Èñ∫',
  'ÏK' => 'Èñ∂',
  'ÏL' => 'Èñø',
  'ÏM' => 'Èñµ',
  'ÏN' => 'ÈñΩ',
  'ÏO' => 'Èö©',
  'ÏP' => 'Èõî',
  'ÏQ' => 'Èúã',
  'ÏR' => 'Èúí',
  'ÏS' => 'Èúê',
  'ÏT' => 'Èûô',
  'ÏU' => 'Èûó',
  'ÏV' => 'Èûî',
  'ÏW' => 'Èü∞',
  'ÏX' => 'Èü∏',
  'ÏY' => 'È†µ',
  'ÏZ' => 'È†Ø',
  'Ï[' => 'È†≤',
  'Ï\\' => 'È§§',
  'Ï]' => 'È§ü',
  'Ï^' => 'È§ß',
  'Ï_' => 'È§©',
  'Ï`' => 'È¶û',
  'Ïa' => 'ÈßÆ',
  'Ïb' => 'Èß¨',
  'Ïc' => 'Èß•',
  'Ïd' => 'Èß§',
  'Ïe' => 'Èß∞',
  'Ïf' => 'Èß£',
  'Ïg' => 'Èß™',
  'Ïh' => 'Èß©',
  'Ïi' => 'Èßß',
  'Ïj' => 'È™π',
  'Ïk' => 'È™ø',
  'Ïl' => 'È™¥',
  'Ïm' => 'È™ª',
  'Ïn' => 'È´∂',
  'Ïo' => 'È´∫',
  'Ïp' => 'È´π',
  'Ïq' => 'È´∑',
  'Ïr' => 'È¨≥',
  'Ïs' => 'ÈÆÄ',
  'Ït' => 'ÈÆÖ',
  'Ïu' => 'ÈÆá',
  'Ïv' => 'È≠º',
  'Ïw' => 'È≠æ',
  'Ïx' => 'È≠ª',
  'Ïy' => 'ÈÆÇ',
  'Ïz' => 'ÈÆì',
  'Ï{' => 'ÈÆí',
  'Ï|' => 'ÈÆê',
  'Ï}' => 'È≠∫',
  'Ï~' => 'ÈÆï',
  'Ï°' => 'È≠Ω',
  'Ï¢' => 'ÈÆà',
  'Ï£' => 'È¥•',
  'Ï§' => 'È¥ó',
  'Ï•' => 'È¥†',
  'Ï¶' => 'È¥û',
  'Ïß' => 'È¥î',
  'Ï®' => 'È¥©',
  'Ï©' => 'È¥ù',
  'Ï™' => 'È¥ò',
  'Ï´' => 'È¥¢',
  'Ï¨' => 'È¥ê',
  'Ï≠' => 'È¥ô',
  'ÏÆ' => 'È¥ü',
  'ÏØ' => 'È∫à',
  'Ï∞' => 'È∫Ü',
  'Ï±' => 'È∫á',
  'Ï≤' => 'È∫Æ',
  'Ï≥' => 'È∫≠',
  'Ï¥' => 'Èªï',
  'Ïµ' => 'Èªñ',
  'Ï∂' => 'Èª∫',
  'Ï∑' => 'Èºí',
  'Ï∏' => 'ÈºΩ',
  'Ïπ' => 'ÂÑ¶',
  'Ï∫' => 'ÂÑ•',
  'Ïª' => 'ÂÑ¢',
  'Ïº' => 'ÂÑ§',
  'ÏΩ' => 'ÂÑ†',
  'Ïæ' => 'ÂÑ©',
  'Ïø' => 'Âã¥',
  'Ï¿' => 'Âöì',
  'Ï¡' => 'Âöå',
  'Ï¬' => 'Âöç',
  'Ï√' => 'ÂöÜ',
  'Ïƒ' => 'ÂöÑ',
  'Ï≈' => 'ÂöÉ',
  'Ï∆' => 'Âôæ',
  'Ï«' => 'ÂöÇ',
  'Ï»' => 'Âôø',
  'Ï…' => 'ÂöÅ',
  'Ï ' => 'Â£ñ',
  'ÏÀ' => 'Â£î',
  'ÏÃ' => 'Â£è',
  'ÏÕ' => 'Â£í',
  'ÏŒ' => 'Â¨≠',
  'Ïœ' => 'Â¨•',
  'Ï–' => 'Â¨≤',
  'Ï—' => 'Â¨£',
  'Ï“' => 'Â¨¨',
  'Ï”' => 'Â¨ß',
  'Ï‘' => 'Â¨¶',
  'Ï’' => 'Â¨Ø',
  'Ï÷' => 'Â¨Æ',
  'Ï◊' => 'Â≠ª',
  'Ïÿ' => 'ÂØ±',
  'ÏŸ' => 'ÂØ≤',
  'Ï⁄' => 'Â∂∑',
  'Ï€' => 'Âπ¨',
  'Ï‹' => 'Âπ™',
  'Ï›' => 'Âææ',
  'Ïﬁ' => 'Âæª',
  'Ïﬂ' => 'ÊáÉ',
  'Ï‡' => 'ÊÜµ',
  'Ï·' => 'ÊÜº',
  'Ï‚' => 'Êáß',
  'Ï„' => 'Êá†',
  'Ï‰' => 'Êá•',
  'ÏÂ' => 'Êá§',
  'ÏÊ' => 'Êá®',
  'ÏÁ' => 'Êáû',
  'ÏË' => 'ÊìØ',
  'ÏÈ' => 'Êì©',
  'ÏÍ' => 'Êì£',
  'ÏÎ' => 'Êì´',
  'ÏÏ' => 'Êì§',
  'ÏÌ' => 'Êì®',
  'ÏÓ' => 'ÊñÅ',
  'ÏÔ' => 'ÊñÄ',
  'Ï' => 'Êñ∂',
  'ÏÒ' => 'Êóö',
  'ÏÚ' => 'Êõí',
  'ÏÛ' => 'Ê™ç',
  'ÏÙ' => 'Ê™ñ',
  'Ïı' => 'Ê™Å',
  'Ïˆ' => 'Ê™•',
  'Ï˜' => 'Ê™â',
  'Ï¯' => 'Ê™ü',
  'Ï˘' => 'Ê™õ',
  'Ï˙' => 'Ê™°',
  'Ï˚' => 'Ê™û',
  'Ï¸' => 'Ê™á',
  'Ï˝' => 'Ê™ì',
  'Ï˛' => 'Ê™é',
  'Ì@' => 'Ê™ï',
  'ÌA' => 'Ê™É',
  'ÌB' => 'Ê™®',
  'ÌC' => 'Ê™§',
  'ÌD' => 'Ê™ë',
  'ÌE' => 'Ê©ø',
  'ÌF' => 'Ê™¶',
  'ÌG' => 'Ê™ö',
  'ÌH' => 'Ê™Ö',
  'ÌI' => 'Ê™å',
  'ÌJ' => 'Ê™í',
  'ÌK' => 'Ê≠õ',
  'ÌL' => 'ÊÆ≠',
  'ÌM' => 'Ê∞â',
  'ÌN' => 'Êøå',
  'ÌO' => 'Êæ©',
  'ÌP' => 'Êø¥',
  'ÌQ' => 'Êøî',
  'ÌR' => 'Êø£',
  'ÌS' => 'Êøú',
  'ÌT' => 'Êø≠',
  'ÌU' => 'Êøß',
  'ÌV' => 'Êø¶',
  'ÌW' => 'Êøû',
  'ÌX' => 'Êø≤',
  'ÌY' => 'Êøù',
  'ÌZ' => 'Êø¢',
  'Ì[' => 'Êø®',
  'Ì\\' => 'Áá°',
  'Ì]' => 'Áá±',
  'Ì^' => 'Áá®',
  'Ì_' => 'Áá≤',
  'Ì`' => 'Áá§',
  'Ìa' => 'Áá∞',
  'Ìb' => 'Áá¢',
  'Ìc' => 'Áç≥',
  'Ìd' => 'ÁçÆ',
  'Ìe' => 'ÁçØ',
  'Ìf' => 'Áíó',
  'Ìg' => 'Áí≤',
  'Ìh' => 'Áí´',
  'Ìi' => 'Áíê',
  'Ìj' => 'Áí™',
  'Ìk' => 'Áí≠',
  'Ìl' => 'Áí±',
  'Ìm' => 'Áí•',
  'Ìn' => 'ÁíØ',
  'Ìo' => 'Áîê',
  'Ìp' => 'Áîë',
  'Ìq' => 'Áîí',
  'Ìr' => 'Áîè',
  'Ìs' => 'ÁñÑ',
  'Ìt' => 'ÁôÉ',
  'Ìu' => 'Áôà',
  'Ìv' => 'Áôâ',
  'Ìw' => 'Áôá',
  'Ìx' => 'Áö§',
  'Ìy' => 'Áõ©',
  'Ìz' => 'Áûµ',
  'Ì{' => 'Áû´',
  'Ì|' => 'Áû≤',
  'Ì}' => 'Áû∑',
  'Ì~' => 'Áû∂',
  'Ì°' => 'Áû¥',
  'Ì¢' => 'Áû±',
  'Ì£' => 'Áû®',
  'Ì§' => 'Áü∞',
  'Ì•' => 'Á£≥',
  'Ì¶' => 'Á£Ω',
  'Ìß' => 'Á§Ç',
  'Ì®' => 'Á£ª',
  'Ì©' => 'Á£º',
  'Ì™' => 'Á£≤',
  'Ì´' => 'Á§Ö',
  'Ì¨' => 'Á£π',
  'Ì≠' => 'Á£æ',
  'ÌÆ' => 'Á§Ñ',
  'ÌØ' => 'Á¶´',
  'Ì∞' => 'Á¶®',
  'Ì±' => 'Á©ú',
  'Ì≤' => 'Á©õ',
  'Ì≥' => 'Á©ñ',
  'Ì¥' => 'Á©ò',
  'Ìµ' => 'Á©î',
  'Ì∂' => 'Á©ö',
  'Ì∑' => 'Á™æ',
  'Ì∏' => 'Á´Ä',
  'Ìπ' => 'Á´Å',
  'Ì∫' => 'Á∞Ö',
  'Ìª' => 'Á∞è',
  'Ìº' => 'ÁØ≤',
  'ÌΩ' => 'Á∞Ä',
  'Ìæ' => 'ÁØø',
  'Ìø' => 'ÁØª',
  'Ì¿' => 'Á∞é',
  'Ì¡' => 'ÁØ¥',
  'Ì¬' => 'Á∞ã',
  'Ì√' => 'ÁØ≥',
  'Ìƒ' => 'Á∞Ç',
  'Ì≈' => 'Á∞â',
  'Ì∆' => 'Á∞É',
  'Ì«' => 'Á∞Å',
  'Ì»' => 'ÁØ∏',
  'Ì…' => 'ÁØΩ',
  'Ì ' => 'Á∞Ü',
  'ÌÀ' => 'ÁØ∞',
  'ÌÃ' => 'ÁØ±',
  'ÌÕ' => 'Á∞ê',
  'ÌŒ' => 'Á∞ä',
  'Ìœ' => 'Á≥®',
  'Ì–' => 'Á∏≠',
  'Ì—' => 'Á∏º',
  'Ì“' => 'ÁπÇ',
  'Ì”' => 'Á∏≥',
  'Ì‘' => 'È°à',
  'Ì’' => 'Á∏∏',
  'Ì÷' => 'Á∏™',
  'Ì◊' => 'Áπâ',
  'Ìÿ' => 'ÁπÄ',
  'ÌŸ' => 'Áπá',
  'Ì⁄' => 'Á∏©',
  'Ì€' => 'Áπå',
  'Ì‹' => 'Á∏∞',
  'Ì›' => 'Á∏ª',
  'Ìﬁ' => 'Á∏∂',
  'Ìﬂ' => 'ÁπÑ',
  'Ì‡' => 'Á∏∫',
  'Ì·' => 'ÁΩÖ',
  'Ì‚' => 'ÁΩø',
  'Ì„' => 'ÁΩæ',
  'Ì‰' => 'ÁΩΩ',
  'ÌÂ' => 'Áø¥',
  'ÌÊ' => 'Áø≤',
  'ÌÁ' => 'ËÄ¨',
  'ÌË' => 'ËÜª',
  'ÌÈ' => 'ËáÑ',
  'ÌÍ' => 'Ëáå',
  'ÌÎ' => 'Ëáä',
  'ÌÏ' => 'ËáÖ',
  'ÌÌ' => 'Ëáá',
  'ÌÓ' => 'ËÜº',
  'ÌÔ' => 'Ëá©',
  'Ì' => 'Ëâõ',
  'ÌÒ' => 'Ëâö',
  'ÌÚ' => 'Ëâú',
  'ÌÛ' => 'ËñÉ',
  'ÌÙ' => 'ËñÄ',
  'Ìı' => 'Ëñè',
  'Ìˆ' => 'Ëñß',
  'Ì˜' => 'Ëñï',
  'Ì¯' => 'Ëñ†',
  'Ì˘' => 'Ëñã',
  'Ì˙' => 'Ëñ£',
  'Ì˚' => 'Ëïª',
  'Ì¸' => 'Ëñ§',
  'Ì˝' => 'Ëñö',
  'Ì˛' => 'Ëñû',
  'Ó@' => 'Ëï∑',
  'ÓA' => 'Ëïº',
  'ÓB' => 'Ëñâ',
  'ÓC' => 'Ëñ°',
  'ÓD' => 'Ëï∫',
  'ÓE' => 'Ëï∏',
  'ÓF' => 'Ëïó',
  'ÓG' => 'Ëñé',
  'ÓH' => 'Ëññ',
  'ÓI' => 'ËñÜ',
  'ÓJ' => 'Ëñç',
  'ÓK' => 'Ëñô',
  'ÓL' => 'Ëñù',
  'ÓM' => 'ËñÅ',
  'ÓN' => 'Ëñ¢',
  'ÓO' => 'ËñÇ',
  'ÓP' => 'Ëñà',
  'ÓQ' => 'ËñÖ',
  'ÓR' => 'Ëïπ',
  'ÓS' => 'Ëï∂',
  'ÓT' => 'Ëñò',
  'ÓU' => 'Ëñê',
  'ÓV' => 'Ëñü',
  'ÓW' => 'Ëô®',
  'ÓX' => 'Ëûæ',
  'ÓY' => 'Ëû™',
  'ÓZ' => 'Ëû≠',
  'Ó[' => 'ËüÖ',
  'Ó\\' => 'Ëû∞',
  'Ó]' => 'Ëû¨',
  'Ó^' => 'Ëûπ',
  'Ó_' => 'Ëûµ',
  'Ó`' => 'Ëûº',
  'Óa' => 'ËûÆ',
  'Ób' => 'Ëüâ',
  'Óc' => 'ËüÉ',
  'Ód' => 'ËüÇ',
  'Óe' => 'Ëüå',
  'Óf' => 'Ëû∑',
  'Óg' => 'ËûØ',
  'Óh' => 'ËüÑ',
  'Ói' => 'Ëüä',
  'Ój' => 'Ëû¥',
  'Ók' => 'Ëû∂',
  'Ól' => 'Ëûø',
  'Óm' => 'Ëû∏',
  'Ón' => 'ËûΩ',
  'Óo' => 'Ëüû',
  'Óp' => 'Ëû≤',
  'Óq' => 'Ë§µ',
  'Ór' => 'Ë§≥',
  'Ós' => 'Ë§º',
  'Ót' => 'Ë§æ',
  'Óu' => 'Ë•Å',
  'Óv' => 'Ë•í',
  'Ów' => 'Ë§∑',
  'Óx' => 'Ë•Ç',
  'Óy' => 'Ë¶≠',
  'Óz' => 'Ë¶Ø',
  'Ó{' => 'Ë¶Æ',
  'Ó|' => 'Ëß≤',
  'Ó}' => 'Ëß≥',
  'Ó~' => 'Ë¨û',
  'Ó°' => 'Ë¨ò',
  'Ó¢' => 'Ë¨ñ',
  'Ó£' => 'Ë¨ë',
  'Ó§' => 'Ë¨Ö',
  'Ó•' => 'Ë¨ã',
  'Ó¶' => 'Ë¨¢',
  'Óß' => 'Ë¨è',
  'Ó®' => 'Ë¨í',
  'Ó©' => 'Ë¨ï',
  'Ó™' => 'Ë¨á',
  'Ó´' => 'Ë¨ç',
  'Ó¨' => 'Ë¨à',
  'Ó≠' => 'Ë¨Ü',
  'ÓÆ' => 'Ë¨ú',
  'ÓØ' => 'Ë¨ì',
  'Ó∞' => 'Ë¨ö',
  'Ó±' => 'Ë±è',
  'Ó≤' => 'Ë±∞',
  'Ó≥' => 'Ë±≤',
  'Ó¥' => 'Ë±±',
  'Óµ' => 'Ë±Ø',
  'Ó∂' => 'Ë≤ï',
  'Ó∑' => 'Ë≤î',
  'Ó∏' => 'Ë≥π',
  'Óπ' => 'ËµØ',
  'Ó∫' => 'Ëπé',
  'Óª' => 'Ëπç',
  'Óº' => 'Ëπì',
  'ÓΩ' => 'Ëπê',
  'Óæ' => 'Ëπå',
  'Óø' => 'Ëπá',
  'Ó¿' => 'ËΩÉ',
  'Ó¡' => 'ËΩÄ',
  'Ó¬' => 'ÈÇÖ',
  'Ó√' => 'ÈÅæ',
  'Óƒ' => 'ÈÑ∏',
  'Ó≈' => 'ÈÜö',
  'Ó∆' => 'ÈÜ¢',
  'Ó«' => 'ÈÜõ',
  'Ó»' => 'ÈÜô',
  'Ó…' => 'ÈÜü',
  'Ó ' => 'ÈÜ°',
  'ÓÀ' => 'ÈÜù',
  'ÓÃ' => 'ÈÜ†',
  'ÓÕ' => 'Èé°',
  'ÓŒ' => 'ÈéÉ',
  'Óœ' => 'ÈéØ',
  'Ó–' => 'Èç§',
  'Ó—' => 'Èçñ',
  'Ó“' => 'Èçá',
  'Ó”' => 'Èçº',
  'Ó‘' => 'Èçò',
  'Ó’' => 'Èçú',
  'Ó÷' => 'Èç∂',
  'Ó◊' => 'Èçâ',
  'Óÿ' => 'Èçê',
  'ÓŸ' => 'Èçë',
  'Ó⁄' => 'Èç†',
  'Ó€' => 'Èç≠',
  'Ó‹' => 'Èéè',
  'Ó›' => 'Èçå',
  'Óﬁ' => 'Èç™',
  'Óﬂ' => 'Èçπ',
  'Ó‡' => 'Èçó',
  'Ó·' => 'Èçï',
  'Ó‚' => 'Èçí',
  'Ó„' => 'Èçè',
  'Ó‰' => 'Èç±',
  'ÓÂ' => 'Èç∑',
  'ÓÊ' => 'Èçª',
  'ÓÁ' => 'Èç°',
  'ÓË' => 'Èçû',
  'ÓÈ' => 'Èç£',
  'ÓÍ' => 'Èçß',
  'ÓÎ' => 'ÈéÄ',
  'ÓÏ' => 'Èçé',
  'ÓÌ' => 'Èçô',
  'ÓÓ' => 'Èóá',
  'ÓÔ' => 'ÈóÄ',
  'Ó' => 'Èóâ',
  'ÓÒ' => 'ÈóÉ',
  'ÓÚ' => 'ÈóÖ',
  'ÓÛ' => 'Èñ∑',
  'ÓÙ' => 'ÈöÆ',
  'Óı' => 'Èö∞',
  'Óˆ' => 'Èö¨',
  'Ó˜' => 'Èú†',
  'Ó¯' => 'Èúü',
  'Ó˘' => 'Èúò',
  'Ó˙' => 'Èúù',
  'Ó˚' => 'Èúô',
  'Ó¸' => 'Èûö',
  'Ó˝' => 'Èû°',
  'Ó˛' => 'Èûú',
  'Ô@' => 'Èûû',
  'ÔA' => 'Èûù',
  'ÔB' => 'Èüï',
  'ÔC' => 'Èüî',
  'ÔD' => 'Èü±',
  'ÔE' => 'È°Å',
  'ÔF' => 'È°Ñ',
  'ÔG' => 'È°ä',
  'ÔH' => 'È°â',
  'ÔI' => 'È°Ö',
  'ÔJ' => 'È°É',
  'ÔK' => 'È§•',
  'ÔL' => 'È§´',
  'ÔM' => 'È§¨',
  'ÔN' => 'È§™',
  'ÔO' => 'È§≥',
  'ÔP' => 'È§≤',
  'ÔQ' => 'È§Ø',
  'ÔR' => 'È§≠',
  'ÔS' => 'È§±',
  'ÔT' => 'È§∞',
  'ÔU' => 'È¶ò',
  'ÔV' => 'È¶£',
  'ÔW' => 'È¶°',
  'ÔX' => 'È®Ç',
  'ÔY' => 'Èß∫',
  'ÔZ' => 'Èß¥',
  'Ô[' => 'Èß∑',
  'Ô\\' => 'Èßπ',
  'Ô]' => 'Èß∏',
  'Ô^' => 'Èß∂',
  'Ô_' => 'Èßª',
  'Ô`' => 'ÈßΩ',
  'Ôa' => 'Èßæ',
  'Ôb' => 'Èßº',
  'Ôc' => 'È®É',
  'Ôd' => 'È™æ',
  'Ôe' => 'È´æ',
  'Ôf' => 'È´Ω',
  'Ôg' => 'È¨Å',
  'Ôh' => 'È´º',
  'Ôi' => 'È≠à',
  'Ôj' => 'ÈÆö',
  'Ôk' => 'ÈÆ®',
  'Ôl' => 'ÈÆû',
  'Ôm' => 'ÈÆõ',
  'Ôn' => 'ÈÆ¶',
  'Ôo' => 'ÈÆ°',
  'Ôp' => 'ÈÆ•',
  'Ôq' => 'ÈÆ§',
  'Ôr' => 'ÈÆÜ',
  'Ôs' => 'ÈÆ¢',
  'Ôt' => 'ÈÆ†',
  'Ôu' => 'ÈÆØ',
  'Ôv' => 'È¥≥',
  'Ôw' => 'ÈµÅ',
  'Ôx' => 'Èµß',
  'Ôy' => 'È¥∂',
  'Ôz' => 'È¥Æ',
  'Ô{' => 'È¥Ø',
  'Ô|' => 'È¥±',
  'Ô}' => 'È¥∏',
  'Ô~' => 'È¥∞',
  'Ô°' => 'ÈµÖ',
  'Ô¢' => 'ÈµÇ',
  'Ô£' => 'ÈµÉ',
  'Ô§' => 'È¥æ',
  'Ô•' => 'È¥∑',
  'Ô¶' => 'ÈµÄ',
  'Ôß' => 'È¥Ω',
  'Ô®' => 'Áøµ',
  'Ô©' => 'È¥≠',
  'Ô™' => 'È∫ä',
  'Ô´' => 'È∫â',
  'Ô¨' => 'È∫ç',
  'Ô≠' => 'È∫∞',
  'ÔÆ' => 'Èªà',
  'ÔØ' => 'Èªö',
  'Ô∞' => 'Èªª',
  'Ô±' => 'Èªø',
  'Ô≤' => 'Èº§',
  'Ô≥' => 'Èº£',
  'Ô¥' => 'Èº¢',
  'Ôµ' => 'ÈΩî',
  'Ô∂' => 'Èæ†',
  'Ô∑' => 'ÂÑ±',
  'Ô∏' => 'ÂÑ≠',
  'Ôπ' => 'ÂÑÆ',
  'Ô∫' => 'Âöò',
  'Ôª' => 'Âöú',
  'Ôº' => 'Âöó',
  'ÔΩ' => 'Âöö',
  'Ôæ' => 'Âöù',
  'Ôø' => 'Âöô',
  'Ô¿' => 'Â•∞',
  'Ô¡' => 'Â¨º',
  'Ô¬' => 'Â±©',
  'Ô√' => 'Â±™',
  'Ôƒ' => 'Â∑Ä',
  'Ô≈' => 'Âπ≠',
  'Ô∆' => 'ÂπÆ',
  'Ô«' => 'Êáò',
  'Ô»' => 'Êáü',
  'Ô…' => 'Êá≠',
  'Ô ' => 'ÊáÆ',
  'ÔÀ' => 'Êá±',
  'ÔÃ' => 'Êá™',
  'ÔÕ' => 'Êá∞',
  'ÔŒ' => 'Êá´',
  'Ôœ' => 'Êáñ',
  'Ô–' => 'Êá©',
  'Ô—' => 'Êìø',
  'Ô“' => 'ÊîÑ',
  'Ô”' => 'ÊìΩ',
  'Ô‘' => 'Êì∏',
  'Ô’' => 'ÊîÅ',
  'Ô÷' => 'ÊîÉ',
  'Ô◊' => 'Êìº',
  'Ôÿ' => 'Êñî',
  'ÔŸ' => 'Êóõ',
  'Ô⁄' => 'Êõö',
  'Ô€' => 'Êõõ',
  'Ô‹' => 'Êõò',
  'Ô›' => 'Ê´Ö',
  'Ôﬁ' => 'Ê™π',
  'Ôﬂ' => 'Ê™Ω',
  'Ô‡' => 'Ê´°',
  'Ô·' => 'Ê´Ü',
  'Ô‚' => 'Ê™∫',
  'Ô„' => 'Ê™∂',
  'Ô‰' => 'Ê™∑',
  'ÔÂ' => 'Ê´á',
  'ÔÊ' => 'Ê™¥',
  'ÔÁ' => 'Ê™≠',
  'ÔË' => 'Ê≠û',
  'ÔÈ' => 'ÊØâ',
  'ÔÍ' => 'Ê∞ã',
  'ÔÎ' => 'ÁÄá',
  'ÔÏ' => 'ÁÄå',
  'ÔÌ' => 'ÁÄç',
  'ÔÓ' => 'ÁÄÅ',
  'ÔÔ' => 'ÁÄÖ',
  'Ô' => 'ÁÄî',
  'ÔÒ' => 'ÁÄé',
  'ÔÚ' => 'Êøø',
  'ÔÛ' => 'ÁÄÄ',
  'ÔÙ' => 'Êøª',
  'Ôı' => 'ÁÄ¶',
  'Ôˆ' => 'Êøº',
  'Ô˜' => 'Êø∑',
  'Ô¯' => 'ÁÄä',
  'Ô˘' => 'ÁàÅ',
  'Ô˙' => 'Ááø',
  'Ô˚' => 'Ááπ',
  'Ô¸' => 'ÁàÉ',
  'Ô˝' => 'ÁáΩ',
  'Ô˛' => 'Áç∂',
  '@' => 'Áí∏',
  'A' => 'ÁìÄ',
  'B' => 'Áíµ',
  'C' => 'ÁìÅ',
  'D' => 'Áíæ',
  'E' => 'Áí∂',
  'F' => 'Áíª',
  'G' => 'ÁìÇ',
  'H' => 'Áîî',
  'I' => 'Áîì',
  'J' => 'Áôú',
  'K' => 'Áô§',
  'L' => 'Áôô',
  'M' => 'Áôê',
  'N' => 'Áôì',
  'O' => 'Áôó',
  'P' => 'Áôö',
  'Q' => 'Áö¶',
  'R' => 'ÁöΩ',
  'S' => 'Áõ¨',
  'T' => 'ÁüÇ',
  'U' => 'Áû∫',
  'V' => 'Á£ø',
  'W' => 'Á§å',
  'X' => 'Á§ì',
  'Y' => 'Á§î',
  'Z' => 'Á§â',
  '[' => 'Á§ê',
  '\\' => 'Á§í',
  ']' => 'Á§ë',
  '^' => 'Á¶≠',
  '_' => 'Á¶¨',
  '`' => 'Á©ü',
  'a' => 'Á∞ú',
  'b' => 'Á∞©',
  'c' => 'Á∞ô',
  'd' => 'Á∞†',
  'e' => 'Á∞ü',
  'f' => 'Á∞≠',
  'g' => 'Á∞ù',
  'h' => 'Á∞¶',
  'i' => 'Á∞®',
  'j' => 'Á∞¢',
  'k' => 'Á∞•',
  'l' => 'Á∞∞',
  'm' => 'Áπú',
  'n' => 'Áπê',
  'o' => 'Áπñ',
  'p' => 'Áπ£',
  'q' => 'Áπò',
  'r' => 'Áπ¢',
  's' => 'Áπü',
  't' => 'Áπë',
  'u' => 'Áπ†',
  'v' => 'Áπó',
  'w' => 'Áπì',
  'x' => 'Áæµ',
  'y' => 'Áæ≥',
  'z' => 'Áø∑',
  '{' => 'Áø∏',
  '|' => 'ËÅµ',
  '}' => 'Ëáë',
  '~' => 'Ëáí',
  '°' => 'Ëáê',
  '¢' => 'Ëâü',
  '£' => 'Ëâû',
  '§' => 'Ëñ¥',
  '•' => 'ËóÜ',
  '¶' => 'ËóÄ',
  'ß' => 'ËóÉ',
  '®' => 'ËóÇ',
  '©' => 'Ëñ≥',
  '™' => 'Ëñµ',
  '´' => 'ËñΩ',
  '¨' => 'Ëóá',
  '≠' => 'ËóÑ',
  'Æ' => 'Ëñø',
  'Ø' => 'Ëóã',
  '∞' => 'Ëóé',
  '±' => 'Ëóà',
  '≤' => 'ËóÖ',
  '≥' => 'Ëñ±',
  '¥' => 'Ëñ∂',
  'µ' => 'Ëóí',
  '∂' => 'Ëò§',
  '∑' => 'Ëñ∏',
  '∏' => 'Ëñ∑',
  'π' => 'Ëñæ',
  '∫' => 'Ëô©',
  'ª' => 'Ëüß',
  'º' => 'Ëü¶',
  'Ω' => 'Ëü¢',
  'æ' => 'Ëüõ',
  'ø' => 'Ëü´',
  '¿' => 'Ëü™',
  '¡' => 'Ëü•',
  '¬' => 'Ëüü',
  '√' => 'Ëü≥',
  'ƒ' => 'Ëü§',
  '≈' => 'Ëüî',
  '∆' => 'Ëüú',
  '«' => 'Ëüì',
  '»' => 'Ëü≠',
  '…' => 'Ëüò',
  ' ' => 'Ëü£',
  'À' => 'Ëû§',
  'Ã' => 'Ëüó',
  'Õ' => 'Ëüô',
  'Œ' => 'Ë†Å',
  'œ' => 'Ëü¥',
  '–' => 'Ëü®',
  '—' => 'Ëüù',
  '“' => 'Ë•ì',
  '”' => 'Ë•ã',
  '‘' => 'Ë•è',
  '’' => 'Ë•å',
  '÷' => 'Ë•Ü',
  '◊' => 'Ë•ê',
  'ÿ' => 'Ë•ë',
  'Ÿ' => 'Ë•â',
  '⁄' => 'Ë¨™',
  '€' => 'Ë¨ß',
  '‹' => 'Ë¨£',
  '›' => 'Ë¨≥',
  'ﬁ' => 'Ë¨∞',
  'ﬂ' => 'Ë¨µ',
  '‡' => 'Ë≠á',
  '·' => 'Ë¨Ø',
  '‚' => 'Ë¨º',
  '„' => 'Ë¨æ',
  '‰' => 'Ë¨±',
  'Â' => 'Ë¨•',
  'Ê' => 'Ë¨∑',
  'Á' => 'Ë¨¶',
  'Ë' => 'Ë¨∂',
  'È' => 'Ë¨Æ',
  'Í' => 'Ë¨§',
  'Î' => 'Ë¨ª',
  'Ï' => 'Ë¨Ω',
  'Ì' => 'Ë¨∫',
  'Ó' => 'Ë±Ç',
  'Ô' => 'Ë±µ',
  '' => 'Ë≤ô',
  'Ò' => 'Ë≤ò',
  'Ú' => 'Ë≤ó',
  'Û' => 'Ë≥æ',
  'Ù' => 'Ë¥Ñ',
  'ı' => 'Ë¥Ç',
  'ˆ' => 'Ë¥Ä',
  '˜' => 'Ëπú',
  '¯' => 'Ëπ¢',
  '˘' => 'Ëπ†',
  '˙' => 'Ëπó',
  '˚' => 'Ëπñ',
  '¸' => 'Ëπû',
  '˝' => 'Ëπ•',
  '˛' => 'Ëπß',
  'Ò@' => 'Ëπõ',
  'ÒA' => 'Ëπö',
  'ÒB' => 'Ëπ°',
  'ÒC' => 'Ëπù',
  'ÒD' => 'Ëπ©',
  'ÒE' => 'Ëπî',
  'ÒF' => 'ËΩÜ',
  'ÒG' => 'ËΩá',
  'ÒH' => 'ËΩà',
  'ÒI' => 'ËΩã',
  'ÒJ' => 'ÈÑ®',
  'ÒK' => 'ÈÑ∫',
  'ÒL' => 'ÈÑª',
  'ÒM' => 'ÈÑæ',
  'ÒN' => 'ÈÜ®',
  'ÒO' => 'ÈÜ•',
  'ÒP' => 'ÈÜß',
  'ÒQ' => 'ÈÜØ',
  'ÒR' => 'ÈÜ™',
  'ÒS' => 'Èéµ',
  'ÒT' => 'Èéå',
  'ÒU' => 'Èéí',
  'ÒV' => 'Èé∑',
  'ÒW' => 'Èéõ',
  'ÒX' => 'Èéù',
  'ÒY' => 'Èéâ',
  'ÒZ' => 'Èéß',
  'Ò[' => 'Èéé',
  'Ò\\' => 'Èé™',
  'Ò]' => 'Èéû',
  'Ò^' => 'Èé¶',
  'Ò_' => 'Èéï',
  'Ò`' => 'Èéà',
  'Òa' => 'Èéô',
  'Òb' => 'Èéü',
  'Òc' => 'Èéç',
  'Òd' => 'Èé±',
  'Òe' => 'Èéë',
  'Òf' => 'Èé≤',
  'Òg' => 'Èé§',
  'Òh' => 'Èé®',
  'Òi' => 'Èé¥',
  'Òj' => 'Èé£',
  'Òk' => 'Èé•',
  'Òl' => 'Èóí',
  'Òm' => 'Èóì',
  'Òn' => 'Èóë',
  'Òo' => 'Èö≥',
  'Òp' => 'Èõó',
  'Òq' => 'Èõö',
  'Òr' => 'Â∑Ç',
  'Òs' => 'Èõü',
  'Òt' => 'Èõò',
  'Òu' => 'Èõù',
  'Òv' => 'Èú£',
  'Òw' => 'Èú¢',
  'Òx' => 'Èú•',
  'Òy' => 'Èû¨',
  'Òz' => 'ÈûÆ',
  'Ò{' => 'Èû®',
  'Ò|' => 'Èû´',
  'Ò}' => 'Èû§',
  'Ò~' => 'Èû™',
  'Ò°' => 'Èû¢',
  'Ò¢' => 'Èû•',
  'Ò£' => 'Èüó',
  'Ò§' => 'Èüô',
  'Ò•' => 'Èüñ',
  'Ò¶' => 'Èüò',
  'Òß' => 'Èü∫',
  'Ò®' => 'È°ê',
  'Ò©' => 'È°ë',
  'Ò™' => 'È°í',
  'Ò´' => 'È¢∏',
  'Ò¨' => 'È•Å',
  'Ò≠' => 'È§º',
  'ÒÆ' => 'È§∫',
  'ÒØ' => 'È®è',
  'Ò∞' => 'È®ã',
  'Ò±' => 'È®â',
  'Ò≤' => 'È®ç',
  'Ò≥' => 'È®Ñ',
  'Ò¥' => 'È®ë',
  'Òµ' => 'È®ä',
  'Ò∂' => 'È®Ö',
  'Ò∑' => 'È®á',
  'Ò∏' => 'È®Ü',
  'Òπ' => 'È´Ä',
  'Ò∫' => 'È´ú',
  'Òª' => 'È¨à',
  'Òº' => 'È¨Ñ',
  'ÒΩ' => 'È¨Ö',
  'Òæ' => 'È¨©',
  'Òø' => 'È¨µ',
  'Ò¿' => 'È≠ä',
  'Ò¡' => 'È≠å',
  'Ò¬' => 'È≠ã',
  'Ò√' => 'ÈØá',
  'Òƒ' => 'ÈØÜ',
  'Ò≈' => 'ÈØÉ',
  'Ò∆' => 'ÈÆø',
  'Ò«' => 'ÈØÅ',
  'Ò»' => 'ÈÆµ',
  'Ò…' => 'ÈÆ∏',
  'Ò ' => 'ÈØì',
  'ÒÀ' => 'ÈÆ∂',
  'ÒÃ' => 'ÈØÑ',
  'ÒÕ' => 'ÈÆπ',
  'ÒŒ' => 'ÈÆΩ',
  'Òœ' => 'Èµú',
  'Ò–' => 'Èµì',
  'Ò—' => 'Èµè',
  'Ò“' => 'Èµä',
  'Ò”' => 'Èµõ',
  'Ò‘' => 'Èµã',
  'Ò’' => 'Èµô',
  'Ò÷' => 'Èµñ',
  'Ò◊' => 'Èµå',
  'Òÿ' => 'Èµó',
  'ÒŸ' => 'Èµí',
  'Ò⁄' => 'Èµî',
  'Ò€' => 'Èµü',
  'Ò‹' => 'Èµò',
  'Ò›' => 'Èµö',
  'Òﬁ' => 'È∫é',
  'Òﬂ' => 'È∫å',
  'Ò‡' => 'Èªü',
  'Ò·' => 'ÈºÅ',
  'Ò‚' => 'ÈºÄ',
  'Ò„' => 'Èºñ',
  'Ò‰' => 'Èº•',
  'ÒÂ' => 'Èº´',
  'ÒÊ' => 'Èº™',
  'ÒÁ' => 'Èº©',
  'ÒË' => 'Èº®',
  'ÒÈ' => 'ÈΩå',
  'ÒÍ' => 'ÈΩï',
  'ÒÎ' => 'ÂÑ¥',
  'ÒÏ' => 'ÂÑµ',
  'ÒÌ' => 'Âäñ',
  'ÒÓ' => 'Âã∑',
  'ÒÔ' => 'Âé¥',
  'Ò' => 'Âö´',
  'ÒÒ' => 'Âö≠',
  'ÒÚ' => 'Âö¶',
  'ÒÛ' => 'Âöß',
  'ÒÙ' => 'Âö™',
  'Òı' => 'Âö¨',
  'Òˆ' => 'Â£ö',
  'Ò˜' => 'Â£ù',
  'Ò¯' => 'Â£õ',
  'Ò˘' => 'Â§í',
  'Ò˙' => 'Â¨Ω',
  'Ò˚' => 'Â¨æ',
  'Ò¸' => 'Â¨ø',
  'Ò˝' => 'Â∑É',
  'Ò˛' => 'Âπ∞',
  'Ú@' => 'Âæø',
  'ÚA' => 'Êáª',
  'ÚB' => 'Êîá',
  'ÚC' => 'Êîê',
  'ÚD' => 'Êîç',
  'ÚE' => 'Êîâ',
  'ÚF' => 'Êîå',
  'ÚG' => 'Êîé',
  'ÚH' => 'ÊñÑ',
  'ÚI' => 'Êóû',
  'ÚJ' => 'Êóù',
  'ÚK' => 'Êõû',
  'ÚL' => 'Ê´ß',
  'ÚM' => 'Ê´†',
  'ÚN' => 'Ê´å',
  'ÚO' => 'Ê´ë',
  'ÚP' => 'Ê´ô',
  'ÚQ' => 'Ê´ã',
  'ÚR' => 'Ê´ü',
  'ÚS' => 'Ê´ú',
  'ÚT' => 'Ê´ê',
  'ÚU' => 'Ê´´',
  'ÚV' => 'Ê´è',
  'ÚW' => 'Ê´ç',
  'ÚX' => 'Ê´û',
  'ÚY' => 'Ê≠†',
  'ÚZ' => 'ÊÆ∞',
  'Ú[' => 'Ê∞å',
  'Ú\\' => 'ÁÄô',
  'Ú]' => 'ÁÄß',
  'Ú^' => 'ÁÄ†',
  'Ú_' => 'ÁÄñ',
  'Ú`' => 'ÁÄ´',
  'Úa' => 'ÁÄ°',
  'Úb' => 'ÁÄ¢',
  'Úc' => 'ÁÄ£',
  'Úd' => 'ÁÄ©',
  'Úe' => 'ÁÄó',
  'Úf' => 'ÁÄ§',
  'Úg' => 'ÁÄú',
  'Úh' => 'ÁÄ™',
  'Úi' => 'Áàå',
  'Új' => 'Áàä',
  'Úk' => 'Áàá',
  'Úl' => 'ÁàÇ',
  'Úm' => 'ÁàÖ',
  'Ún' => 'Áä•',
  'Úo' => 'Áä¶',
  'Úp' => 'Áä§',
  'Úq' => 'Áä£',
  'Úr' => 'Áä°',
  'Ús' => 'Áìã',
  'Út' => 'ÁìÖ',
  'Úu' => 'Áí∑',
  'Úv' => 'ÁìÉ',
  'Úw' => 'Áîñ',
  'Úx' => 'Áô†',
  'Úy' => 'Áüâ',
  'Úz' => 'Áüä',
  'Ú{' => 'ÁüÑ',
  'Ú|' => 'Áü±',
  'Ú}' => 'Á§ù',
  'Ú~' => 'Á§õ',
  'Ú°' => 'Á§°',
  'Ú¢' => 'Á§ú',
  'Ú£' => 'Á§ó',
  'Ú§' => 'Á§û',
  'Ú•' => 'Á¶∞',
  'Ú¶' => 'Á©ß',
  'Úß' => 'Á©®',
  'Ú®' => 'Á∞≥',
  'Ú©' => 'Á∞º',
  'Ú™' => 'Á∞π',
  'Ú´' => 'Á∞¨',
  'Ú¨' => 'Á∞ª',
  'Ú≠' => 'Á≥¨',
  'ÚÆ' => 'Á≥™',
  'ÚØ' => 'Áπ∂',
  'Ú∞' => 'Áπµ',
  'Ú±' => 'Áπ∏',
  'Ú≤' => 'Áπ∞',
  'Ú≥' => 'Áπ∑',
  'Ú¥' => 'ÁπØ',
  'Úµ' => 'Áπ∫',
  'Ú∂' => 'Áπ≤',
  'Ú∑' => 'Áπ¥',
  'Ú∏' => 'Áπ®',
  'Úπ' => 'ÁΩã',
  'Ú∫' => 'ÁΩä',
  'Úª' => 'ÁæÉ',
  'Úº' => 'ÁæÜ',
  'ÚΩ' => 'Áæ∑',
  'Úæ' => 'ÁøΩ',
  'Úø' => 'Áøæ',
  'Ú¿' => 'ËÅ∏',
  'Ú¡' => 'Ëáó',
  'Ú¬' => 'Ëáï',
  'Ú√' => 'Ëâ§',
  'Úƒ' => 'Ëâ°',
  'Ú≈' => 'Ëâ£',
  'Ú∆' => 'Ëó´',
  'Ú«' => 'Ëó±',
  'Ú»' => 'Ëó≠',
  'Ú…' => 'Ëóô',
  'Ú ' => 'Ëó°',
  'ÚÀ' => 'Ëó®',
  'ÚÃ' => 'Ëóö',
  'ÚÕ' => 'Ëóó',
  'ÚŒ' => 'Ëó¨',
  'Úœ' => 'Ëó≤',
  'Ú–' => 'Ëó∏',
  'Ú—' => 'Ëóò',
  'Ú“' => 'Ëóü',
  'Ú”' => 'Ëó£',
  'Ú‘' => 'Ëóú',
  'Ú’' => 'Ëóë',
  'Ú÷' => 'Ëó∞',
  'Ú◊' => 'Ëó¶',
  'Úÿ' => 'ËóØ',
  'ÚŸ' => 'Ëóû',
  'Ú⁄' => 'Ëó¢',
  'Ú€' => 'Ë†Ä',
  'Ú‹' => 'Ëü∫',
  'Ú›' => 'Ë†É',
  'Úﬁ' => 'Ëü∂',
  'Úﬂ' => 'Ëü∑',
  'Ú‡' => 'Ë†â',
  'Ú·' => 'Ë†å',
  'Ú‚' => 'Ë†ã',
  'Ú„' => 'Ë†Ü',
  'Ú‰' => 'Ëüº',
  'ÚÂ' => 'Ë†à',
  'ÚÊ' => 'Ëüø',
  'ÚÁ' => 'Ë†ä',
  'ÚË' => 'Ë†Ç',
  'ÚÈ' => 'Ë•¢',
  'ÚÍ' => 'Ë•ö',
  'ÚÎ' => 'Ë•õ',
  'ÚÏ' => 'Ë•ó',
  'ÚÌ' => 'Ë•°',
  'ÚÓ' => 'Ë•ú',
  'ÚÔ' => 'Ë•ò',
  'Ú' => 'Ë•ù',
  'ÚÒ' => 'Ë•ô',
  'ÚÚ' => 'Ë¶à',
  'ÚÛ' => 'Ë¶∑',
  'ÚÙ' => 'Ë¶∂',
  'Úı' => 'Ëß∂',
  'Úˆ' => 'Ë≠ê',
  'Ú˜' => 'Ë≠à',
  'Ú¯' => 'Ë≠ä',
  'Ú˘' => 'Ë≠Ä',
  'Ú˙' => 'Ë≠ì',
  'Ú˚' => 'Ë≠ñ',
  'Ú¸' => 'Ë≠î',
  'Ú˝' => 'Ë≠ã',
  'Ú˛' => 'Ë≠ï',
  'Û@' => 'Ë≠ë',
  'ÛA' => 'Ë≠Ç',
  'ÛB' => 'Ë≠í',
  'ÛC' => 'Ë≠ó',
  'ÛD' => 'Ë±É',
  'ÛE' => 'Ë±∑',
  'ÛF' => 'Ë±∂',
  'ÛG' => 'Ë≤ö',
  'ÛH' => 'Ë¥Ü',
  'ÛI' => 'Ë¥á',
  'ÛJ' => 'Ë¥â',
  'ÛK' => 'Ë∂¨',
  'ÛL' => 'Ë∂™',
  'ÛM' => 'Ë∂≠',
  'ÛN' => 'Ë∂´',
  'ÛO' => 'Ëπ≠',
  'ÛP' => 'Ëπ∏',
  'ÛQ' => 'Ëπ≥',
  'ÛR' => 'Ëπ™',
  'ÛS' => 'ËπØ',
  'ÛT' => 'Ëπª',
  'ÛU' => 'ËªÇ',
  'ÛV' => 'ËΩí',
  'ÛW' => 'ËΩë',
  'ÛX' => 'ËΩè',
  'ÛY' => 'ËΩê',
  'ÛZ' => 'ËΩì',
  'Û[' => 'Ëæ¥',
  'Û\\' => 'ÈÖÄ',
  'Û]' => 'ÈÑø',
  'Û^' => 'ÈÜ∞',
  'Û_' => 'ÈÜ≠',
  'Û`' => 'Èèû',
  'Ûa' => 'Èèá',
  'Ûb' => 'Èèè',
  'Ûc' => 'ÈèÇ',
  'Ûd' => 'Èèö',
  'Ûe' => 'Èèê',
  'Ûf' => 'Èèπ',
  'Ûg' => 'Èè¨',
  'Ûh' => 'Èèå',
  'Ûi' => 'Èèô',
  'Ûj' => 'Èé©',
  'Ûk' => 'Èè¶',
  'Ûl' => 'Èèä',
  'Ûm' => 'Èèî',
  'Ûn' => 'ÈèÆ',
  'Ûo' => 'Èè£',
  'Ûp' => 'Èèï',
  'Ûq' => 'ÈèÑ',
  'Ûr' => 'Èèé',
  'Ûs' => 'ÈèÄ',
  'Ût' => 'Èèí',
  'Ûu' => 'Èèß',
  'Ûv' => 'ÈïΩ',
  'Ûw' => 'Èóö',
  'Ûx' => 'Èóõ',
  'Ûy' => 'Èõ°',
  'Ûz' => 'Èú©',
  'Û{' => 'Èú´',
  'Û|' => 'Èú¨',
  'Û}' => 'Èú®',
  'Û~' => 'Èú¶',
  'Û°' => 'Èû≥',
  'Û¢' => 'Èû∑',
  'Û£' => 'Èû∂',
  'Û§' => 'Èüù',
  'Û•' => 'Èüû',
  'Û¶' => 'Èüü',
  'Ûß' => 'È°ú',
  'Û®' => 'È°ô',
  'Û©' => 'È°ù',
  'Û™' => 'È°ó',
  'Û´' => 'È¢ø',
  'Û¨' => 'È¢Ω',
  'Û≠' => 'È¢ª',
  'ÛÆ' => 'È¢æ',
  'ÛØ' => 'È•à',
  'Û∞' => 'È•á',
  'Û±' => 'È•É',
  'Û≤' => 'È¶¶',
  'Û≥' => 'È¶ß',
  'Û¥' => 'È®ö',
  'Ûµ' => 'È®ï',
  'Û∂' => 'È®•',
  'Û∑' => 'È®ù',
  'Û∏' => 'È®§',
  'Ûπ' => 'È®õ',
  'Û∫' => 'È®¢',
  'Ûª' => 'È®†',
  'Ûº' => 'È®ß',
  'ÛΩ' => 'È®£',
  'Ûæ' => 'È®û',
  'Ûø' => 'È®ú',
  'Û¿' => 'È®î',
  'Û¡' => 'È´Ç',
  'Û¬' => 'È¨ã',
  'Û√' => 'È¨ä',
  'Ûƒ' => 'È¨é',
  'Û≈' => 'È¨å',
  'Û∆' => 'È¨∑',
  'Û«' => 'ÈØ™',
  'Û»' => 'ÈØ´',
  'Û…' => 'ÈØ†',
  'Û ' => 'ÈØû',
  'ÛÀ' => 'ÈØ§',
  'ÛÃ' => 'ÈØ¶',
  'ÛÕ' => 'ÈØ¢',
  'ÛŒ' => 'ÈØ∞',
  'Ûœ' => 'ÈØî',
  'Û–' => 'ÈØó',
  'Û—' => 'ÈØ¨',
  'Û“' => 'ÈØú',
  'Û”' => 'ÈØô',
  'Û‘' => 'ÈØ•',
  'Û’' => 'ÈØï',
  'Û÷' => 'ÈØ°',
  'Û◊' => 'ÈØö',
  'Ûÿ' => 'Èµ∑',
  'ÛŸ' => 'È∂Å',
  'Û⁄' => 'È∂ä',
  'Û€' => 'È∂Ñ',
  'Û‹' => 'È∂à',
  'Û›' => 'Èµ±',
  'Ûﬁ' => 'È∂Ä',
  'Ûﬂ' => 'Èµ∏',
  'Û‡' => 'È∂Ü',
  'Û·' => 'È∂ã',
  'Û‚' => 'È∂å',
  'Û„' => 'ÈµΩ',
  'Û‰' => 'Èµ´',
  'ÛÂ' => 'Èµ¥',
  'ÛÊ' => 'Èµµ',
  'ÛÁ' => 'Èµ∞',
  'ÛË' => 'Èµ©',
  'ÛÈ' => 'È∂Ö',
  'ÛÍ' => 'Èµ≥',
  'ÛÎ' => 'Èµª',
  'ÛÏ' => 'È∂Ç',
  'ÛÌ' => 'ÈµØ',
  'ÛÓ' => 'Èµπ',
  'ÛÔ' => 'Èµø',
  'Û' => 'È∂á',
  'ÛÒ' => 'Èµ®',
  'ÛÚ' => 'È∫î',
  'ÛÛ' => 'È∫ë',
  'ÛÙ' => 'ÈªÄ',
  'Ûı' => 'Èªº',
  'Ûˆ' => 'Èº≠',
  'Û˜' => 'ÈΩÄ',
  'Û¯' => 'ÈΩÅ',
  'Û˘' => 'ÈΩç',
  'Û˙' => 'ÈΩñ',
  'Û˚' => 'ÈΩó',
  'Û¸' => 'ÈΩò',
  'Û˝' => 'Âå∑',
  'Û˛' => 'Âö≤',
  'Ù@' => 'Âöµ',
  'ÙA' => 'Âö≥',
  'ÙB' => 'Â££',
  'ÙC' => 'Â≠Ö',
  'ÙD' => 'Â∑Ü',
  'ÙE' => 'Â∑á',
  'ÙF' => 'ÂªÆ',
  'ÙG' => 'ÂªØ',
  'ÙH' => 'ÂøÄ',
  'ÙI' => 'ÂøÅ',
  'ÙJ' => 'Êáπ',
  'ÙK' => 'Êîó',
  'ÙL' => 'Êîñ',
  'ÙM' => 'Êîï',
  'ÙN' => 'Êîì',
  'ÙO' => 'Êóü',
  'ÙP' => 'Êõ®',
  'ÙQ' => 'Êõ£',
  'ÙR' => 'Êõ§',
  'ÙS' => 'Ê´≥',
  'ÙT' => 'Ê´∞',
  'ÙU' => 'Ê´™',
  'ÙV' => 'Ê´®',
  'ÙW' => 'Ê´π',
  'ÙX' => 'Ê´±',
  'ÙY' => 'Ê´Æ',
  'ÙZ' => 'Ê´Ø',
  'Ù[' => 'ÁÄº',
  'Ù\\' => 'ÁÄµ',
  'Ù]' => 'ÁÄØ',
  'Ù^' => 'ÁÄ∑',
  'Ù_' => 'ÁÄ¥',
  'Ù`' => 'ÁÄ±',
  'Ùa' => 'ÁÅÇ',
  'Ùb' => 'ÁÄ∏',
  'Ùc' => 'ÁÄø',
  'Ùd' => 'ÁÄ∫',
  'Ùe' => 'ÁÄπ',
  'Ùf' => 'ÁÅÄ',
  'Ùg' => 'ÁÄª',
  'Ùh' => 'ÁÄ≥',
  'Ùi' => 'ÁÅÅ',
  'Ùj' => 'Áàì',
  'Ùk' => 'Áàî',
  'Ùl' => 'Áä®',
  'Ùm' => 'ÁçΩ',
  'Ùn' => 'Áçº',
  'Ùo' => 'Áí∫',
  'Ùp' => 'Áö´',
  'Ùq' => 'Áö™',
  'Ùr' => 'Áöæ',
  'Ùs' => 'Áõ≠',
  'Ùt' => 'Áüå',
  'Ùu' => 'Áüé',
  'Ùv' => 'Áüè',
  'Ùw' => 'Áüç',
  'Ùx' => 'Áü≤',
  'Ùy' => 'Á§•',
  'Ùz' => 'Á§£',
  'Ù{' => 'Á§ß',
  'Ù|' => 'Á§®',
  'Ù}' => 'Á§§',
  'Ù~' => 'Á§©',
  'Ù°' => 'Á¶≤',
  'Ù¢' => 'Á©Æ',
  'Ù£' => 'Á©¨',
  'Ù§' => 'Á©≠',
  'Ù•' => 'Á´∑',
  'Ù¶' => 'Á±â',
  'Ùß' => 'Á±à',
  'Ù®' => 'Á±ä',
  'Ù©' => 'Á±á',
  'Ù™' => 'Á±Ö',
  'Ù´' => 'Á≥Æ',
  'Ù¨' => 'Áπª',
  'Ù≠' => 'Áπæ',
  'ÙÆ' => 'Á∫Å',
  'ÙØ' => 'Á∫Ä',
  'Ù∞' => 'Áæ∫',
  'Ù±' => 'Áøø',
  'Ù≤' => 'ËÅπ',
  'Ù≥' => 'Ëáõ',
  'Ù¥' => 'Ëáô',
  'Ùµ' => 'Ëàã',
  'Ù∂' => 'Ëâ®',
  'Ù∑' => 'Ëâ©',
  'Ù∏' => 'Ëò¢',
  'Ùπ' => 'Ëóø',
  'Ù∫' => 'ËòÅ',
  'Ùª' => 'Ëóæ',
  'Ùº' => 'Ëòõ',
  'ÙΩ' => 'ËòÄ',
  'Ùæ' => 'Ëó∂',
  'Ùø' => 'ËòÑ',
  'Ù¿' => 'Ëòâ',
  'Ù¡' => 'ËòÖ',
  'Ù¬' => 'Ëòå',
  'Ù√' => 'ËóΩ',
  'Ùƒ' => 'Ë†ô',
  'Ù≈' => 'Ë†ê',
  'Ù∆' => 'Ë†ë',
  'Ù«' => 'Ë†ó',
  'Ù»' => 'Ë†ì',
  'Ù…' => 'Ë†ñ',
  'Ù ' => 'Ë•£',
  'ÙÀ' => 'Ë•¶',
  'ÙÃ' => 'Ë¶π',
  'ÙÕ' => 'Ëß∑',
  'ÙŒ' => 'Ë≠†',
  'Ùœ' => 'Ë≠™',
  'Ù–' => 'Ë≠ù',
  'Ù—' => 'Ë≠®',
  'Ù“' => 'Ë≠£',
  'Ù”' => 'Ë≠•',
  'Ù‘' => 'Ë≠ß',
  'Ù’' => 'Ë≠≠',
  'Ù÷' => 'Ë∂Æ',
  'Ù◊' => 'Ë∫Ü',
  'Ùÿ' => 'Ë∫à',
  'ÙŸ' => 'Ë∫Ñ',
  'Ù⁄' => 'ËΩô',
  'Ù€' => 'ËΩñ',
  'Ù‹' => 'ËΩó',
  'Ù›' => 'ËΩï',
  'Ùﬁ' => 'ËΩò',
  'Ùﬂ' => 'ËΩö',
  'Ù‡' => 'ÈÇç',
  'Ù·' => 'ÈÖÉ',
  'Ù‚' => 'ÈÖÅ',
  'Ù„' => 'ÈÜ∑',
  'Ù‰' => 'ÈÜµ',
  'ÙÂ' => 'ÈÜ≤',
  'ÙÊ' => 'ÈÜ≥',
  'ÙÁ' => 'Èêã',
  'ÙË' => 'Èêì',
  'ÙÈ' => 'Èèª',
  'ÙÍ' => 'Èê†',
  'ÙÎ' => 'Èêè',
  'ÙÏ' => 'Èêî',
  'ÙÌ' => 'Èèæ',
  'ÙÓ' => 'Èêï',
  'ÙÔ' => 'Èêê',
  'Ù' => 'Èê®',
  'ÙÒ' => 'Èêô',
  'ÙÚ' => 'Èêç',
  'ÙÛ' => 'Èèµ',
  'ÙÙ' => 'ÈêÄ',
  'Ùı' => 'Èè∑',
  'Ùˆ' => 'Èêá',
  'Ù˜' => 'Èêé',
  'Ù¯' => 'Èêñ',
  'Ù˘' => 'Èêí',
  'Ù˙' => 'Èè∫',
  'Ù˚' => 'Èêâ',
  'Ù¸' => 'Èè∏',
  'Ù˝' => 'Èêä',
  'Ù˛' => 'Èèø',
  'ı@' => 'Èèº',
  'ıA' => 'Èêå',
  'ıB' => 'Èè∂',
  'ıC' => 'Èêë',
  'ıD' => 'ÈêÜ',
  'ıE' => 'Èóû',
  'ıF' => 'Èó†',
  'ıG' => 'Èóü',
  'ıH' => 'ÈúÆ',
  'ıI' => 'ÈúØ',
  'ıJ' => 'Èûπ',
  'ıK' => 'Èûª',
  'ıL' => 'ÈüΩ',
  'ıM' => 'Èüæ',
  'ıN' => 'È°†',
  'ıO' => 'È°¢',
  'ıP' => 'È°£',
  'ıQ' => 'È°ü',
  'ıR' => 'È£Å',
  'ıS' => 'È£Ç',
  'ıT' => 'È•ê',
  'ıU' => 'È•é',
  'ıV' => 'È•ô',
  'ıW' => 'È•å',
  'ıX' => 'È•ã',
  'ıY' => 'È•ì',
  'ıZ' => 'È®≤',
  'ı[' => 'È®¥',
  'ı\\' => 'È®±',
  'ı]' => 'È®¨',
  'ı^' => 'È®™',
  'ı_' => 'È®∂',
  'ı`' => 'È®©',
  'ıa' => 'È®Æ',
  'ıb' => 'È®∏',
  'ıc' => 'È®≠',
  'ıd' => 'È´á',
  'ıe' => 'È´ä',
  'ıf' => 'È´Ü',
  'ıg' => 'È¨ê',
  'ıh' => 'È¨í',
  'ıi' => 'È¨ë',
  'ıj' => 'È∞ã',
  'ık' => 'È∞à',
  'ıl' => 'ÈØ∑',
  'ım' => 'È∞Ö',
  'ın' => 'È∞í',
  'ıo' => 'ÈØ∏',
  'ıp' => 'È±Ä',
  'ıq' => 'È∞á',
  'ır' => 'È∞é',
  'ıs' => 'È∞Ü',
  'ıt' => 'È∞ó',
  'ıu' => 'È∞î',
  'ıv' => 'È∞â',
  'ıw' => 'È∂ü',
  'ıx' => 'È∂ô',
  'ıy' => 'È∂§',
  'ız' => 'È∂ù',
  'ı{' => 'È∂í',
  'ı|' => 'È∂ò',
  'ı}' => 'È∂ê',
  'ı~' => 'È∂õ',
  'ı°' => 'È∂†',
  'ı¢' => 'È∂î',
  'ı£' => 'È∂ú',
  'ı§' => 'È∂™',
  'ı•' => 'È∂ó',
  'ı¶' => 'È∂°',
  'ıß' => 'È∂ö',
  'ı®' => 'È∂¢',
  'ı©' => 'È∂®',
  'ı™' => 'È∂û',
  'ı´' => 'È∂£',
  'ı¨' => 'È∂ø',
  'ı≠' => 'È∂©',
  'ıÆ' => 'È∂ñ',
  'ıØ' => 'È∂¶',
  'ı∞' => 'È∂ß',
  'ı±' => 'È∫ô',
  'ı≤' => 'È∫õ',
  'ı≥' => 'È∫ö',
  'ı¥' => 'Èª•',
  'ıµ' => 'Èª§',
  'ı∂' => 'Èªß',
  'ı∑' => 'Èª¶',
  'ı∏' => 'Èº∞',
  'ıπ' => 'ÈºÆ',
  'ı∫' => 'ÈΩõ',
  'ıª' => 'ÈΩ†',
  'ıº' => 'ÈΩû',
  'ıΩ' => 'ÈΩù',
  'ıæ' => 'ÈΩô',
  'ıø' => 'Èæë',
  'ı¿' => 'ÂÑ∫',
  'ı¡' => 'ÂÑπ',
  'ı¬' => 'Âäò',
  'ı√' => 'Âäó',
  'ıƒ' => 'ÂõÉ',
  'ı≈' => 'ÂöΩ',
  'ı∆' => 'Âöæ',
  'ı«' => 'Â≠à',
  'ı»' => 'Â≠á',
  'ı…' => 'Â∑ã',
  'ı ' => 'Â∑è',
  'ıÀ' => 'Âª±',
  'ıÃ' => 'ÊáΩ',
  'ıÕ' => 'Êîõ',
  'ıŒ' => 'Ê¨Ç',
  'ıœ' => 'Ê´º',
  'ı–' => 'Ê¨É',
  'ı—' => 'Ê´∏',
  'ı“' => 'Ê¨Ä',
  'ı”' => 'ÁÅÉ',
  'ı‘' => 'ÁÅÑ',
  'ı’' => 'ÁÅä',
  'ı÷' => 'ÁÅà',
  'ı◊' => 'ÁÅâ',
  'ıÿ' => 'ÁÅÖ',
  'ıŸ' => 'ÁÅÜ',
  'ı⁄' => 'Áàù',
  'ı€' => 'Áàö',
  'ı‹' => 'Áàô',
  'ı›' => 'Áçæ',
  'ıﬁ' => 'Áîó',
  'ıﬂ' => 'Áô™',
  'ı‡' => 'Áüê',
  'ı·' => 'Á§≠',
  'ı‚' => 'Á§±',
  'ı„' => 'Á§Ø',
  'ı‰' => 'Á±î',
  'ıÂ' => 'Á±ì',
  'ıÊ' => 'Á≥≤',
  'ıÁ' => 'Á∫ä',
  'ıË' => 'Á∫á',
  'ıÈ' => 'Á∫à',
  'ıÍ' => 'Á∫ã',
  'ıÎ' => 'Á∫Ü',
  'ıÏ' => 'Á∫ç',
  'ıÌ' => 'ÁΩç',
  'ıÓ' => 'Áæª',
  'ıÔ' => 'ËÄ∞',
  'ı' => 'Ëáù',
  'ıÒ' => 'Ëòò',
  'ıÚ' => 'Ëò™',
  'ıÛ' => 'Ëò¶',
  'ıÙ' => 'Ëòü',
  'ıı' => 'Ëò£',
  'ıˆ' => 'Ëòú',
  'ı˜' => 'Ëòô',
  'ı¯' => 'Ëòß',
  'ı˘' => 'ËòÆ',
  'ı˙' => 'Ëò°',
  'ı˚' => 'Ëò†',
  'ı¸' => 'Ëò©',
  'ı˝' => 'Ëòû',
  'ı˛' => 'Ëò•',
  'ˆ@' => 'Ë†©',
  'ˆA' => 'Ë†ù',
  'ˆB' => 'Ë†õ',
  'ˆC' => 'Ë††',
  'ˆD' => 'Ë†§',
  'ˆE' => 'Ë†ú',
  'ˆF' => 'Ë†´',
  'ˆG' => 'Ë°ä',
  'ˆH' => 'Ë•≠',
  'ˆI' => 'Ë•©',
  'ˆJ' => 'Ë•Æ',
  'ˆK' => 'Ë•´',
  'ˆL' => 'Ëß∫',
  'ˆM' => 'Ë≠π',
  'ˆN' => 'Ë≠∏',
  'ˆO' => 'Ë≠Ö',
  'ˆP' => 'Ë≠∫',
  'ˆQ' => 'Ë≠ª',
  'ˆR' => 'Ë¥ê',
  'ˆS' => 'Ë¥î',
  'ˆT' => 'Ë∂Ø',
  'ˆU' => 'Ë∫é',
  'ˆV' => 'Ë∫å',
  'ˆW' => 'ËΩû',
  'ˆX' => 'ËΩõ',
  'ˆY' => 'ËΩù',
  'ˆZ' => 'ÈÖÜ',
  'ˆ[' => 'ÈÖÑ',
  'ˆ\\' => 'ÈÖÖ',
  'ˆ]' => 'ÈÜπ',
  'ˆ^' => 'Èêø',
  'ˆ_' => 'Èêª',
  'ˆ`' => 'Èê∂',
  'ˆa' => 'Èê©',
  'ˆb' => 'ÈêΩ',
  'ˆc' => 'Èêº',
  'ˆd' => 'Èê∞',
  'ˆe' => 'Èêπ',
  'ˆf' => 'Èê™',
  'ˆg' => 'Èê∑',
  'ˆh' => 'Èê¨',
  'ˆi' => 'ÈëÄ',
  'ˆj' => 'Èê±',
  'ˆk' => 'Èó•',
  'ˆl' => 'Èó§',
  'ˆm' => 'Èó£',
  'ˆn' => 'Èúµ',
  'ˆo' => 'Èú∫',
  'ˆp' => 'Èûø',
  'ˆq' => 'Èü°',
  'ˆr' => 'È°§',
  'ˆs' => 'È£â',
  'ˆt' => 'È£Ü',
  'ˆu' => 'È£Ä',
  'ˆv' => 'È•ò',
  'ˆw' => 'È•ñ',
  'ˆx' => 'È®π',
  'ˆy' => 'È®Ω',
  'ˆz' => 'È©Ü',
  'ˆ{' => 'È©Ñ',
  'ˆ|' => 'È©Ç',
  'ˆ}' => 'È©Å',
  'ˆ~' => 'È®∫',
  'ˆ°' => 'È®ø',
  'ˆ¢' => 'È´ç',
  'ˆ£' => 'È¨ï',
  'ˆ§' => 'È¨ó',
  'ˆ•' => 'È¨ò',
  'ˆ¶' => 'È¨ñ',
  'ˆß' => 'È¨∫',
  'ˆ®' => 'È≠í',
  'ˆ©' => 'È∞´',
  'ˆ™' => 'È∞ù',
  'ˆ´' => 'È∞ú',
  'ˆ¨' => 'È∞¨',
  'ˆ≠' => 'È∞£',
  'ˆÆ' => 'È∞®',
  'ˆØ' => 'È∞©',
  'ˆ∞' => 'È∞§',
  'ˆ±' => 'È∞°',
  'ˆ≤' => 'È∂∑',
  'ˆ≥' => 'È∂∂',
  'ˆ¥' => 'È∂º',
  'ˆµ' => 'È∑Å',
  'ˆ∂' => 'È∑á',
  'ˆ∑' => 'È∑ä',
  'ˆ∏' => 'È∑è',
  'ˆπ' => 'È∂æ',
  'ˆ∫' => 'È∑Ö',
  'ˆª' => 'È∑É',
  'ˆº' => 'È∂ª',
  'ˆΩ' => 'È∂µ',
  'ˆæ' => 'È∑é',
  'ˆø' => 'È∂π',
  'ˆ¿' => 'È∂∫',
  'ˆ¡' => 'È∂¨',
  'ˆ¬' => 'È∑à',
  'ˆ√' => 'È∂±',
  'ˆƒ' => 'È∂≠',
  'ˆ≈' => 'È∑å',
  'ˆ∆' => 'È∂≥',
  'ˆ«' => 'È∑ç',
  'ˆ»' => 'È∂≤',
  'ˆ…' => 'Èπ∫',
  'ˆ ' => 'È∫ú',
  'ˆÀ' => 'Èª´',
  'ˆÃ' => 'ÈªÆ',
  'ˆÕ' => 'Èª≠',
  'ˆŒ' => 'Èºõ',
  'ˆœ' => 'Èºò',
  'ˆ–' => 'Èºö',
  'ˆ—' => 'Èº±',
  'ˆ“' => 'ÈΩé',
  'ˆ”' => 'ÈΩ•',
  'ˆ‘' => 'ÈΩ§',
  'ˆ’' => 'Èæí',
  'ˆ÷' => '‰∫π',
  'ˆ◊' => 'ÂõÜ',
  'ˆÿ' => 'ÂõÖ',
  'ˆŸ' => 'Âõã',
  'ˆ⁄' => 'Â•±',
  'ˆ€' => 'Â≠ã',
  'ˆ‹' => 'Â≠å',
  'ˆ›' => 'Â∑ï',
  'ˆﬁ' => 'Â∑ë',
  'ˆﬂ' => 'Âª≤',
  'ˆ‡' => 'Êî°',
  'ˆ·' => 'Êî†',
  'ˆ‚' => 'Êî¶',
  'ˆ„' => 'Êî¢',
  'ˆ‰' => 'Ê¨ã',
  'ˆÂ' => 'Ê¨à',
  'ˆÊ' => 'Ê¨â',
  'ˆÁ' => 'Ê∞ç',
  'ˆË' => 'ÁÅï',
  'ˆÈ' => 'ÁÅñ',
  'ˆÍ' => 'ÁÅó',
  'ˆÎ' => 'ÁÅí',
  'ˆÏ' => 'Áàû',
  'ˆÌ' => 'Áàü',
  'ˆÓ' => 'Áä©',
  'ˆÔ' => 'Áçø',
  'ˆ' => 'Áìò',
  'ˆÒ' => 'Áìï',
  'ˆÚ' => 'Áìô',
  'ˆÛ' => 'Áìó',
  'ˆÙ' => 'Áô≠',
  'ˆı' => 'Áö≠',
  'ˆˆ' => 'Á§µ',
  'ˆ˜' => 'Á¶¥',
  'ˆ¯' => 'Á©∞',
  'ˆ˘' => 'Á©±',
  'ˆ˙' => 'Á±ó',
  'ˆ˚' => 'Á±ú',
  'ˆ¸' => 'Á±ô',
  'ˆ˝' => 'Á±õ',
  'ˆ˛' => 'Á±ö',
  '˜@' => 'Á≥¥',
  '˜A' => 'Á≥±',
  '˜B' => 'Á∫ë',
  '˜C' => 'ÁΩè',
  '˜D' => 'Áæá',
  '˜E' => 'Ëáû',
  '˜F' => 'Ëâ´',
  '˜G' => 'Ëò¥',
  '˜H' => 'Ëòµ',
  '˜I' => 'Ëò≥',
  '˜J' => 'Ëò¨',
  '˜K' => 'Ëò≤',
  '˜L' => 'Ëò∂',
  '˜M' => 'Ë†¨',
  '˜N' => 'Ë†®',
  '˜O' => 'Ë†¶',
  '˜P' => 'Ë†™',
  '˜Q' => 'Ë†•',
  '˜R' => 'Ë•±',
  '˜S' => 'Ë¶ø',
  '˜T' => 'Ë¶æ',
  '˜U' => 'Ëßª',
  '˜V' => 'Ë≠æ',
  '˜W' => 'ËÆÑ',
  '˜X' => 'ËÆÇ',
  '˜Y' => 'ËÆÜ',
  '˜Z' => 'ËÆÖ',
  '˜[' => 'Ë≠ø',
  '˜\\' => 'Ë¥ï',
  '˜]' => 'Ë∫ï',
  '˜^' => 'Ë∫î',
  '˜_' => 'Ë∫ö',
  '˜`' => 'Ë∫í',
  '˜a' => 'Ë∫ê',
  '˜b' => 'Ë∫ñ',
  '˜c' => 'Ë∫ó',
  '˜d' => 'ËΩ†',
  '˜e' => 'ËΩ¢',
  '˜f' => 'ÈÖá',
  '˜g' => 'Èëå',
  '˜h' => 'Èëê',
  '˜i' => 'Èëä',
  '˜j' => 'Èëã',
  '˜k' => 'Èëè',
  '˜l' => 'Èëá',
  '˜m' => 'ÈëÖ',
  '˜n' => 'Èëà',
  '˜o' => 'Èëâ',
  '˜p' => 'ÈëÜ',
  '˜q' => 'Èúø',
  '˜r' => 'Èü£',
  '˜s' => 'È°™',
  '˜t' => 'È°©',
  '˜u' => 'È£ã',
  '˜v' => 'È•î',
  '˜w' => 'È•õ',
  '˜x' => 'È©é',
  '˜y' => 'È©ì',
  '˜z' => 'È©î',
  '˜{' => 'È©å',
  '˜|' => 'È©è',
  '˜}' => 'È©à',
  '˜~' => 'È©ä',
  '˜°' => 'È©â',
  '˜¢' => 'È©í',
  '˜£' => 'È©ê',
  '˜§' => 'È´ê',
  '˜•' => 'È¨ô',
  '˜¶' => 'È¨´',
  '˜ß' => 'È¨ª',
  '˜®' => 'È≠ñ',
  '˜©' => 'È≠ï',
  '˜™' => 'È±Ü',
  '˜´' => 'È±à',
  '˜¨' => 'È∞ø',
  '˜≠' => 'È±Ñ',
  '˜Æ' => 'È∞π',
  '˜Ø' => 'È∞≥',
  '˜∞' => 'È±Å',
  '˜±' => 'È∞º',
  '˜≤' => 'È∞∑',
  '˜≥' => 'È∞¥',
  '˜¥' => 'È∞≤',
  '˜µ' => 'È∞Ω',
  '˜∂' => 'È∞∂',
  '˜∑' => 'È∑õ',
  '˜∏' => 'È∑í',
  '˜π' => 'È∑û',
  '˜∫' => 'È∑ö',
  '˜ª' => 'È∑ã',
  '˜º' => 'È∑ê',
  '˜Ω' => 'È∑ú',
  '˜æ' => 'È∑ë',
  '˜ø' => 'È∑ü',
  '˜¿' => 'È∑©',
  '˜¡' => 'È∑ô',
  '˜¬' => 'È∑ò',
  '˜√' => 'È∑ñ',
  '˜ƒ' => 'È∑µ',
  '˜≈' => 'È∑ï',
  '˜∆' => 'È∑ù',
  '˜«' => 'È∫∂',
  '˜»' => 'Èª∞',
  '˜…' => 'Èºµ',
  '˜ ' => 'Èº≥',
  '˜À' => 'Èº≤',
  '˜Ã' => 'ÈΩÇ',
  '˜Õ' => 'ÈΩ´',
  '˜Œ' => 'Èæï',
  '˜œ' => 'Èæ¢',
  '˜–' => 'ÂÑΩ',
  '˜—' => 'Âäô',
  '˜“' => 'Â£®',
  '˜”' => 'Â£ß',
  '˜‘' => 'Â•≤',
  '˜’' => 'Â≠ç',
  '˜÷' => 'Â∑ò',
  '˜◊' => 'Ë†Ø',
  '˜ÿ' => 'ÂΩè',
  '˜Ÿ' => 'ÊàÅ',
  '˜⁄' => 'ÊàÉ',
  '˜€' => 'ÊàÑ',
  '˜‹' => 'Êî©',
  '˜›' => 'Êî•',
  '˜ﬁ' => 'Êññ',
  '˜ﬂ' => 'Êõ´',
  '˜‡' => 'Ê¨ë',
  '˜·' => 'Ê¨í',
  '˜‚' => 'Ê¨è',
  '˜„' => 'ÊØä',
  '˜‰' => 'ÁÅõ',
  '˜Â' => 'ÁÅö',
  '˜Ê' => 'Áà¢',
  '˜Á' => 'ÁéÇ',
  '˜Ë' => 'ÁéÅ',
  '˜È' => 'ÁéÉ',
  '˜Í' => 'Áô∞',
  '˜Î' => 'Áüî',
  '˜Ï' => 'Á±ß',
  '˜Ì' => 'Á±¶',
  '˜Ó' => 'Á∫ï',
  '˜Ô' => 'Ëâ¨',
  '˜' => 'Ëò∫',
  '˜Ò' => 'ËôÄ',
  '˜Ú' => 'Ëòπ',
  '˜Û' => 'Ëòº',
  '˜Ù' => 'Ëò±',
  '˜ı' => 'Ëòª',
  '˜ˆ' => 'Ëòæ',
  '˜˜' => 'Ë†∞',
  '˜¯' => 'Ë†≤',
  '˜˘' => 'Ë†Æ',
  '˜˙' => 'Ë†≥',
  '˜˚' => 'Ë•∂',
  '˜¸' => 'Ë•¥',
  '˜˝' => 'Ë•≥',
  '˜˛' => 'Ëßæ',
  '¯@' => 'ËÆå',
  '¯A' => 'ËÆé',
  '¯B' => 'ËÆã',
  '¯C' => 'ËÆà',
  '¯D' => 'Ë±Ö',
  '¯E' => 'Ë¥ô',
  '¯F' => 'Ë∫ò',
  '¯G' => 'ËΩ§',
  '¯H' => 'ËΩ£',
  '¯I' => 'ÈÜº',
  '¯J' => 'Èë¢',
  '¯K' => 'Èëï',
  '¯L' => 'Èëù',
  '¯M' => 'Èëó',
  '¯N' => 'Èëû',
  '¯O' => 'ÈüÑ',
  '¯P' => 'ÈüÖ',
  '¯Q' => 'È†Ä',
  '¯R' => 'È©ñ',
  '¯S' => 'È©ô',
  '¯T' => 'È¨û',
  '¯U' => 'È¨ü',
  '¯V' => 'È¨†',
  '¯W' => 'È±í',
  '¯X' => 'È±ò',
  '¯Y' => 'È±ê',
  '¯Z' => 'È±ä',
  '¯[' => 'È±ç',
  '¯\\' => 'È±ã',
  '¯]' => 'È±ï',
  '¯^' => 'È±ô',
  '¯_' => 'È±å',
  '¯`' => 'È±é',
  '¯a' => 'È∑ª',
  '¯b' => 'È∑∑',
  '¯c' => 'È∑Ø',
  '¯d' => 'È∑£',
  '¯e' => 'È∑´',
  '¯f' => 'È∑∏',
  '¯g' => 'È∑§',
  '¯h' => 'È∑∂',
  '¯i' => 'È∑°',
  '¯j' => 'È∑Æ',
  '¯k' => 'È∑¶',
  '¯l' => 'È∑≤',
  '¯m' => 'È∑∞',
  '¯n' => 'È∑¢',
  '¯o' => 'È∑¨',
  '¯p' => 'È∑¥',
  '¯q' => 'È∑≥',
  '¯r' => 'È∑®',
  '¯s' => 'È∑≠',
  '¯t' => 'ÈªÇ',
  '¯u' => 'Èªê',
  '¯v' => 'Èª≤',
  '¯w' => 'Èª≥',
  '¯x' => 'ÈºÜ',
  '¯y' => 'Èºú',
  '¯z' => 'Èº∏',
  '¯{' => 'Èº∑',
  '¯|' => 'Èº∂',
  '¯}' => 'ÈΩÉ',
  '¯~' => 'ÈΩè',
  '¯°' => 'ÈΩ±',
  '¯¢' => 'ÈΩ∞',
  '¯£' => 'ÈΩÆ',
  '¯§' => 'ÈΩØ',
  '¯•' => 'Âõì',
  '¯¶' => 'Âõç',
  '¯ß' => 'Â≠é',
  '¯®' => 'Â±≠',
  '¯©' => 'Êî≠',
  '¯™' => 'Êõ≠',
  '¯´' => 'ÊõÆ',
  '¯¨' => 'Ê¨ì',
  '¯≠' => 'ÁÅü',
  '¯Æ' => 'ÁÅ°',
  '¯Ø' => 'ÁÅù',
  '¯∞' => 'ÁÅ†',
  '¯±' => 'Áà£',
  '¯≤' => 'Áìõ',
  '¯≥' => 'Áì•',
  '¯¥' => 'Áüï',
  '¯µ' => 'Á§∏',
  '¯∂' => 'Á¶∑',
  '¯∑' => 'Á¶∂',
  '¯∏' => 'Á±™',
  '¯π' => 'Á∫ó',
  '¯∫' => 'Áæâ',
  '¯ª' => 'Ëâ≠',
  '¯º' => 'ËôÉ',
  '¯Ω' => 'Ë†∏',
  '¯æ' => 'Ë†∑',
  '¯ø' => 'Ë†µ',
  '¯¿' => 'Ë°ã',
  '¯¡' => 'ËÆî',
  '¯¬' => 'ËÆï',
  '¯√' => 'Ë∫û',
  '¯ƒ' => 'Ë∫ü',
  '¯≈' => 'Ë∫†',
  '¯∆' => 'Ë∫ù',
  '¯«' => 'ÈÜæ',
  '¯»' => 'ÈÜΩ',
  '¯…' => 'ÈáÇ',
  '¯ ' => 'Èë´',
  '¯À' => 'Èë®',
  '¯Ã' => 'Èë©',
  '¯Õ' => 'Èõ•',
  '¯Œ' => 'ÈùÜ',
  '¯œ' => 'ÈùÉ',
  '¯–' => 'Èùá',
  '¯—' => 'Èüá',
  '¯“' => 'Èü•',
  '¯”' => 'È©û',
  '¯‘' => 'È´ï',
  '¯’' => 'È≠ô',
  '¯÷' => 'È±£',
  '¯◊' => 'È±ß',
  '¯ÿ' => 'È±¶',
  '¯Ÿ' => 'È±¢',
  '¯⁄' => 'È±û',
  '¯€' => 'È±†',
  '¯‹' => 'È∏Ç',
  '¯›' => 'È∑æ',
  '¯ﬁ' => 'È∏á',
  '¯ﬂ' => 'È∏É',
  '¯‡' => 'È∏Ü',
  '¯·' => 'È∏Ö',
  '¯‚' => 'È∏Ä',
  '¯„' => 'È∏Å',
  '¯‰' => 'È∏â',
  '¯Â' => 'È∑ø',
  '¯Ê' => 'È∑Ω',
  '¯Á' => 'È∏Ñ',
  '¯Ë' => 'È∫†',
  '¯È' => 'Èºû',
  '¯Í' => 'ÈΩÜ',
  '¯Î' => 'ÈΩ¥',
  '¯Ï' => 'ÈΩµ',
  '¯Ì' => 'ÈΩ∂',
  '¯Ó' => 'Âõî',
  '¯Ô' => 'ÊîÆ',
  '¯' => 'Êñ∏',
  '¯Ò' => 'Ê¨ò',
  '¯Ú' => 'Ê¨ô',
  '¯Û' => 'Ê¨ó',
  '¯Ù' => 'Ê¨ö',
  '¯ı' => 'ÁÅ¢',
  '¯ˆ' => 'Áà¶',
  '¯˜' => 'Áä™',
  '¯¯' => 'Áüò',
  '¯˘' => 'Áüô',
  '¯˙' => 'Á§π',
  '¯˚' => 'Á±©',
  '¯¸' => 'Á±´',
  '¯˝' => 'Á≥∂',
  '¯˛' => 'Á∫ö',
  '˘@' => 'Á∫ò',
  '˘A' => 'Á∫õ',
  '˘B' => 'Á∫ô',
  '˘C' => 'Ëá†',
  '˘D' => 'Ëá°',
  '˘E' => 'ËôÜ',
  '˘F' => 'Ëôá',
  '˘G' => 'Ëôà',
  '˘H' => 'Ë•π',
  '˘I' => 'Ë•∫',
  '˘J' => 'Ë•º',
  '˘K' => 'Ë•ª',
  '˘L' => 'Ëßø',
  '˘M' => 'ËÆò',
  '˘N' => 'ËÆô',
  '˘O' => 'Ë∫•',
  '˘P' => 'Ë∫§',
  '˘Q' => 'Ë∫£',
  '˘R' => 'ÈëÆ',
  '˘S' => 'Èë≠',
  '˘T' => 'ÈëØ',
  '˘U' => 'Èë±',
  '˘V' => 'Èë≥',
  '˘W' => 'Èùâ',
  '˘X' => 'È°≤',
  '˘Y' => 'È•ü',
  '˘Z' => 'È±®',
  '˘[' => 'È±Æ',
  '˘\\' => 'È±≠',
  '˘]' => 'È∏ã',
  '˘^' => 'È∏ç',
  '˘_' => 'È∏ê',
  '˘`' => 'È∏è',
  '˘a' => 'È∏í',
  '˘b' => 'È∏ë',
  '˘c' => 'È∫°',
  '˘d' => 'Èªµ',
  '˘e' => 'Èºâ',
  '˘f' => 'ÈΩá',
  '˘g' => 'ÈΩ∏',
  '˘h' => 'ÈΩª',
  '˘i' => 'ÈΩ∫',
  '˘j' => 'ÈΩπ',
  '˘k' => 'Âúû',
  '˘l' => 'ÁÅ¶',
  '˘m' => 'Á±Ø',
  '˘n' => 'Ë†º',
  '˘o' => 'Ë∂≤',
  '˘p' => 'Ë∫¶',
  '˘q' => 'ÈáÉ',
  '˘r' => 'Èë¥',
  '˘s' => 'Èë∏',
  '˘t' => 'Èë∂',
  '˘u' => 'Èëµ',
  '˘v' => 'È©†',
  '˘w' => 'È±¥',
  '˘x' => 'È±≥',
  '˘y' => 'È±±',
  '˘z' => 'È±µ',
  '˘{' => 'È∏î',
  '˘|' => 'È∏ì',
  '˘}' => 'Èª∂',
  '˘~' => 'Èºä',
  '˘°' => 'Èæ§',
  '˘¢' => 'ÁÅ®',
  '˘£' => 'ÁÅ•',
  '˘§' => 'Á≥∑',
  '˘•' => 'Ëô™',
  '˘¶' => 'Ë†æ',
  '˘ß' => 'Ë†Ω',
  '˘®' => 'Ë†ø',
  '˘©' => 'ËÆû',
  '˘™' => 'Ë≤ú',
  '˘´' => 'Ë∫©',
  '˘¨' => 'Ëªâ',
  '˘≠' => 'Èùã',
  '˘Æ' => 'È°≥',
  '˘Ø' => 'È°¥',
  '˘∞' => 'È£å',
  '˘±' => 'È•°',
  '˘≤' => 'È¶´',
  '˘≥' => 'È©§',
  '˘¥' => 'È©¶',
  '˘µ' => 'È©ß',
  '˘∂' => 'È¨§',
  '˘∑' => 'È∏ï',
  '˘∏' => 'È∏ó',
  '˘π' => 'ÈΩà',
  '˘∫' => 'Êàá',
  '˘ª' => 'Ê¨û',
  '˘º' => 'Áàß',
  '˘Ω' => 'Ëôå',
  '˘æ' => 'Ë∫®',
  '˘ø' => 'ÈíÇ',
  '˘¿' => 'ÈíÄ',
  '˘¡' => 'ÈíÅ',
  '˘¬' => 'È©©',
  '˘√' => 'È©®',
  '˘ƒ' => 'È¨Æ',
  '˘≈' => 'È∏ô',
  '˘∆' => 'Áà©',
  '˘«' => 'Ëôã',
  '˘»' => 'ËÆü',
  '˘…' => 'ÈíÉ',
  '˘ ' => 'È±π',
  '˘À' => 'È∫∑',
  '˘Ã' => 'Áôµ',
  '˘Õ' => 'È©´',
  '˘Œ' => 'È±∫',
  '˘œ' => 'È∏ù',
  '˘–' => 'ÁÅ©',
  '˘—' => 'ÁÅ™',
  '˘“' => 'È∫§',
  '˘”' => 'ÈΩæ',
  '˘‘' => 'ÈΩâ',
  '˘’' => 'Èæò',
  '˘÷' => 'Á¢Å',
  '˘◊' => 'Èäπ',
  '˘ÿ' => 'Ë£è',
  '˘Ÿ' => 'Â¢ª',
  '˘⁄' => 'ÊÅí',
  '˘€' => 'Á≤ß',
  '˘‹' => 'Â´∫',
  '˘›' => '‚ïî',
  '˘ﬁ' => '‚ï¶',
  '˘ﬂ' => '‚ïó',
  '˘‡' => '‚ï†',
  '˘·' => '‚ï¨',
  '˘‚' => '‚ï£',
  '˘„' => '‚ïö',
  '˘‰' => '‚ï©',
  '˘Â' => '‚ïù',
  '˘Ê' => '‚ïí',
  '˘Á' => '‚ï§',
  '˘Ë' => '‚ïï',
  '˘È' => '‚ïû',
  '˘Í' => '‚ï™',
  '˘Î' => '‚ï°',
  '˘Ï' => '‚ïò',
  '˘Ì' => '‚ïß',
  '˘Ó' => '‚ïõ',
  '˘Ô' => '‚ïì',
  '˘' => '‚ï•',
  '˘Ò' => '‚ïñ',
  '˘Ú' => '‚ïü',
  '˘Û' => '‚ï´',
  '˘Ù' => '‚ï¢',
  '˘ı' => '‚ïô',
  '˘ˆ' => '‚ï®',
  '˘˜' => '‚ïú',
  '˘¯' => '‚ïë',
  '˘˘' => '‚ïê',
  '˘˙' => '‚ï≠',
  '˘˚' => '‚ïÆ',
  '˘¸' => '‚ï∞',
  '˘˝' => '‚ïØ',
  '˘˛' => '‚ñì',
);

$result =& $data;
unset($data);

return $result;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <?php

namespace App\Http\Controllers\Frontend;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;

class CommandeController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        return view('frontend.commandes.index');
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     /* Kyrgyz (UTF-8) initialisation for the jQuery UI date picker plugin. */
/* Written by Sergey Kartashov (ebishkek@yandex.ru). */
(function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define([ "../datepicker" ], factory );
	} else {

		// Browser globals
		factory( jQuery.datepicker );
	}
}(function( datepicker ) {

datepicker.regional['ky'] = {
	closeText: '–ñ–∞–±—É—É',
	prevText: '&#x3c;–ú—É—Ä',
	nextText: '–ö–∏–π&#x3e;',
	currentText: '–ë“Ø–≥“Ø–Ω',
	monthNames: ['–Ø–Ω–≤–∞—Ä—å','–§–µ–≤—Ä–∞–ª—å','–ú–∞—Ä—Ç','–ê–ø—Ä–µ–ª—å','–ú–∞–π','–ò—é–Ω—å',
	'–ò—é–ª—å','–ê–≤–≥—É—Å—Ç','–°–µ–Ω—Ç—è–±—Ä—å','–û–∫—Ç—è–±—Ä—å','–ù–æ—è–±—Ä—å','–î–µ–∫–∞–±—Ä—å'],
	monthNamesShort: ['–Ø–Ω–≤','–§–µ–≤','–ú–∞—Ä','–ê–ø—Ä','–ú–∞–π','–ò—é–Ω',
	'–ò—é–ª','–ê–≤–≥','–°–µ–Ω','–û–∫—Ç','–ù–æ—è','–î–µ–∫'],
	dayNames: ['–∂–µ–∫—à–µ–º–±–∏', '–¥“Ø–π—à”©–º–±“Ø', '—à–µ–π—à–µ–º–±–∏', '—à–∞—Ä—à–µ–º–±–∏', '–±–µ–π—à–µ–º–±–∏', '–∂—É–º–∞', '–∏—à–µ–º–±–∏'],
	dayNamesShort: ['–∂–µ–∫', '–¥“Ø–π', '—à–µ–π', '—à–∞—Ä', '–±–µ–π', '–∂—É–º', '–∏—à–µ'],
	dayNamesMin: ['–ñ–∫','–î—à','–®—à','–®—Ä','–ë—à','–ñ–º','–ò—à'],
	weekHeader: '–ñ—É–º',
	dateFormat: 'dd.mm.yy',
	firstDay: 1,
	isRTL: false,
	showMonthAfterYear: false,
	yearSuffix: ''
};
datepicker.setDefaults(datepicker.regional['ky']);

return datepicker.regional['ky'];

}));
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ÔªøCKEDITOR.plugins.setLang("forms","si",{button:{title:"‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∂ú‡∑î‡∂´",text:"‡∑Ä‡∂ú‡∂±‡∑ä‡∂≠‡∑í‡∂∫(‡∑Ä‡∂ß‡∑í‡∂±‡∑è‡∂ö‡∂∏)",type:"‡∑Ä‡∂ª‡∑ä‡∂ú‡∂∫",typeBtn:"‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏",typeSbm:"‡∂∫‡∑ú‡∂∏‡∑î‡∂ö‡∂ª‡∂±‡∑Ä‡∑è",typeRst:"‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑‡∂ö‡∂≠‡∂≠‡∑ä‡∑Ä‡∂∫‡∂ß ‡∂¥‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è"},checkboxAndRadio:{checkboxTitle:"‡∂Ω‡∂ö‡∑î‡∂´‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∂ö‡∑ú‡∂ß‡∑î‡∑Ä‡∑ö ‡∂Ω‡∂ö‡∑ä‡∑Ç‡∂´",radioTitle:"Radio Button Properties",value:"Value",selected:"Selected",required:"Required"},form:{title:"‡∂¥‡∑ù‡∂ª‡∂∏‡∂∫‡∑ö ",menu:"‡∂¥‡∑ù‡∂ª‡∂∏‡∂∫‡∑ö ‡∂ú‡∑î‡∂´/",action:"‡∂ú‡∂±‡∑ä‡∂±‡∑è ‡∂¥‡∑í‡∂∫‡∑Ä‡∂ª",method:"‡∂ö‡∑ä‚Äç‡∂ª‡∂∏‡∂∫",encoding:"‡∂ö‡∑ö‡∂≠‡∑ì‡∂ö‡∂ª‡∂´‡∂∫"},hidden:{title:"‡∑É‡∑ê‡∂ü‡∑Ä‡∑î‡∂´‡∑î ‡∂¥‡∑ä‚Äç‡∂ª‡∂Ø‡∑ö‡∑Å‡∂∫‡∑ö ",name:"‡∂±‡∂∏",value:"Value"},select:{title:"‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∂Ø‡∑ö‡∑Å‡∂∫‡∑ö ",
selectInfo:"‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±",opAvail:"‡∂â‡∂≠‡∑î‡∂ª‡∑î‡∑Ä‡∑ì ‡∂á‡∂≠‡∑í ‡∑Ä‡∑ì‡∂ö‡∂Ω‡∑ä‡∂¥",value:"Value",size:"‡∑Ä‡∑í‡∑Å‡∑è‡∂Ω‡∂≠‡∑ä‡∑Ä‡∂∫",lines:"lines",chkMulti:"Allow multiple selections",required:"Required",opText:"Text",opValue:"Value",btnAdd:"Add",btnModify:"Modify",btnUp:"Up",btnDown:"Down",btnSetValue:"Set as selected value",btnDelete:"‡∂∏‡∂ö‡∑è ‡∂Ø‡∑ê‡∂∏‡∑ä‡∂∏"},textarea:{title:"Textarea Properties",cols:"‡∑É‡∑í‡∂ª‡∑É‡∑ä ",rows:"Rows"},textfield:{title:"Text Field Properties",name:"‡∂±‡∂∏",value:"Value",charWidth:"Character Width",maxChars:"Maximum Characters",required:"Required",
type:"‡∑Ä‡∂ª‡∑ä‡∂ú‡∂∫",typeText:"Text",typePass:"Password",typeEmail:"Email",typeSearch:"Search",typeTel:"Telephone Number",typeUrl:"URL"}});                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <?php

/*
 * This file is part of SwiftMailer.
 * (c) 2004-2009 Chris Corbyn
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * DKIM Signer used to apply DKIM Signature to a message.
 *
 * @author     Xavier De Cock <xdecock@gmail.com>
 */
class Swift_Signers_DKIMSigner implements Swift_Signers_HeaderSigner
{
    /**
     * PrivateKey.
     *
     * @var string
     */
    protected $privateKey;

    /**
     * DomainName.
     *
     * @var string
     */
    protected $domainName;

    /**
     * Selector.
     *
     * @var string
     */
    protected $selector;

    private $passphrase = '';

    /**
     * Hash algorithm used.
     *
     * @see RFC6376 3.3: Signers MUST implement and SHOULD sign using rsa-sha256.
     *
     * @var string
     */
    protected $hashAlgorithm = 'rsa-sha256';

    /**
     * Body canon method.
     *
     * @var string
     */
    protected $bodyCanon = 'simple';

    /**
     * Header canon method.
     *
     * @var string
     */
    protected $headerCanon = 'simple';

    /**
     * Headers not being signed.
     *
     * @var array
     */
    protected $ignoredHeaders = ['return-path' => true];

    /**
     * Signer identity.
     *
     * @var string
     */
    protected $signerIdentity;

    /**
     * BodyLength.
     *
     * @var int
     */
    protected $bodyLen = 0;

    /**
     * Maximum signedLen.
     *
     * @var int
     */
    protected $maxLen = PHP_INT_MAX;

    /**
     * Embbed bodyLen in signature.
     *
     * @var bool
     */
    protected $showLen = false;

    /**
     * When the signature has been applied (true means time()), false means not embedded.
     *
     * @var mixed
     */
    protected $signatureTimestamp = true;

    /**
     * When will the signature expires false means not embedded, if sigTimestamp is auto
     * Expiration is relative, otherwise it's absolute.
     *
     * @var int
     */
    protected $signatureExpiration = false;

    /**
     * Must we embed signed headers?
     *
     * @var bool
     */
    protected $debugHeaders = false;

    // work variables
    /**
     * Headers used to generate hash.
     *
     * @var array
     */
    protected $signedHeaders = [];

    /**
     * If debugHeaders is set store debugData here.
     *
     * @var string[]
     */
    private $debugHeadersData = [];

    /**
     * Stores the bodyHash.
     *
     * @var string
     */
    private $bodyHash = '';

    /**
     * Stores the signature header.
     *
     * @var Swift_Mime_Headers_ParameterizedHeader
     */
    protected $dkimHeader;

    private $bodyHashHandler;

    private $headerHash;

    private $headerCanonData = '';

    private $bodyCanonEmptyCounter = 0;

    private $bodyCanonIgnoreStart = 2;

    private $bodyCanonSpace = false;

    private $bodyCanonLastChar = null;

    private $bodyCanonLine = '';

    private $bound = [];

    /**
     * Constructor.
     *
     * @param string $privateKey
     * @param string $domainName
     * @param string $selector
     * @param string $passphrase
     */
    public function __construct($privateKey, $domainName, $selector, $passphrase = '')
    {
        $this->privateKey = $privateKey;
        $this->domainName = $domainName;
        $this->signerIdentity = '@'.$domainName;
        $this->selector = $selector;
        $this->passphrase = $passphrase;
    }

    /**
     * Reset the Signer.
     *
     * @see Swift_Signer::reset()
     */
    public function reset()
    {
        $this->headerHash = null;
        $this->signedHeaders = [];
        $this->bodyHash = null;
        $this->bodyHashHandler = null;
        $this->bodyCanonIgnoreStart = 2;
        $this->bodyCanonEmptyCounter = 0;
        $this->bodyCanonLastChar = null;
        $this->bodyCanonSpace = false;
    }

    /**
     * Writes $bytes to the end of the stream.
     *
     * Writing may not happen immediately if the stream chooses to buffer.  If
     * you want to write these bytes with immediate effect, call {@link commit()}
     * after calling write().
     *
     * This method returns the sequence ID of the write (i.e. 1 for first, 2 for
     * second, etc etc).
     *
     * @param string $bytes
     *
     * @return int
     *
     * @throws Swift_IoException
     */
    // TODO fix return
    public function write($bytes)
    {
        $this->canonicalizeBody($bytes);
        foreach ($this->bound as $is) {
            $is->write($bytes);
        }
    }

    /**
     * For any bytes that are currently buffered inside the stream, force them
     * off the buffer.
     */
    public function commit()
    {
        // Nothing to do
        return;
    }

    /**
     * Attach $is to this stream.
     *
     * The stream acts as an observer, receiving all data that is written.
     * All {@link write()} and {@link flushBuffers()} operations will be mirrored.
     */
    public function bind(Swift_InputByteStream $is)
    {
        // Don't have to mirror anything
        $this->bound[] = $is;

        return;
    }

    /**
     * Remove an already bound stream.
     *
     * If $is is not bound, no errors will be raised.
     * If the stream currently has any buffered data it will be written to $is
     * before unbinding occurs.
     */
    public function unbind(Swift_InputByteStream $is)
    {
        // Don't have to mirror anything
        foreach ($this->bound as $k => $stream) {
            if ($stream === $is) {
                unset($this->bound[$k]);

                return;
            }
        }
    }

    /**
     * Flush the contents of the stream (empty it) and set the internal pointer
     * to the beginning.
     *
     * @throws Swift_IoException
     */
    public function flushBuffers()
    {
        $this->reset();
    }

    /**
     * Set hash_algorithm, must be one of rsa-sha256 | rsa-sha1.
     *
     * @param string $hash 'rsa-sha1' or 'rsa-sha256'
     *
     * @throws Swift_SwiftException
     *
     * @return $this
     */
    public function setHashAlgorithm($hash)
    {
        switch ($hash) {
            case 'rsa-sha1':
                $this->hashAlgorithm = 'rsa-sha1';
                break;
            case 'rsa-sha256':
                $this->hashAlgorithm = 'rsa-sha256';
                if (!defined('OPENSSL_ALGO_SHA256')) {
                    throw new Swift_SwiftException('Unable to set sha256 as it is not supported by OpenSSL.');
                }
                break;
            default:
                throw new Swift_SwiftException('Unable to set the hash algorithm, must be one of rsa-sha1 or rsa-sha256 (%s given).', $hash);
        }

        return $this;
    }

    /**
     * Set the body canonicalization algorithm.
     *
     * @param string $canon
     *
     * @return $this
     */
    public function setBodyCanon($canon)
    {
        if ('relaxed' == $canon) {
            $this->bodyCanon = 'relaxed';
        } else {
            $this->bodyCanon = 'simple';
        }

        return $this;
    }

    /**
     * Set the header canonicalization algorithm.
     *
     * @param string $canon
     *
     * @return $this
     */
    public function setHeaderCanon($canon)
    {
        if ('relaxed' == $canon) {
            $this->headerCanon = 'relaxed';
        } else {
            $this->headerCanon = 'simple';
        }

        return $this;
    }

    /**
     * Set the signer identity.
     *
     * @param string $identity
     *
     * @return $this
     */
    public function setSignerIdentity($identity)
    {
        $this->signerIdentity = $identity;

        return $this;
    }

    /**
     * Set the length of the body to sign.
     *
     * @param mixed $len (bool or int)
     *
     * @return $this
     */
    public function setBodySignedLen($len)
    {
        if (true === $len) {
            $this->showLen = true;
            $this->maxLen = PHP_INT_MAX;
        } elseif (false === $len) {
            $this->showLen = false;
            $this->maxLen = PHP_INT_MAX;
        } else {
            $this->showLen = true;
            $this->maxLen = (int) $len;
        }

        return $this;
    }

    /**
     * Set the signature timestamp.
     *
     * @param int $time A timestamp
     *
     * @return $this
     */
    public function setSignatureTimestamp($time)
    {
        $this->signatureTimestamp = $time;

        return $this;
    }

    /**
     * Set the signature expiration timestamp.
     *
     * @param int $time A timestamp
     *
     * @return $this
     */
    public function setSignatureExpiration($time)
    {
        $this->signatureExpiration = $time;

        return $this;
    }

    /**
     * Enable / disable the DebugHeaders.
     *
     * @param bool $debug
     *
     * @return Swift_Signers_DKIMSigner
     */
    public function setDebugHeaders($debug)
    {
        $this->debugHeaders = (bool) $debug;

        return $this;
    }

    /**
     * Start Body.
     */
    public function startBody()
    {
        // Init
        switch ($this->hashAlgorithm) {
            case 'rsa-sha256':
                $this->bodyHashHandler = hash_init('sha256');
                break;
            case 'rsa-sha1':
                $this->bodyHashHandler = hash_init('sha1');
                break;
        }
        $this->bodyCanonLine = '';
    }

    /**
     * End Body.
     */
    public function endBody()
    {
        $this->endOfBody();
    }

    /**
     * Returns the list of Headers Tampered by this plugin.
     *
     * @return array
     */
    public function getAlteredHeaders()
    {
        if ($this->debugHeaders) {
            return ['DKIM-Signature', 'X-DebugHash'];
        } else {
            return ['DKIM-Signature'];
        }
    }

    /**
     * Adds an ignored Header.
     *
     * @param string $header_name
     *
     * @return Swift_Signers_DKIMSigner
     */
    public function ignoreHeader($header_name)
    {
        $this->ignoredHeaders[strtolower($header_name)] = true;

        return $this;
    }

    /**
     * Set the headers to sign.
     *
     * @return Swift_Signers_DKIMSigner
     */
    public function setHeaders(Swift_Mime_SimpleHeaderSet $headers)
    {
        $this->headerCanonData = '';
        // Loop through Headers
        $listHeaders = $headers->listAll();
        foreach ($listHeaders as $hName) {
            // Check if we need to ignore Header
            if (!isset($this->ignoredHeaders[strtolower($hName)])) {
                if ($headers->has($hName)) {
                    $tmp = $headers->getAll($hName);
                    foreach ($tmp as $header) {
                        if ('' != $header->getFieldBody()) {
                            $this->addHeader($header->toString());
                            $this->signedHeaders[] = $header->getFieldName();
                        }
                    }
                }
            }
        }

        return $this;
    }

    /**
     * Add the signature to the given Headers.
     *
     * @return Swift_Signers_DKIMSigner
     */
    public function addSignature(Swift_Mime_SimpleHeaderSet $headers)
    {
        // Prepare the DKIM-Signature
        $params = ['v' => '1', 'a' => $this->hashAlgorithm, 'bh' => base64_encode($this->bodyHash), 'd' => $this->domainName, 'h' => implode(': ', $this->signedHeaders), 'i' => $this->signerIdentity, 's' => $this->selector];
        if ('simple' != $this->bodyCanon) {
            $params['c'] = $this->headerCanon.'/'.$this->bodyCanon;
        } elseif ('simple' != $this->headerCanon) {
            $params['c'] = $this->headerCanon;
        }
        if ($this->showLen) {
            $params['l'] = $this->bodyLen;
        }
        if (true === $this->signatureTimestamp) {
            $params['t'] = time();
            if (false !== $this->signatureExpiration) {
                $params['x'] = $params['t'] + $this->signatureExpiration;
            }
        } else {
            if (false !== $this->signatureTimestamp) {
                $params['t'] = $this->signatureTimestamp;
            }
            if (false !== $this->signatureExpiration) {
                $params['x'] = $this->signatureExpiration;
            }
        }
        if ($this->debugHeaders) {
            $params['z'] = implode('|', $this->debugHeadersData);
        }
        $string = '';
        foreach ($params as $k => $v) {
            $string .= $k.'='.$v.'; ';
        }
        $string = trim($string);
        $headers->addTextHeader('DKIM-Signature', $string);
        // Add the last DKIM-Signature
        $tmp = $headers->getAll('DKIM-Signature');
        $this->dkimHeader = end($tmp);
        $this->addHeader(trim($this->dkimHeader->toString())."\r\n b=", true);
        if ($this->debugHeaders) {
            $headers->addTextHeader('X-DebugHash', base64_encode($this->headerHash));
        }
        $this->dkimHeader->setValue($string.' b='.trim(chunk_split(base64_encode($this->getEncryptedHash()), 73, ' ')));

        return $this;
    }

    /* Private helpers */

    protected function addHeader($header, $is_sig = false)
    {
        switch ($this->headerCanon) {
            case 'relaxed':
                // Prepare Header and cascade
                $exploded = explode(':', $header, 2);
                $name = strtolower(trim($exploded[0]));
                $value = str_replace("\r\n", '', $exploded[1]);
                $value = preg_replace("/[ \t][ \t]+/", ' ', $value);
                $header = $name.':'.trim($value).($is_sig ? '' : "\r\n");
                // no break
            case 'simple':
                // Nothing to do
        }
        $this->addToHeaderHash($header);
    }

    protected function canonicalizeBody($string)
    {
        $len = strlen($string);
        $canon = '';
        $method = ('relaxed' == $this->bodyCanon);
        for ($i = 0; $i < $len; ++$i) {
            if ($this->bodyCanonIgnoreStart > 0) {
                --$this->bodyCanonIgnoreStart;
                continue;
            }
            switch ($string[$i]) {
                case "\r":
                    $this->bodyCanonLastChar = "\r";
                    break;
                case "\n":
                    if ("\r" == $this->bodyCanonLastChar) {
                        if ($method) {
                            $this->bodyCanonSpace = false;
                        }
                        if ('' == $this->bodyCanonLine) {
                            ++$this->bodyCanonEmptyCounter;
                        } else {
                            $this->bodyCanonLine = '';
                            $canon .= "\r\n";
                        }
                    } else {
                        // Wooops Error
                        // todo handle it but should never happen
                    }
                    break;
                case ' ':
                case "\t":
                    if ($method) {
                        $this->bodyCanonSpace = true;
                        break;
                    }
                    // no break
                default:
                    if ($this->bodyCanonEmptyCounter > 0) {
                        $canon .= str_repeat("\r\n", $this->bodyCanonEmptyCounter);
                        $this->bodyCanonEmptyCounter = 0;
                    }
                    if ($this->bodyCanonSpace) {
                        $this->bodyCanonLine .= ' ';
                        $canon .= ' ';
                        $this->bodyCanonSpace = false;
                    }
                    $this->bodyCanonLine .= $string[$i];
                    $canon .= $string[$i];
            }
        }
        $this->addToBodyHash($canon);
    }

    protected function endOfBody()
    {
        // Add trailing Line return if last line is non empty
        if (strlen($this->bodyCanonLine) > 0) {
            $this->addToBodyHash("\r\n");
        }
        $this->bodyHash = hash_final($this->bodyHashHandler, true);
    }

    private function addToBodyHash($string)
    {
        $len = strlen($string);
        if ($len > ($new_len = ($this->maxLen - $this->bodyLen))) {
            $string = substr($string, 0, $new_len);
            $len = $new_len;
        }
        hash_update($this->bodyHashHandler, $string);
        $this->bodyLen += $len;
    }

    private function addToHeaderHash($header)
    {
        if ($this->debugHeaders) {
            $this->debugHeadersData[] = trim($header);
        }
        $this->headerCanonData .= $header;
    }

    /**
     * @throws Swift_SwiftException
     *
     * @return string
     */
    private function getEncryptedHash()
    {
        $signature = '';
        switch ($this->hashAlgorithm) {
            case 'rsa-sha1':
                $algorithm = OPENSSL_ALGO_SHA1;
                break;
            case 'rsa-sha256':
                $algorithm = OPENSSL_ALGO_SHA256;
                break;
        }
        $pkeyId = openssl_get_privatekey($this->privateKey, $this->passphrase);
        if (!$pkeyId) {
            throw new Swift_SwiftException('Unable to load DKIM Private Key ['.openssl_error_string().']');
        }
        if (openssl_sign($this->headerCanonData, $signature, $pkeyId, $algorithm)) {
            return $signature;
        }
        throw new Swift_SwiftException('Unable to sign DKIM Hash ['.openssl_error_string().']');
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           <?php

namespace Faker\Provider\en_AU;

/**
 * Class Address
 * @see http://www.ipaustralia.gov.au/about-us/corporate/address-standards/
 * @package Faker\Provider\en_AU
 */
class Address extends \Faker\Provider\en_US\Address
{
    protected static $cityPrefix = array('North', 'East', 'West', 'South', 'New', 'Lake', 'Port', 'St.');

    protected static $buildingNumber = array('###', '##', '#');

    protected static $buildingLetters = array('A','B','C','D');

    protected static $streetSuffix = array(
        'Access', 'Alley', 'Alleyway', 'Amble', 'Anchorage', 'Approach', 'Arcade', 'Artery', 'Avenue', 'Basin', 'Beach', 'Bend', 'Block', 'Boulevard', 'Brace', 'Brae', 'Break', 'Bridge', 'Broadway', 'Brow', 'Bypass', 'Byway', 'Causeway', 'Centre', 'Centreway', 'Chase', 'Circle', 'Circlet', 'Circuit', 'Circus', 'Close', 'Colonnade', 'Common', 'Concourse', 'Copse', 'Corner', 'Corso', 'Court', 'Courtyard', 'Cove', 'Crescent', 'Crest', 'Cross', 'Crossing', 'Crossroad', 'Crossway', 'Cruiseway', 'Cul-de-sac', 'Cutting', 'Dale', 'Dell', 'Deviation', 'Dip', 'Distributor', 'Drive', 'Driveway', 'Edge', 'Elbow', 'End', 'Entrance', 'Esplanade', 'Estate', 'Expressway', 'Extension', 'Fairway', 'Fire Track', 'Firetrail', 'Flat', 'Follow', 'Footway', 'Foreshore', 'Formation', 'Freeway', 'Front', 'Frontage', 'Gap', 'Garden', 'Gardens', 'Gate', 'Gates', 'Glade', 'Glen', 'Grange', 'Green', 'Ground', 'Grove', 'Gully', 'Heights', 'Highroad', 'Highway', 'Hill', 'Interchange', 'Intersection', 'Junction', 'Key', 'Landing', 'Lane', 'Laneway', 'Lees', 'Line', 'Link', 'Little', 'Lookout', 'Loop', 'Lower', 'Mall', 'Meander', 'Mew', 'Mews', 'Motorway', 'Mount', 'Nook', 'Outlook', 'Parade', 'Park', 'Parklands', 'Parkway', 'Part', 'Pass', 'Path', 'Pathway', 'Piazza', 'Place', 'Plateau', 'Plaza', 'Pocket', 'Point', 'Port', 'Promenade', 'Quad', 'Quadrangle', 'Quadrant', 'Quay', 'Quays', 'Ramble', 'Ramp', 'Range', 'Reach', 'Reserve', 'Rest', 'Retreat', 'Ride', 'Ridge', 'Ridgeway', 'Right Of Way', 'Ring', 'Rise', 'River', 'Riverway', 'Riviera', 'Road', 'Roads', 'Roadside', 'Roadway', 'Ronde', 'Rosebowl', 'Rotary', 'Round', 'Route', 'Row', 'Rue', 'Run', 'Service Way', 'Siding', 'Slope', 'Sound', 'Spur', 'Square', 'Stairs', 'State Highway', 'Steps', 'Strand', 'Street', 'Strip', 'Subway', 'Tarn', 'Terrace', 'Thoroughfare', 'Tollway', 'Top', 'Tor', 'Towers', 'Track', 'Trail', 'Trailer', 'Triangle', 'Trunkway', 'Turn', 'Underpass', 'Upper', 'Vale', 'Viaduct', 'View', 'Villas', 'Vista', 'Wade', 'Walk', 'Walkway', 'Way', 'Wynd'
    );

    protected static $postcode = array(
        // as per https://en.wikipedia.org/wiki/Postcodes_in_Australia
        // NSW
        '1###',
        '20##', '21##', '22##', '23##', '24##', '25##',
        '2619', '262#', '263#', '264#', '265#', '266#', '267#', '268#', '269#', '27##', '28##',
        '292#', '293#', '294#', '295#', '296#', '297#', '298#', '299#',
        // ACT
        '02##',
        '260#', '261#',
        '290#', '291#', '2920',
        // VIC
        '3###',
        '8###',
        // QLD
        '4###',
        '9###',
        // SA
        '5###',
        // WA
        '6###',
        // TAS
        '7###',
        // NT
        '08##',
        '09##',
    );

    protected static $state = array(
        'Australian Capital Territory', 'New South Wales', 'Northern Territory', 'Queensland', 'South Australia', 'Tasmania', 'Victoria', 'Western Australia'
    );

    protected static $stateAbbr = array(
        'ACT', 'NSW', 'NT', 'QLD', 'SA', 'TAS', 'VIC', 'WA'
    );

    protected static $streetAddressFormats = array(
        '{{buildingNumber}} {{streetName}}',
        '{{buildingNumber}}{{buildingLetter}} {{streetName}}',
        '{{secondaryAddress}} {{buildingNumber}} {{streetName}}',
    );

    protected static $secondaryAddressFormats = array(
        'Apt. ###',
        'Flat ##',
        'Suite ###',
        'Unit ##',
        'Level #',
        '### /',
        '## /',
        '# /',
    );

    /**
     * Returns a sane building letter
     * @example B
     */
    public static function buildingLetter()
    {
        return static::toUpper(static::randomElement(static::$buildingLetters));
    }

    /**
     * Returns a sane city prefix
     * @example West
     */
    public static function cityPrefix()
    {
        return static::randomElement(static::$cityPrefix);
    }

    /**
     * Returns a sane street suffix
     * @example Beach
     */
    public static function streetSuffix()
    {
        return static::randomElement(static::$streetSuffix);
    }

    /**
     * Returns a sane state
     * @example New South Wales
     */
    public static function state()
    {
        return static::randomElement(static::$state);
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    # ramsey/uuid

_NOTICE: Formerly known as `rhumsaa/uuid`, The package and namespace names have changed to `ramsey/uuid` and `Ramsey\Uuid`, respectively._

[![Source Code][badge-source]][source]
[![Latest Version][badge-release]][release]
[![Software License][badge-license]][license]
[![Build Status][badge-build]][build]
[![Coverage Status][badge-coverage]][coverage]
[![Total Downloads][badge-downloads]][downloads]

ramsey/uuid is a PHP 5.4+ library for generating and working with [RFC 4122][rfc4122] version 1, 3, 4, and 5 universally unique identifiers (UUID).

This project adheres to a [Contributor Code of Conduct][conduct]. By participating in this project and its community, you are expected to uphold this code.


## About

From [Wikipedia](http://en.wikipedia.org/wiki/Universally_unique_identifier):

> The intent of UUIDs is to enable distributed systems to uniquely identify information without significant central coordination. In this context the word unique should be taken to mean "practically unique" rather than "guaranteed unique". Since the identifiers have a finite size, it is possible for two differing items to share the same identifier. The identifier size and generation process need to be selected so as to make this sufficiently improbable in practice. Anyone can create a UUID and use it to identify something with reasonable confidence that the same identifier will never be unintentionally created by anyone to identify something else. Information labeled with UUIDs can therefore be later combined into a single database without needing to resolve identifier (ID) conflicts.

Much inspiration for this library came from the [Java][javauuid] and [Python][pyuuid] UUID libraries.


## Installation

The preferred method of installation is via [Packagist][] and [Composer][]. Run the following command to install the package and add it as a requirement to your project's `composer.json`:

```bash
composer require ramsey/uuid
```


## Upgrading from 2.x to 3.x

While we have made significant internal changes to the library, we have made every effort to ensure a seamless upgrade path from the 2.x series of this library to 3.x.

One major breaking change is the transition from the `Rhumsaa` root namespace to `Ramsey`. In most cases, all you will need is to change the namespace to `Ramsey` in your code, and everything will "just work."

Here are full details on the breaking changes to the public API of this library:

1. All namespace references of `Rhumsaa` have changed to `Ramsey`. Simply change the namespace to `Ramsey` in your code and everything should work.
2. The console application has moved to [ramsey/uuid-console](https://packagist.org/packages/ramsey/uuid-console). If using the console functionality, use Composer to require `ramsey/uuid-console`.
3. The Doctrine field type mapping has moved to [ramsey/uuid-doctrine](https://packagist.org/packages/ramsey/uuid-doctrine). If using the Doctrine functionality, use Composer to require `ramsey/uuid-doctrine`.


## What to do if you see a "rhumsaa/uuid is abandoned" message

When installing your project's dependencies using Composer, you might see the following message:

```
Package rhumsaa/uuid is abandoned, you should avoid using it. Use ramsey/uuid instead.
```

Don't panic. Simply execute the following commands with Composer:

``` bash
composer remove rhumsaa/uuid
composer require ramsey/uuid=^2.9
```

After doing so, you will have the latest ramsey/uuid package in the 2.x series, and there will be no need to modify any code; the namespace in the 2.x series is still `Rhumsaa`.


## Requirements

Some methods in this library have requirements due to integer size restrictions on 32-bit and 64-bit builds of PHP. A 64-bit build of PHP and the [Moontoast\Math][] library are recommended. However, this library is designed to work on 32-bit builds of PHP without Moontoast\Math, with some degraded functionality. Please check the API documentation for more information.

If a particular requirement is not present, then an `UnsatisfiedDependencyException` is thrown, allowing one to catch a bad call in an environment where the call is not supported and gracefully degrade.


## API documentation

The [latest class API documentation][apidocs] is available online.

This project uses [ApiGen](http://apigen.org/) to generate this documentation. To generate the documentation on your own, install dev dependencies and run the following command from the root of the project:

```
composer build-docs
```

This will generate documentation in the `build/apidocs/` folder.


## Examples

See the [cookbook on the wiki][wiki-cookbook] for more examples and approaches to specific use-cases.

```php
<?php
require 'vendor/autoload.php';

use Ramsey\Uuid\Uuid;
use Ramsey\Uuid\Exception\UnsatisfiedDependencyException;

try {

    // Generate a version 1 (time-based) UUID object
    $uuid1 = Uuid::uuid1();
    echo $uuid1->toString() . "\n"; // i.e. e4eaaaf2-d142-11e1-b3e4-080027620cdd

    // Generate a version 3 (name-based and hashed with MD5) UUID object
    $uuid3 = Uuid::uuid3(Uuid::NAMESPACE_DNS, 'php.net');
    echo $uuid3->toString() . "\n"; // i.e. 11a38b9a-b3da-360f-9353-a5a725514269

    // Generate a version 4 (random) UUID object
    $uuid4 = Uuid::uuid4();
    echo $uuid4->toString() . "\n"; // i.e. 25769c6c-d34d-4bfe-ba98-e0ee856f3e7a

    // Generate a version 5 (name-based and hashed with SHA1) UUID object
    $uuid5 = Uuid::uuid5(Uuid::NAMESPACE_DNS, 'php.net');
    echo $uuid5->toString() . "\n"; // i.e. c4a760a8-dbcf-5254-a0d9-6a4474bd1b62

} catch (UnsatisfiedDependencyException $e) {

    // Some dependency was not met. Either the method cannot be called on a
    // 32-bit system, or it can, but it relies on Moontoast\Math to be present.
    echo 'Caught exception: ' . $e->getMessage() . "\n";

}
```


## Contributing

Contributions are welcome! Please read [CONTRIBUTING][] for details.


## Copyright and license

The ramsey/uuid library is copyright ¬© [Ben Ramsey](https://benramsey.com/) and licensed for use under the MIT License (MIT). Please see [LICENSE][] for more information.



[rfc4122]: http://tools.ietf.org/html/rfc4122
[conduct]: https://github.com/ramsey/uuid/blob/master/CODE_OF_CONDUCT.md
[javauuid]: http://docs.oracle.com/javase/6/docs/api/java/util/UUID.html
[pyuuid]: http://docs.python.org/3/library/uuid.html
[packagist]: https://packagist.org/packages/ramsey/uuid
[composer]: http://getcomposer.org/
[moontoast\math]: https://packagist.org/packages/moontoast/math
[apidocs]: http://docs.benramsey.com/ramsey-uuid/latest/
[wiki-cookbook]: https://github.com/ramsey/uuid/wiki/Ramsey%5CUuid-Cookbook
[contributing]: https://github.com/ramsey/uuid/blob/master/CONTRIBUTING.md

[badge-source]: https://img.shields.io/badge/source-ramsey/uuid-blue.svg?style=flat-square
[badge-release]: https://img.shields.io/packagist/v/ramsey/uuid.svg?style=flat-square
[badge-license]: https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square
[badge-build]: https://img.shields.io/travis/ramsey/uuid/master.svg?style=flat-square
[badge-coverage]: https://img.shields.io/coveralls/ramsey/uuid/master.svg?style=flat-square
[badge-downloads]: https://img.shields.io/packagist/dt/ramsey/uuid.svg?style=flat-square

[source]: https://github.com/ramsey/uuid
[release]: https://packagist.org/packages/ramsey/uuid
[license]: https://github.com/ramsey/uuid/blob/master/LICENSE
[build]: https://travis-ci.org/ramsey/uuid
[coverage]: https://coveralls.io/r/ramsey/uuid?branch=master
[downloads]: https://packagist.org/packages/ramsey/uuid
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           // Chosen, a Select Box Enhancer for jQuery and Protoype
// by Patrick Filler for Harvest, http://getharvest.com
// 
// Version 0.9.11
// Full source at https://github.com/harvesthq/chosen
// Copyright (c) 2011 Harvest http://getharvest.com

// MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md
// This file is generated by `cake build`, do not edit it by hand.
(function() {
  var SelectParser;

  SelectParser = (function() {

    function SelectParser() {
      this.options_index = 0;
      this.parsed = [];
    }

    SelectParser.prototype.add_node = function(child) {
      if (child.nodeName.toUpperCase() === "OPTGROUP") {
        return this.add_group(child);
      } else {
        return this.add_option(child);
      }
    };

    SelectParser.prototype.add_group = function(group) {
      var group_position, option, _i, _len, _ref, _results;
      group_position = this.parsed.length;
      this.parsed.push({
        array_index: group_position,
        group: true,
        label: group.label,
        children: 0,
        disabled: group.disabled
      });
      _ref = group.childNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        _results.push(this.add_option(option, group_position, group.disabled));
      }
      return _results;
    };

    SelectParser.prototype.add_option = function(option, group_position, group_disabled) {
      if (option.nodeName.toUpperCase() === "OPTION") {
        if (option.text !== "") {
          if (group_position != null) {
            this.parsed[group_position].children += 1;
          }
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            value: option.value,
            text: option.text,
            html: option.innerHTML,
            selected: option.selected,
            disabled: group_disabled === true ? group_disabled : option.disabled,
            group_array_index: group_position,
            classes: option.className,
            style: option.style.cssText
          });
        } else {
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            empty: true
          });
        }
        return this.options_index += 1;
      }
    };

    return SelectParser;

  })();

  SelectParser.select_to_array = function(select) {
    var child, parser, _i, _len, _ref;
    parser = new SelectParser();
    _ref = select.childNodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      parser.add_node(child);
    }
    return parser.parsed;
  };

  this.SelectParser = SelectParser;

}).call(this);

/*
Chosen source: generate output using 'cake build'
Copyright (c) 2011 by Harvest
*/


(function() {
  var AbstractChosen, root;

  root = this;

  AbstractChosen = (function() {

    function AbstractChosen(form_field, options) {
      this.form_field = form_field;
      this.options = options != null ? options : {};
      this.is_multiple = this.form_field.multiple;
      this.set_default_text();
      this.set_default_values();
      this.setup();
      this.set_up_html();
      this.register_observers();
      this.finish_setup();
    }

    AbstractChosen.prototype.set_default_values = function() {
      var _this = this;
      this.click_test_action = function(evt) {
        return _this.test_active_click(evt);
      };
      this.activate_action = function(evt) {
        return _this.activate_field(evt);
      };
      this.active_field = false;
      this.mouse_on_container = false;
      this.results_showing = false;
      this.result_highlighted = null;
      this.result_single_selected = null;
      this.allow_single_deselect = (this.options.allow_single_deselect != null) && (this.form_field.options[0] != null) && this.form_field.options[0].text === "" ? this.options.allow_single_deselect : false;
      this.disable_search_threshold = this.options.disable_search_threshold || 0;
      this.disable_search = this.options.disable_search || false;
      this.enable_split_word_search = this.options.enable_split_word_search != null ? this.options.enable_split_word_search : true;
      this.search_contains = this.options.search_contains || false;
      this.choices = 0;
      this.single_backstroke_delete = this.options.single_backstroke_delete || false;
      this.max_selected_options = this.options.max_selected_options || Infinity;
      return this.inherit_select_classes = this.options.inherit_select_classes || false;
    };

    AbstractChosen.prototype.set_default_text = function() {
      if (this.form_field.getAttribute("data-placeholder")) {
        this.default_text = this.form_field.getAttribute("data-placeholder");
      } else if (this.is_multiple) {
        this.default_text = this.options.placeholder_text_multiple || this.options.placeholder_text || "Select Some Options";
      } else {
        this.default_text = this.options.placeholder_text_single || this.options.placeholder_text || "Select an Option";
      }
      return this.results_none_found = this.form_field.getAttribute("data-no_results_text") || this.options.no_results_text || "No results match";
    };

    AbstractChosen.prototype.mouse_enter = function() {
      return this.mouse_on_container = true;
    };

    AbstractChosen.prototype.mouse_leave = function() {
      return this.mouse_on_container = false;
    };

    AbstractChosen.prototype.input_focus = function(evt) {
      var _this = this;
      if (this.is_multiple) {
        if (!this.active_field) {
          return setTimeout((function() {
            return _this.container_mousedown();
          }), 50);
        }
      } else {
        if (!this.active_field) {
          return this.activate_field();
        }
      }
    };

    AbstractChosen.prototype.input_blur = function(evt) {
      var _this = this;
      if (!this.mouse_on_container) {
        this.active_field = false;
        return setTimeout((function() {
          return _this.blur_test();
        }), 100);
      }
    };

    AbstractChosen.prototype.result_add_option = function(option) {
      var classes, style;
      if (!option.disabled) {
        option.dom_id = this.container_id + "_o_" + option.array_index;
        classes = option.selected && this.is_multiple ? [] : ["active-result"];
        if (option.selected) {
          classes.push("result-selected");
        }
        if (option.group_array_index != null) {
          classes.push("group-option");
        }
        if (option.classes !== "") {
          classes.push(option.classes);
        }
        style = option.style.cssText !== "" ? " style=\"" + option.style + "\"" : "";
        return '<li id="' + option.dom_id + '" class="' + classes.join(' ') + '"' + style + '>' + option.html + '</li>';
      } else {
        return "";
      }
    };

    AbstractChosen.prototype.results_update_field = function() {
      if (!this.is_multiple) {
        this.results_reset_cleanup();
      }
      this.result_clear_highlight();
      this.result_single_selected = null;
      return this.results_build();
    };

    AbstractChosen.prototype.results_toggle = function() {
      if (this.results_showing) {
        return this.results_hide();
      } else {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.results_search = function(evt) {
      if (this.results_showing) {
        return this.winnow_results();
      } else {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.keyup_checker = function(evt) {
      var stroke, _ref;
      stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
      this.search_field_scale();
      switch (stroke) {
        case 8:
          if (this.is_multiple && this.backstroke_length < 1 && this.choices > 0) {
            return this.keydown_backstroke();
          } else if (!this.pending_backstroke) {
            this.result_clear_highlight();
            return this.results_search();
          }
          break;
        case 13:
          evt.preventDefault();
          if (this.results_showing) {
            return this.result_select(evt);
          }
          break;
        case 27:
          if (this.results_showing) {
            this.results_hide();
          }
          return true;
        case 9:
        case 38:
        case 40:
        case 16:
        case 91:
        case 17:
          break;
        default:
          return this.results_search();
      }
    };

    AbstractChosen.prototype.generate_field_id = function() {
      var new_id;
      new_id = this.generate_random_id();
      this.form_field.id = new_id;
      return new_id;
    };

    AbstractChosen.prototype.generate_random_char = function() {
      var chars, newchar, rand;
      chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
      rand = Math.floor(Math.random() * chars.length);
      return newchar = chars.substring(rand, rand + 1);
    };

    return AbstractChosen;

  })();

  root.AbstractChosen = AbstractChosen;

}).call(this);

/*
Chosen source: generate output using 'cake build'
Copyright (c) 2011 by Harvest
*/


(function() {
  var $, Chosen, get_side_border_padding, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = this;

  $ = jQuery;

  $.fn.extend({
    chosen: function(options) {
      var browser, match, ua;
      ua = navigator.userAgent.toLowerCase();
      match = /(msie) ([\w.]+)/.exec(ua) || [];
      browser = {
        name: match[1] || "",
        version: match[2] || "0"
      };
      if (browser.name === "msie" && (browser.version === "6.0" || (browser.version === "7.0" && document.documentMode === 7))) {
        return this;
      }
      return this.each(function(input_field) {
        var $this;
        $this = $(this);
        if (!$this.hasClass("chzn-done")) {
          return $this.data('chosen', new Chosen(this, options));
        }
      });
    }
  });

  Chosen = (function(_super) {

    __extends(Chosen, _super);

    function Chosen() {
      return Chosen.__super__.constructor.apply(this, arguments);
    }

    Chosen.prototype.setup = function() {
      this.form_field_jq = $(this.form_field);
      this.current_value = this.form_field_jq.val();
      return this.is_rtl = this.form_field_jq.hasClass("chzn-rtl");
    };

    Chosen.prototype.finish_setup = function() {
      return this.form_field_jq.addClass("chzn-done");
    };

    Chosen.prototype.set_up_html = function() {
      var container_classes, container_div, container_props, dd_top, dd_width, sf_width;
      this.container_id = this.form_field.id.length ? this.form_field.id.replace(/[^\w]/g, '_') : this.generate_field_id();
      this.container_id += "_chzn";
      container_classes = ["chzn-container"];
      container_classes.push("chzn-container-" + (this.is_multiple ? "multi" : "single"));
      if (this.inherit_select_classes && this.form_field.className) {
        container_classes.push(this.form_field.className);
      }
      if (this.is_rtl) {
        container_classes.push("chzn-rtl");
      }
      this.f_width = this.form_field_jq.outerWidth();
      container_props = {
        id: this.container_id,
        "class": container_classes.join(' '),
        style: 'width: ' + this.f_width + 'px;',
        title: this.form_field.title
      };
      container_div = $("<div />", container_props);
      if (this.is_multiple) {
        container_div.html('<ul class="chzn-choices"><li class="search-field"><input type="text" value="' + this.default_text + '" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chzn-drop" style="left:-9000px;"><ul class="chzn-results"></ul></div>');
      } else {
        container_div.html('<a href="javascript:void(0)" class="chzn-single chzn-default" tabindex="-1"><span>' + this.default_text + '</span><div><b></b></div></a><div class="chzn-drop" style="left:-9000px;"><div class="chzn-search"><input type="text" autocomplete="off" /></div><ul class="chzn-results"></ul></div>');
      }
      this.form_field_jq.hide().after(container_div);
      this.container = $('#' + this.container_id);
      this.dropdown = this.container.find('div.chzn-drop').first();
      dd_top = this.container.height();
      dd_width = this.f_width - get_side_border_padding(this.dropdown);
      this.dropdown.css({
        "width": dd_width + "px",
        "top": dd_top + "px"
      });
      this.search_field = this.container.find('input').first();
      this.search_results = this.container.find('ul.chzn-results').first();
      this.search_field_scale();
      this.search_no_results = this.container.find('li.no-results').first();
      if (this.is_multiple) {
        this.search_choices = this.container.find('ul.chzn-choices').first();
        this.search_container = this.container.find('li.search-field').first();
      } else {
        this.search_container = this.container.find('div.chzn-search').first();
        this.selected_item = this.container.find('.chzn-single').first();
        sf_width = dd_width - get_side_border_padding(this.search_container) - get_side_border_padding(this.search_field);
        this.search_field.css({
          "width": sf_width + "px"
        });
      }
      this.results_build();
      this.set_tab_index();
      return this.form_field_jq.trigger("liszt:ready", {
        chosen: this
      });
    };

    Chosen.prototype.register_observers = function() {
      var _this = this;
      this.container.mousedown(function(evt) {
        return _this.container_mousedown(evt);
      });
      this.container.mouseup(function(evt) {
        return _this.container_mouseup(evt);
      });
      this.container.mouseenter(function(evt) {
        return _this.mouse_enter(evt);
      });
      this.container.mouseleave(function(evt) {
        return _this.mouse_leave(evt);
      });
      this.search_results.mouseup(function(evt) {
        return _this.search_results_mouseup(evt);
      });
      this.search_results.mouseover(function(evt) {
        return _this.search_results_mouseover(evt);
      });
      this.search_results.mouseout(function(evt) {
        return _this.search_results_mouseout(evt);
      });
      this.form_field_jq.bind("liszt:updated", function(evt) {
        return _this.results_update_field(evt);
      });
      this.form_field_jq.bind("liszt:activate", function(evt) {
        return _this.activate_field(evt);
      });
      this.form_field_jq.bind("liszt:open", function(evt) {
        return _this.container_mousedown(evt);
      });
      this.search_field.blur(function(evt) {
        return _this.input_blur(evt);
      });
      this.search_field.keyup(function(evt) {
        return _this.keyup_checker(evt);
      });
      this.search_field.keydown(function(evt) {
        return _this.keydown_checker(evt);
      });
      this.search_field.focus(function(evt) {
        return _this.input_focus(evt);
      });
      if (this.is_multiple) {
        return this.search_choices.click(function(evt) {
          return _this.choices_click(evt);
        });
      } else {
        return this.container.click(function(evt) {
          return evt.preventDefault();
        });
      }
    };

    Chosen.prototype.search_field_disabled = function() {
      this.is_disabled = this.form_field_jq[0].disabled;
      if (this.is_disabled) {
        this.container.addClass('chzn-disabled');
        this.search_field[0].disabled = true;
        if (!this.is_multiple) {
          this.selected_item.unbind("focus", this.activate_action);
        }
        return this.close_field();
      } else {
        this.container.removeClass('chzn-disabled');
        this.search_field[0].disabled = false;
        if (!this.is_multiple) {
          return this.selected_item.bind("focus", this.activate_action);
        }
      }
    };

    Chosen.prototype.container_mousedown = function(evt) {
      var target_closelink;
      if (!this.is_disabled) {
        target_closelink = evt != null ? ($(evt.target)).hasClass("search-choice-close") : false;
        if (evt && evt.type === "mousedown" && !this.results_showing) {
          evt.preventDefault();
        }
        if (!this.pending_destroy_click && !target_closelink) {
          if (!this.active_field) {
            if (this.is_multiple) {
              this.search_field.val("");
            }
            $(document).click(this.click_test_action);
            this.results_show();
          } else if (!this.is_multiple && evt && (($(evt.target)[0] === this.selected_item[0]) || $(evt.target).parents("a.chzn-single").length)) {
            evt.preventDefault();
            this.results_toggle();
          }
          return this.activate_field();
        } else {
          return this.pending_destroy_click = false;
        }
      }
    };

    Chosen.prototype.container_mouseup = function(evt) {
      if (evt.target.nodeName === "ABBR" && !this.is_disabled) {
        return this.results_reset(evt);
      }
    };

    Chosen.prototype.blur_test = function(evt) {
      if (!this.active_field && this.container.hasClass("chzn-container-active")) {
        return this.close_field();
      }
    };

    Chosen.prototype.close_field = function() {
      $(document).unbind("click", this.click_test_action);
      this.active_field = false;
      this.results_hide();
      this.container.removeClass("chzn-container-active");
      this.winnow_results_clear();
      this.clear_backstroke();
      this.show_search_field_default();
      return this.search_field_scale();
    };

    Chosen.prototype.activate_field = function() {
      this.container.addClass("chzn-container-active");
      this.active_field = true;
      this.search_field.val(this.search_field.val());
      return this.search_field.focus();
    };

    Chosen.prototype.test_active_click = function(evt) {
      if ($(evt.target).parents('#' + this.container_id).length) {
        return this.active_field = true;
      } else {
        return this.close_field();
      }
    };

    Chosen.prototype.results_build = function() {
      var content, data, _i, _len, _ref;
      this.parsing = true;
      this.results_data = root.SelectParser.select_to_array(this.form_field);
      if (this.is_multiple && this.choices > 0) {
        this.search_choices.find("li.search-choice").remove();
        this.choices = 0;
      } else if (!this.is_multiple) {
        this.selected_item.addClass("chzn-default").find("span").text(this.default_text);
        if (this.disable_search || this.form_field.options.length <= this.disable_search_threshold) {
          this.container.addClass("chzn-container-single-nosearch");
        } else {
          this.container.removeClass("chzn-container-single-nosearch");
        }
      }
      content = '';
      _ref = this.results_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        data = _ref[_i];
        if (data.group) {
          content += this.result_add_group(data);
        } else if (!data.empty) {
          content += this.result_add_option(data);
          if (data.selected && this.is_multiple) {
            this.choice_build(data);
          } else if (data.selected && !this.is_multiple) {
            this.selected_item.removeClass("chzn-default").find("span").text(data.text);
            if (this.allow_single_deselect) {
              this.single_deselect_control_build();
            }
          }
        }
      }
      this.search_field_disabled();
      this.show_search_field_default();
      this.search_field_scale();
      this.search_results.html(content);
      return this.parsing = false;
    };

    Chosen.prototype.result_add_group = function(group) {
      if (!group.disabled) {
        group.dom_id = this.container_id + "_g_" + group.array_index;
        return '<li id="' + group.dom_id + '" class="group-result">' + $("<div />").text(group.label).html() + '</li>';
      } else {
        return "";
      }
    };

    Chosen.prototype.result_do_highlight = function(el) {
      var high_bottom, high_top, maxHeight, visible_bottom, visible_top;
      if (el.length) {
        this.result_clear_highlight();
        this.result_highlight = el;
        this.result_highlight.addClass("highlighted");
        maxHeight = parseInt(this.search_results.css("maxHeight"), 10);
        visible_top = this.search_results.scrollTop();
        visible_bottom = maxHeight + visible_top;
        high_top = this.result_highlight.position().top + this.search_results.scrollTop();
        high_bottom = high_top + this.result_highlight.outerHeight();
        if (high_bottom >= visible_bottom) {
          return this.search_results.scrollTop((high_bottom - maxHeight) > 0 ? high_bottom - maxHeight : 0);
        } else if (high_top < visible_top) {
          return this.search_results.scrollTop(high_top);
        }
      }
    };

    Chosen.prototype.result_clear_highlight = function() {
      if (this.result_highlight) {
        this.result_highlight.removeClass("highlighted");
      }
      return this.result_highlight = null;
    };

    Chosen.prototype.results_show = function() {
      var dd_top;
      if (!this.is_multiple) {
        this.selected_item.addClass("chzn-single-with-drop");
        if (this.result_single_selected) {
          this.result_do_highlight(this.result_single_selected);
        }
      } else if (this.max_selected_options <= this.choices) {
        this.form_field_jq.trigger("liszt:maxselected", {
          chosen: this
        });
        return false;
      }
      dd_top = this.is_multiple ? this.container.height() : this.container.height() - 1;
      this.form_field_jq.trigger("liszt:showing_dropdown", {
        chosen: this
      });
      this.dropdown.css({
        "top": dd_top + "px",
        "left": 0
      });
      this.results_showing = true;
      this.search_field.focus();
      this.search_field.val(this.search_field.val());
      return this.winnow_results();
    };

    Chosen.prototype.results_hide = function() {
      if (!this.is_multiple) {
        this.selected_item.removeClass("chzn-single-with-drop");
      }
      this.result_clear_highlight();
      this.form_field_jq.trigger("liszt:hiding_dropdown", {
        chosen: this
      });
      this.dropdown.css({
        "left": "-9000px"
      });
      return this.results_showing = false;
    };

    Chosen.prototype.set_tab_index = function(el) {
      var ti;
      if (this.form_field_jq.attr("tabindex")) {
        ti = this.form_field_jq.attr("tabindex");
        this.form_field_jq.attr("tabindex", -1);
        return this.search_field.attr("tabindex", ti);
      }
    };

    Chosen.prototype.show_search_field_default = function() {
      if (this.is_multiple && this.choices < 1 && !this.active_field) {
        this.search_field.val(this.default_text);
        return this.search_field.addClass("default");
      } else {
        this.search_field.val("");
        return this.search_field.removeClass("default");
      }
    };

    Chosen.prototype.search_results_mouseup = function(evt) {
      var target;
      target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
      if (target.length) {
        this.result_highlight = target;
        this.result_select(evt);
        return this.search_field.focus();
      }
    };

    Chosen.prototype.search_results_mouseover = function(evt) {
      var target;
      target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
      if (target) {
        return this.result_do_highlight(target);
      }
    };

    Chosen.prototype.search_results_mouseout = function(evt) {
      if ($(evt.target).hasClass("active-result" || $(evt.target).parents('.active-result').first())) {
        return this.result_clear_highlight();
      }
    };

    Chosen.prototype.choices_click = function(evt) {
      evt.preventDefault();
      if (this.active_field && !($(evt.target).hasClass("search-choice" || $(evt.target).parents('.search-choice').first)) && !this.results_showing) {
        return this.results_show();
      }
    };

    Chosen.prototype.choice_build = function(item) {
      var choice_id, html, link,
        _this = this;
      if (this.is_multiple && this.max_selected_options <= this.choices) {
        this.form_field_jq.trigger("liszt:maxselected", {
          chosen: this
        });
        return false;
      }
      choice_id = this.container_id + "_c_" + item.array_index;
      this.choices += 1;
      if (item.disabled) {
        html = '<li class="search-choice search-choice-disabled" id="' + choice_id + '"><span>' + item.html + '</span></li>';
      } else {
        html = '<li class="search-choice" id="' + choice_id + '"><span>' + item.html + '</span><a href="javascript:void(0)" class="search-choice-close" rel="' + item.array_index + '"></a></li>';
      }
      this.search_container.before(html);
      link = $('#' + choice_id).find("a").first();
      return link.click(function(evt) {
        return _this.choice_destroy_link_click(evt);
      });
    };

    Chosen.prototype.choice_destroy_link_click = function(evt) {
      evt.preventDefault();
      if (!this.is_disabled) {
        this.pending_destroy_click = true;
        return this.choice_destroy($(evt.target));
      } else {
        return evt.stopPropagation;
      }
    };

    Chosen.prototype.choice_destroy = function(link) {
      if (this.result_deselect(link.attr("rel"))) {
        this.choices -= 1;
        this.show_search_field_default();
        if (this.is_multiple && this.choices > 0 && this.search_field.val().length < 1) {
          this.results_hide();
        }
        link.parents('li').first().remove();
        return this.search_field_scale();
      }
    };

    Chosen.prototype.results_reset = function() {
      this.form_field.options[0].selected = true;
      this.selected_item.find("span").text(this.default_text);
      if (!this.is_multiple) {
        this.selected_item.addClass("chzn-default");
      }
      this.show_search_field_default();
      this.results_reset_cleanup();
      this.form_field_jq.trigger("change");
      if (this.active_field) {
        return this.results_hide();
      }
    };

    Chosen.prototype.results_reset_cleanup = function() {
      this.current_value = this.form_field_jq.val();
      return this.selected_item.find("abbr").remove();
    };

    Chosen.prototype.result_select = function(evt) {
      var high, high_id, item, position;
      if (this.result_highlight) {
        high = this.result_highlight;
        high_id = high.attr("id");
        this.result_clear_highlight();
        if (this.is_multiple) {
          this.result_deactivate(high);
        } else {
          this.search_results.find(".result-selected").removeClass("result-selected");
          this.result_single_selected = high;
          this.selected_item.removeClass("chzn-default");
        }
        high.addClass("result-selected");
        position = high_id.substr(high_id.lastIndexOf("_") + 1);
        item = this.results_data[position];
        item.selected = true;
        this.form_field.options[item.options_index].selected = true;
        if (this.is_multiple) {
          this.choice_build(item);
        } else {
          this.selected_item.find("span").first().text(item.text);
          if (this.allow_single_deselect) {
            this.single_deselect_control_build();
          }
        }
        if (!((evt.metaKey || evt.ctrlKey) && this.is_multiple)) {
          this.results_hide();
        }
        this.search_field.val("");
        if (this.is_multiple || this.form_field_jq.val() !== this.current_value) {
          this.form_field_jq.trigger("change", {
            'selected': this.form_field.options[item.options_index].value
          });
        }
        this.current_value = this.form_field_jq.val();
        return this.search_field_scale();
      }
    };

    Chosen.prototype.result_activate = function(el) {
      return el.addClass("active-result");
    };

    Chosen.prototype.result_deactivate = function(el) {
      return el.removeClass("active-result");
    };

    Chosen.prototype.result_deselect = function(pos) {
      var result, result_data;
      result_data = this.results_data[pos];
      if (!this.form_field.options[result_data.options_index].disabled) {
        result_data.selected = false;
        this.form_field.options[result_data.options_index].selected = false;
        result = $("#" + this.container_id + "_o_" + pos);
        result.removeClass("result-selected").addClass("active-result").show();
        this.result_clear_highlight();
        this.winnow_results();
        this.form_field_jq.trigger("change", {
          deselected: this.form_field.options[result_data.options_index].value
        });
        this.search_field_scale();
        return true;
      } else {
        return false;
      }
    };

    Chosen.prototype.single_deselect_control_build = function() {
      if (this.allow_single_deselect && this.selected_item.find("abbr").length < 1) {
        return this.selected_item.find("span").first().after("<abbr class=\"search-choice-close\"></abbr>");
      }
    };

    Chosen.prototype.winnow_results = function() {
      var found, option, part, parts, regex, regexAnchor, result, result_id, results, searchText, startpos, text, zregex, _i, _j, _len, _len1, _ref;
      this.no_results_clear();
      results = 0;
      searchText = this.search_field.val() === this.default_text ? "" : $('<div/>').text($.trim(this.search_field.val())).html();
      regexAnchor = this.search_contains ? "" : "^";
      regex = new RegExp(regexAnchor + searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), 'i');
      zregex = new RegExp(searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), 'i');
      _ref = this.results_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        if (!option.disabled && !option.empty) {
          if (option.group) {
            $('#' + option.dom_id).css('display', 'none');
          } else if (!(this.is_multiple && option.selected)) {
            found = false;
            result_id = option.dom_id;
            result = $("#" + result_id);
            if (regex.test(option.html)) {
              found = true;
              results += 1;
            } else if (this.enable_split_word_search && (option.html.indexOf(" ") >= 0 || option.html.indexOf("[") === 0)) {
              parts = option.html.replace(/\[|\]/g, "").split(" ");
              if (parts.length) {
                for (_j = 0, _len1 = parts.length; _j < _len1; _j++) {
                  part = parts[_j];
                  if (regex.test(part)) {
                    found = true;
                    results += 1;
                  }
                }
              }
            }
            if (found) {
              if (searchText.length) {
                startpos = option.html.search(zregex);
                text = option.html.substr(0, startpos + searchText.length) + '</em>' + option.html.substr(startpos + searchText.length);
                text = text.substr(0, startpos) + '<em>' + text.substr(startpos);
              } else {
                text = option.html;
              }
              result.html(text);
              this.result_activate(result);
              if (option.group_array_index != null) {
                $("#" + this.results_data[option.group_array_index].dom_id).css('display', 'list-item');
              }
            } else {
              if (this.result_highlight && result_id === this.result_highlight.attr('id')) {
                this.result_clear_highlight();
              }
              this.result_deactivate(result);
            }
          }
        }
      }
      if (results < 1 && searchText.length) {
        return this.no_results(searchText);
      } else {
        return this.winnow_results_set_highlight();
      }
    };

    Chosen.prototype.winnow_results_clear = function() {
      var li, lis, _i, _len, _results;
      this.search_field.val("");
      lis = this.search_results.find("li");
      _results = [];
      for (_i = 0, _len = lis.length; _i < _len; _i++) {
        li = lis[_i];
        li = $(li);
        if (li.hasClass("group-result")) {
          _results.push(li.css('display', 'auto'));
        } else if (!this.is_multiple || !li.hasClass("result-selected")) {
          _results.push(this.result_activate(li));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Chosen.prototype.winnow_results_set_highlight = function() {
      var do_high, selected_results;
      if (!this.result_highlight) {
        selected_results = !this.is_multiple ? this.search_results.find(".result-selected.active-result") : [];
        do_high = selected_results.length ? selected_results.first() : this.search_results.find(".active-result").first();
        if (do_high != null) {
          return this.result_do_highlight(do_high);
        }
      }
    };

    Chosen.prototype.no_results = function(terms) {
      var no_results_html;
      no_results_html = $('<li class="no-results">' + this.results_none_found + ' "<span></span>"</li>');
      no_results_html.find("span").first().html(terms);
      return this.search_results.append(no_results_html);
    };

    Chosen.prototype.no_results_clear = function() {
      return this.search_results.find(".no-results").remove();
    };

    Chosen.prototype.keydown_arrow = function() {
      var first_active, next_sib;
      if (!this.result_highlight) {
        first_active = this.search_results.find("li.active-result").first();
        if (first_active) {
          this.result_do_highlight($(first_active));
        }
      } else if (this.results_showing) {
        next_sib = this.result_highlight.nextAll("li.active-result").first();
        if (next_sib) {
          this.result_do_highlight(next_sib);
        }
      }
      if (!this.results_showing) {
        return this.results_show();
      }
    };

    Chosen.prototype.keyup_arrow = function() {
      var prev_sibs;
      if (!this.results_showing && !this.is_multiple) {
        return this.results_show();
      } else if (this.result_highlight) {
        prev_sibs = this.result_highlight.prevAll("li.active-result");
        if (prev_sibs.length) {
          return this.result_do_highlight(prev_sibs.first());
        } else {
          if (this.choices > 0) {
            this.results_hide();
          }
          return this.result_clear_highlight();
        }
      }
    };

    Chosen.prototype.keydown_backstroke = function() {
      var next_available_destroy;
      if (this.pending_backstroke) {
        this.choice_destroy(this.pending_backstroke.find("a").first());
        return this.clear_backstroke();
      } else {
        next_available_destroy = this.search_container.siblings("li.search-choice").last();
        if (next_available_destroy.length && !next_available_destroy.hasClass("search-choice-disabled")) {
          this.pending_backstroke = next_available_destroy;
          if (this.single_backstroke_delete) {
            return this.keydown_backstroke();
          } else {
            return this.pending_backstroke.addClass("search-choice-focus");
          }
        }
      }
    };

    Chosen.prototype.clear_backstroke = function() {
      if (this.pending_backstroke) {
        this.pending_backstroke.removeClass("search-choice-focus");
      }
      return this.pending_backstroke = null;
    };

    Chosen.prototype.keydown_checker = function(evt) {
      var stroke, _ref;
      stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
      this.search_field_scale();
      if (stroke !== 8 && this.pending_backstroke) {
        this.clear_backstroke();
      }
      switch (stroke) {
        case 8:
          this.backstroke_length = this.search_field.val().length;
          break;
        case 9:
          if (this.results_showing && !this.is_multiple) {
            this.result_select(evt);
          }
          this.mouse_on_container = false;
          break;
        case 13:
          evt.preventDefault();
          break;
        case 38:
          evt.preventDefault();
          this.keyup_arrow();
          break;
        case 40:
          this.keydown_arrow();
          break;
      }
    };

    Chosen.prototype.search_field_scale = function() {
      var dd_top, div, h, style, style_block, styles, w, _i, _len;
      if (this.is_multiple) {
        h = 0;
        w = 0;
        style_block = "position:absolute; left: -1000px; top: -1000px; display:none;";
        styles = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'];
        for (_i = 0, _len = styles.length; _i < _len; _i++) {
          style = styles[_i];
          style_block += style + ":" + this.search_field.css(style) + ";";
        }
        div = $('<div />', {
          'style': style_block
        });
        div.text(this.search_field.val());
        $('body').append(div);
        w = div.width() + 25;
        div.remove();
        if (w > this.f_width - 10) {
          w = this.f_width - 10;
        }
        this.search_field.css({
          'width': w + 'px'
        });
        dd_top = this.container.height();
        return this.dropdown.css({
          "top": dd_top + "px"
        });
      }
    };

    Chosen.prototype.generate_random_id = function() {
      var string;
      string = "sel" + this.generate_random_char() + this.generate_random_char() + this.generate_random_char();
      while ($("#" + string).length > 0) {
        string += this.generate_random_char();
      }
      return string;
    };

    return Chosen;

  })(AbstractChosen);

  root.Chosen = Chosen;

  get_side_border_padding = function(elmt) {
    var side_border_padding;
    return side_border_padding = elmt.outerWidth() - elmt.width();
  };

  root.get_side_border_padding = get_side_border_padding;

}).call(this);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               INDX( 	                 (   p  Ë       .                     õ‹    x f     ö‹    v‚˛çÓ¡÷ 	ï˙pÒ’€ª éÓ¡÷v‚˛çÓ¡÷       @
               C o m p i l e r E n g i n e . p h p   ú‹    h V     ö‹    «˛ éÓ¡÷ 	ï˙pÒ’zéÓ¡÷∆˛ éÓ¡÷p      j              
 E n g i n e . p h p   ù‹    x f     ö‹    ä5éÓ¡÷ 	ï˙pÒ’‘ËéÓ¡÷Ñ5éÓ¡÷                      E n g i n e R e s o l v e r . p h p   û‹    p ^     ö‹    .éÓ¡÷ 	ï˙pÒ’Ó‘	éÓ¡÷˛-éÓ¡÷x      u               F i l e E n g i n e  p h p   ü‹    p \     ö‹    ì
éÓ¡÷ 	ï˙pÒ’ Ã
éÓ¡÷í
éÓ¡÷       ù               P h p E n g i n e . p h p                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    --TEST--
\PHPUnit\Framework\MockObject\Generator::generate('Foo', [], 'MockFoo', true, true)
--FILE--
<?php
abstract class Foo
{
    public function one()
    {
    }

    abstract public function two();

    abstract protected function three();
}

require __DIR__ . '/../../../../vendor/autoload.php';

$generator = new \PHPUnit\Framework\MockObject\Generator;

$mock = $generator->generate(
    'Foo',
    [],
    'MockFoo',
    true,
    true
);

print $mock['code'];
?>
--EXPECT--
class MockFoo extends Foo implements PHPUnit\Framework\MockObject\MockObject
{
    private $__phpunit_invocationMocker;
    private $__phpunit_originalObject;
    private $__phpunit_configurable = ['one', 'two', 'three'];
    private $__phpunit_returnValueGeneration = true;

    public function __clone()
    {
        $this->__phpunit_invocationMocker = clone $this->__phpunit_getInvocationMocker();
    }

    public function one()
    {
        $__phpunit_arguments = [];
        $__phpunit_count     = func_num_args();

        if ($__phpunit_count > 0) {
            $__phpunit_arguments_tmp = func_get_args();

            for ($__phpunit_i = 0; $__phpunit_i < $__phpunit_count; $__phpunit_i++) {
                $__phpunit_arguments[] = $__phpunit_arguments_tmp[$__phpunit_i];
            }
        }

        $__phpunit_result = $this->__phpunit_getInvocationMocker()->invoke(
            new \PHPUnit\Framework\MockObject\Invocation\ObjectInvocation(
                'Foo', 'one', $__phpunit_arguments, '', $this, true
            )
        );

        return $__phpunit_result;
    }

    public function two()
    {
        $__phpunit_arguments = [];
        $__phpunit_count     = func_num_args();

        if ($__phpunit_count > 0) {
            $__phpunit_arguments_tmp = func_get_args();

            for ($__phpunit_i = 0; $__phpunit_i < $__phpunit_count; $__phpunit_i++) {
                $__phpunit_arguments[] = $__phpunit_arguments_tmp[$__phpunit_i];
            }
        }

        $__phpunit_result = $this->__phpunit_getInvocationMocker()->invoke(
            new \PHPUnit\Framework\MockObject\Invocation\ObjectInvocation(
                'Foo', 'two', $__phpunit_arguments, '', $this, true
            )
        );

        return $__phpunit_result;
    }

    protected function three()
    {
        $__phpunit_arguments = [];
        $__phpunit_count     = func_num_args();

        if ($__phpunit_count > 0) {
            $__phpunit_arguments_tmp = func_get_args();

            for ($__phpunit_i = 0; $__phpunit_i < $__phpunit_count; $__phpunit_i++) {
                $__phpunit_arguments[] = $__phpunit_arguments_tmp[$__phpunit_i];
            }
        }

        $__phpunit_result = $this->__phpunit_getInvocationMocker()->invoke(
            new \PHPUnit\Framework\MockObject\Invocation\ObjectInvocation(
                'Foo', 'three', $__phpunit_arguments, '', $this, true
            )
        );

        return $__phpunit_result;
    }

    public function expects(\PHPUnit\Framework\MockObject\Matcher\Invocation $matcher)
    {
        return $this->__phpunit_getInvocationMocker()->expects($matcher);
    }

    public function method()
    {
        $any     = new \PHPUnit\Framework\MockObject\Matcher\AnyInvokedCount;
        $expects = $this->expects($any);

        return call_user_func_array([$expects, 'method'], func_get_args());
    }

    public function __phpunit_setOriginalObject($originalObject)
    {
        $this->__phpunit_originalObject = $originalObject;
    }

    public function __phpunit_setReturnValueGeneration(bool $returnValueGeneration)
    {
        $this->__phpunit_returnValueGeneration = $returnValueGeneration;
    }

    public function __phpunit_getInvocationMocker()
    {
        if ($this->__phpunit_invocationMocker === null) {
            $this->__phpunit_invocationMocker = new \PHPUnit\Framework\MockObject\InvocationMocker($this->__phpunit_configurable, $this->__phpunit_returnValueGeneration);
        }

        return $this->__phpunit_invocationMocker;
    }

    public function __phpunit_hasMatchers()
    {
        return $this->__phpunit_getInvocationMocker()->hasMatchers();
    }

    public function __phpunit_verify(bool $unsetInvocationMocker = true)
    {
        $this->__phpunit_getInvocationMocker()->verify();

        if ($unsetInvocationMocker) {
            $this->__phpunit_invocationMocker = null;
        }
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     <?php

static $data = array (
  ' ' => ' ',
  '' => '',
  '' => '',
  '' => '',
  '' => '',
  '' => '',
  '' => '',
  '' => '',
  '' => '',
  '	' => '	',
  '
' => '
',
  '' => '',
  '' => '',
  '' => '',
  '' => '',
  '' => '',
  '' => '',
  '' => '',
  '' => '',
  '' => '',
  '' => '',
  '' => '',
  '' => '',
  '' => '',
  '' => '',
  '' => '',
  '' => '',
  '' => '',
  '' => '',
  '' => '',
  '' => '',
  '' => '',
  ' ' => ' ',
  '!' => '!',
  '"' => '"',
  '#' => '#',
  '$' => '$',
  '%' => '%',
  '&' => '&',
  '\'' => '\'',
  '(' => '(',
  ')' => ')',
  '*' => '*',
  '+' => '+',
  ',' => ',',
  '-' => '-',
  '.' => '.',
  '/' => '/',
  0 => '0',
  1 => '1',
  2 => '2',
  3 => '3',
  4 => '4',
  5 => '5',
  6 => '6',
  7 => '7',
  8 => '8',
  9 => '9',
  ':' => ':',
  ';' => ';',
  '<' => '<',
  '=' => '=',
  '>' => '>',
  '?' => '?',
  '@' => '@',
  'A' => 'A',
  'B' => 'B',
  'C' => 'C',
  'D' => 'D',
  'E' => 'E',
  'F' => 'F',
  'G' => 'G',
  'H' => 'H',
  'I' => 'I',
  'J' => 'J',
  'K' => 'K',
  'L' => 'L',
  'M' => 'M',
  'N' => 'N',
  'O' => 'O',
  'P' => 'P',
  'Q' => 'Q',
  'R' => 'R',
  'S' => 'S',
  'T' => 'T',
  'U' => 'U',
  'V' => 'V',
  'W' => 'W',
  'X' => 'X',
  'Y' => 'Y',
  'Z' => 'Z',
  '[' => '[',
  '\\' => '\\',
  ']' => ']',
  '^' => '^',
  '_' => '_',
  '`' => '`',
  'a' => 'a',
  'b' => 'b',
  'c' => 'c',
  'd' => 'd',
  'e' => 'e',
  'f' => 'f',
  'g' => 'g',
  'h' => 'h',
  'i' => 'i',
  'j' => 'j',
  'k' => 'k',
  'l' => 'l',
  'm' => 'm',
  'n' => 'n',
  'o' => 'o',
  'p' => 'p',
  'q' => 'q',
  'r' => 'r',
  's' => 's',
  't' => 't',
  'u' => 'u',
  'v' => 'v',
  'w' => 'w',
  'x' => 'x',
  'y' => 'y',
  'z' => 'z',
  '{' => '{',
  '|' => '|',
  '}' => '}',
  '~' => '~',
  '' => '',
  'Ä' => '¬Ä',
  'Å' => '¬Å',
  'Ç' => '¬Ç',
  'É' => '¬É',
  'Ñ' => '¬Ñ',
  'Ö' => '¬Ö',
  'Ü' => '¬Ü',
  'á' => '¬á',
  'à' => '¬à',
  'â' => '¬â',
  'ä' => '¬ä',
  'ã' => '¬ã',
  'å' => '¬å',
  'ç' => '¬ç',
  'é' => '¬é',
  'è' => '¬è',
  'ê' => '¬ê',
  'ë' => '¬ë',
  'í' => '¬í',
  'ì' => '¬ì',
  'î' => '¬î',
  'ï' => '¬ï',
  'ñ' => '¬ñ',
  'ó' => '¬ó',
  'ò' => '¬ò',
  'ô' => '¬ô',
  'ö' => '¬ö',
  'õ' => '¬õ',
  'ú' => '¬ú',
  'ù' => '¬ù',
  'û' => '¬û',
  'ü' => '¬ü',
  '†' => '¬†',
  '°' => 'ƒÑ',
  '¢' => 'ƒí',
  '£' => 'ƒ¢',
  '§' => 'ƒ™',
  '•' => 'ƒ®',
  '¶' => 'ƒ∂',
  'ß' => '¬ß',
  '®' => 'ƒª',
  '©' => 'ƒê',
  '™' => '≈†',
  '´' => '≈¶',
  '¨' => '≈Ω',
  '≠' => '¬≠',
  'Æ' => '≈™',
  'Ø' => '≈ä',
  '∞' => '¬∞',
  '±' => 'ƒÖ',
  '≤' => 'ƒì',
  '≥' => 'ƒ£',
  '¥' => 'ƒ´',
  'µ' => 'ƒ©',
  '∂' => 'ƒ∑',
  '∑' => '¬∑',
  '∏' => 'ƒº',
  'π' => 'ƒë',
  '∫' => '≈°',
  'ª' => '≈ß',
  'º' => '≈æ',
  'Ω' => '‚Äï',
  'æ' => '≈´',
  'ø' => '≈ã',
  '¿' => 'ƒÄ',
  '¡' => '√Å',
  '¬' => '√Ç',
  '√' => '√É',
  'ƒ' => '√Ñ',
  '≈' => '√Ö',
  '∆' => '√Ü',
  '«' => 'ƒÆ',
  '»' => 'ƒå',
  '…' => '√â',
  ' ' => 'ƒò',
  'À' => '√ã',
  'Ã' => 'ƒñ',
  'Õ' => '√ç',
  'Œ' => '√é',
  'œ' => '√è',
  '–' => '√ê',
  '—' => '≈Ö',
  '“' => '≈å',
  '”' => '√ì',
  '‘' => '√î',
  '’' => '√ï',
  '÷' => '√ñ',
  '◊' => '≈®',
  'ÿ' => '√ò',
  'Ÿ' => '≈≤',
  '⁄' => '√ö',
  '€' => '√õ',
  '‹' => '√ú',
  '›' => '√ù',
  'ﬁ' => '√û',
  'ﬂ' => '√ü',
  '‡' => 'ƒÅ',
  '·' => '√°',
  '‚' => '√¢',
  '„' => '√£',
  '‰' => '√§',
  'Â' => '√•',
  'Ê' => '√¶',
  'Á' => 'ƒØ',
  'Ë' => 'ƒç',
  'È' => '√©',
  'Í' => 'ƒô',
  'Î' => '√´',
  'Ï' => 'ƒó',
  'Ì' => '√≠',
  'Ó' => '√Æ',
  'Ô' => '√Ø',
  '' => '√∞',
  'Ò' => '≈Ü',
  'Ú' => '≈ç',
  'Û' => '√≥',
  'Ù' => '√¥',
  'ı' => '√µ',
  'ˆ' => '√∂',
  '˜' => '≈©',
  '¯' => '√∏',
  '˘' => '≈≥',
  '˙' => '√∫',
  '˚' => '√ª',
  '¸' => '√º',
  '˝' => '√Ω',
  '˛' => '√æ',
  'ˇ' => 'ƒ∏',
);

$result =& $data;
unset($data);

return $result;
                                                                                                                                                                                                                                                                                                                            import React, { Component } from "react";
import { Typography, TextField, Card, Grid, Button } from "@material-ui/core";
import fire from "../Fire";

class FreeAccess extends Component {
  constructor(props) {
    super(props);
    this.state = {
      email: "",
      password: ""
    };
  }

  Qww = () => {};

  setEmail = event => {
    this.setState({ email: event.target.value });
  };

  setPassword = event => {
    this.setState({ password: event.target.value });
  };

  submit = async () => {
    const { contract, accounts } = this.props;

    const a = await contract.methods.getAadhar(accounts[0]).call();

    await fire
      .database()
      .ref()
      .child("notif")
      .child("A")
      .set({ otp: this.state.password, aadhar: a, req: accounts[0] });
  };

  render() {
    return (
      <div>
        <Grid container>
          <Grid item md={2} />
          <Grid item md={3} style={{ margin: "5%" }}>
            <Card style={{ padding: "25px", width: "500px" }}>
              <Typography variant="h4" color="primary">
                Acc√®ss libre
              </Typography>
              <TextField
                onChange={this.setEmail}
                id="standard-name"
                label="Addresse Email"
                margin="normal"
                style={{ width: "250px" }}
              />
              <br />
              <TextField
                onChange={this.setPassword}
                type="password"
                id="standard-name"
                label="Mot de passe"
                margin="normal"
                style={{ width: "250px" }}
              />{" "}
              <br />
              <Button
                onClick={this.submit}
                variant="outlined"
                color="primary"
                style={{ marginLeft: "25%", marginTop: "10%" }}
              >
                Requ√™te
              </Button>
            </Card>
          </Grid>
        </Grid>
      </div>
    );
  }
}

export default FreeAccess;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              MIT License

Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           "use strict";

exports.__esModule = true;
exports.default = void 0;

var _declaration = _interopRequireDefault(require("./declaration"));

var _comment = _interopRequireDefault(require("./comment"));

var _node = _interopRequireDefault(require("./node"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function cleanSource(nodes) {
  return nodes.map(function (i) {
    if (i.nodes) i.nodes = cleanSource(i.nodes);
    delete i.source;
    return i;
  });
}
/**
 * The {@link Root}, {@link AtRule}, and {@link Rule} container nodes
 * inherit some common methods to help work with their children.
 *
 * Note that all containers can store any content. If you write a rule inside
 * a rule, PostCSS will parse it.
 *
 * @extends Node
 * @abstract
 */


var Container = /*#__PURE__*/function (_Node) {
  _inheritsLoose(Container, _Node);

  function Container() {
    return _Node.apply(this, arguments) || this;
  }

  var _proto = Container.prototype;

  _proto.push = function push(child) {
    child.parent = this;
    this.nodes.push(child);
    return this;
  }
  /**
   * Iterates through the container‚Äôs immediate children,
   * calling `callback` for each child.
   *
   * Returning `false` in the callback will break iteration.
   *
   * This method only iterates through the container‚Äôs immediate children.
   * If you need to recursively iterate through all the container‚Äôs descendant
   * nodes, use {@link Container#walk}.
   *
   * Unlike the for `{}`-cycle or `Array#forEach` this iterator is safe
   * if you are mutating the array of child nodes during iteration.
   * PostCSS will adjust the current index to match the mutations.
   *
   * @param {childIterator} callback Iterator receives each node and index.
   *
   * @return {false|undefined} Returns `false` if iteration was broke.
   *
   * @example
   * const root = postcss.parse('a { color: black; z-index: 1 }')
   * const rule = root.first
   *
   * for (const decl of rule.nodes) {
   *   decl.cloneBefore({ prop: '-webkit-' + decl.prop })
   *   // Cycle will be infinite, because cloneBefore moves the current node
   *   // to the next index
   * }
   *
   * rule.each(decl => {
   *   decl.cloneBefore({ prop: '-webkit-' + decl.prop })
   *   // Will be executed only for color and z-index
   * })
   */
  ;

  _proto.each = function each(callback) {
    if (!this.lastEach) this.lastEach = 0;
    if (!this.indexes) this.indexes = {};
    this.lastEach += 1;
    var id = this.lastEach;
    this.indexes[id] = 0;
    if (!this.nodes) return undefined;
    var index, result;

    while (this.indexes[id] < this.nodes.length) {
      index = this.indexes[id];
      result = callback(this.nodes[index], index);
      if (result === false) break;
      this.indexes[id] += 1;
    }

    delete this.indexes[id];
    return result;
  }
  /**
   * Traverses the container‚Äôs descendant nodes, calling callback
   * for each node.
   *
   * Like container.each(), this method is safe to use
   * if you are mutating arrays during iteration.
   *
   * If you only need to iterate through the container‚Äôs immediate children,
   * use {@link Container#each}.
   *
   * @param {childIterator} callback Iterator receives each node and index.
   *
   * @return {false|undefined} Returns `false` if iteration was broke.
   *
   * @example
   * root.walk(node => {
   *   // Traverses all descendant nodes.
   * })
   */
  ;

  _proto.walk = function walk(callback) {
    return this.each(function (child, i) {
      var result;

      try {
        result = callback(child, i);
      } catch (e) {
        e.postcssNode = child;

        if (e.stack && child.source && /\n\s{4}at /.test(e.stack)) {
          var s = child.source;
          e.stack = e.stack.replace(/\n\s{4}at /, "$&" + s.input.from + ":" + s.start.line + ":" + s.start.column + "$&");
        }

        throw e;
      }

      if (result !== false && child.walk) {
        result = child.walk(callback);
      }

      return result;
    });
  }
  /**
   * Traverses the container‚Äôs descendant nodes, calling callback
   * for each declaration node.
   *
   * If you pass a filter, iteration will only happen over declarations
   * with matching properties.
   *
   * Like {@link Container#each}, this method is safe
   * to use if you are mutating arrays during iteration.
   *
   * @param {string|RegExp} [prop]   String or regular expression
   *                                 to filter declarations by property name.
   * @param {childIterator} callback Iterator receives each node and index.
   *
   * @return {false|undefined} Returns `false` if iteration was broke.
   *
   * @example
   * root.walkDecls(decl => {
   *   checkPropertySupport(decl.prop)
   * })
   *
   * root.walkDecls('border-radius', decl => {
   *   decl.remove()
   * })
   *
   * root.walkDecls(/^background/, decl => {
   *   decl.value = takeFirstColorFromGradient(decl.value)
   * })
   */
  ;

  _proto.walkDecls = function walkDecls(prop, callback) {
    if (!callback) {
      callback = prop;
      return this.walk(function (child, i) {
        if (child.type === 'decl') {
          return callback(child, i);
        }
      });
    }

    if (prop instanceof RegExp) {
      return this.walk(function (child, i) {
        if (child.type === 'decl' && prop.test(child.prop)) {
          return callback(child, i);
        }
      });
    }

    return this.walk(function (child, i) {
      if (child.type === 'decl' && child.prop === prop) {
        return callback(child, i);
      }
    });
  }
  /**
   * Traverses the container‚Äôs descendant nodes, calling callback
   * for each rule node.
   *
   * If you pass a filter, iteration will only happen over rules
   * with matching selectors.
   *
   * Like {@link Container#each}, this method is safe
   * to use if you are mutating arrays during iteration.
   *
   * @param {string|RegExp} [selector] String or regular expression
   *                                   to filter rules by selector.
   * @param {childIterator} callback   Iterator receives each node and index.
   *
   * @return {false|undefined} returns `false` if iteration was broke.
   *
   * @example
   * const selectors = []
   * root.walkRules(rule => {
   *   selectors.push(rule.selector)
   * })
   * console.log(`Your CSS uses ${ selectors.length } selectors`)
   */
  ;

  _proto.walkRules = function walkRules(selector, callback) {
    if (!callback) {
      callback = selector;
      return this.walk(function (child, i) {
        if (child.type === 'rule') {
          return callback(child, i);
        }
      });
    }

    if (selector instanceof RegExp) {
      return this.walk(function (child, i) {
        if (child.type === 'rule' && selector.test(child.selector)) {
          return callback(child, i);
        }
      });
    }

    return this.walk(function (child, i) {
      if (child.type === 'rule' && child.selector === selector) {
        return callback(child, i);
      }
    });
  }
  /**
   * Traverses the container‚Äôs descendant nodes, calling callback
   * for each at-rule node.
   *
   * If you pass a filter, iteration will only happen over at-rules
   * that have matching names.
   *
   * Like {@link Container#each}, this method is safe
   * to use if you are mutating arrays during iteration.
   *
   * @param {string|RegExp} [name]   String or regular expression
   *                                 to filter at-rules by name.
   * @param {childIterator} callback Iterator receives each node and index.
   *
   * @return {false|undefined} Returns `false` if iteration was broke.
   *
   * @example
   * root.walkAtRules(rule => {
   *   if (isOld(rule.name)) rule.remove()
   * })
   *
   * let first = false
   * root.walkAtRules('charset', rule => {
   *   if (!first) {
   *     first = true
   *   } else {
   *     rule.remove()
   *   }
   * })
   */
  ;

  _proto.walkAtRules = function walkAtRules(name, callback) {
    if (!callback) {
      callback = name;
      return this.walk(function (child, i) {
        if (child.type === 'atrule') {
          return callback(child, i);
        }
      });
    }

    if (name instanceof RegExp) {
      return this.walk(function (child, i) {
        if (child.type === 'atrule' && name.test(child.name)) {
          return callback(child, i);
        }
      });
    }

    return this.walk(function (child, i) {
      if (child.type === 'atrule' && child.name === name) {
        return callback(child, i);
      }
    });
  }
  /**
   * Traverses the container‚Äôs descendant nodes, calling callback
   * for each comment node.
   *
   * Like {@link Container#each}, this method is safe
   * to use if you are mutating arrays during iteration.
   *
   * @param {childIterator} callback Iterator receives each node and index.
   *
   * @return {false|undefined} Returns `false` if iteration was broke.
   *
   * @example
   * root.walkComments(comment => {
   *   comment.remove()
   * })
   */
  ;

  _proto.walkComments = function walkComments(callback) {
    return this.walk(function (child, i) {
      if (child.type === 'comment') {
        return callback(child, i);
      }
    });
  }
  /**
   * Inserts new nodes to the end of the container.
   *
   * @param {...(Node|object|string|Node[])} children New nodes.
   *
   * @return {Node} This node for methods chain.
   *
   * @example
   * const decl1 = postcss.decl({ prop: 'color', value: 'black' })
   * const decl2 = postcss.decl({ prop: 'background-color', value: 'white' })
   * rule.append(decl1, decl2)
   *
   * root.append({ name: 'charset', params: '"UTF-8"' })  // at-rule
   * root.append({ selector: 'a' })                       // rule
   * rule.append({ prop: 'color', value: 'black' })       // declaration
   * rule.append({ text: 'Comment' })                     // comment
   *
   * root.append('a {}')
   * root.first.append('color: black; z-index: 1')
   */
  ;

  _proto.append = function append() {
    for (var _len = arguments.length, children = new Array(_len), _key = 0; _key < _len; _key++) {
      children[_key] = arguments[_key];
    }

    for (var _i = 0, _children = children; _i < _children.length; _i++) {
      var child = _children[_i];
      var nodes = this.normalize(child, this.last);

      for (var _iterator = _createForOfIteratorHelperLoose(nodes), _step; !(_step = _iterator()).done;) {
        var node = _step.value;
        this.nodes.push(node);
      }
    }

    return this;
  }
  /**
   * Inserts new nodes to the start of the container.
   *
   * @param {...(Node|object|string|Node[])} children New nodes.
   *
   * @return {Node} This node for methods chain.
   *
   * @example
   * const decl1 = postcss.decl({ prop: 'color', value: 'black' })
   * const decl2 = postcss.decl({ prop: 'background-color', value: 'white' })
   * rule.prepend(decl1, decl2)
   *
   * root.append({ name: 'charset', params: '"UTF-8"' })  // at-rule
   * root.append({ selector: 'a' })                       // rule
   * rule.append({ prop: 'color', value: 'black' })       // declaration
   * rule.append({ text: 'Comment' })                     // comment
   *
   * root.append('a {}')
   * root.first.append('color: black; z-index: 1')
   */
  ;

  _proto.prepend = function prepend() {
    for (var _len2 = arguments.length, children = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      children[_key2] = arguments[_key2];
    }

    children = children.reverse();

    for (var _iterator2 = _createForOfIteratorHelperLoose(children), _step2; !(_step2 = _iterator2()).done;) {
      var child = _step2.value;
      var nodes = this.normalize(child, this.first, 'prepend').reverse();

      for (var _iterator3 = _createForOfIteratorHelperLoose(nodes), _step3; !(_step3 = _iterator3()).done;) {
        var node = _step3.value;
        this.nodes.unshift(node);
      }

      for (var id in this.indexes) {
        this.indexes[id] = this.indexes[id] + nodes.length;
      }
    }

    return this;
  };

  _proto.cleanRaws = function cleanRaws(keepBetween) {
    _Node.prototype.cleanRaws.call(this, keepBetween);

    if (this.nodes) {
      for (var _iterator4 = _createForOfIteratorHelperLoose(this.nodes), _step4; !(_step4 = _iterator4()).done;) {
        var node = _step4.value;
        node.cleanRaws(keepBetween);
      }
    }
  }
  /**
   * Insert new node before old node within the container.
   *
   * @param {Node|number} exist             Child or child‚Äôs index.
   * @param {Node|object|string|Node[]} add New node.
   *
   * @return {Node} This node for methods chain.
   *
   * @example
   * rule.insertBefore(decl, decl.clone({ prop: '-webkit-' + decl.prop }))
   */
  ;

  _proto.insertBefore = function insertBefore(exist, add) {
    exist = this.index(exist);
    var type = exist === 0 ? 'prepend' : false;
    var nodes = this.normalize(add, this.nodes[exist], type).reverse();

    for (var _iterator5 = _createForOfIteratorHelperLoose(nodes), _step5; !(_step5 = _iterator5()).done;) {
      var node = _step5.value;
      this.nodes.splice(exist, 0, node);
    }

    var index;

    for (var id in this.indexes) {
      index = this.indexes[id];

      if (exist <= index) {
        this.indexes[id] = index + nodes.length;
      }
    }

    return this;
  }
  /**
   * Insert new node after old node within the container.
   *
   * @param {Node|number} exist             Child or child‚Äôs index.
   * @param {Node|object|string|Node[]} add New node.
   *
   * @return {Node} This node for methods chain.
   */
  ;

  _proto.insertAfter = function insertAfter(exist, add) {
    exist = this.index(exist);
    var nodes = this.normalize(add, this.nodes[exist]).reverse();

    for (var _iterator6 = _createForOfIteratorHelperLoose(nodes), _step6; !(_step6 = _iterator6()).done;) {
      var node = _step6.value;
      this.nodes.splice(exist + 1, 0, node);
    }

    var index;

    for (var id in this.indexes) {
      index = this.indexes[id];

      if (exist < index) {
        this.indexes[id] = index + nodes.length;
      }
    }

    return this;
  }
  /**
   * Removes node from the container and cleans the parent properties
   * from the node and its children.
   *
   * @param {Node|number} child Child or child‚Äôs index.
   *
   * @return {Node} This node for methods chain
   *
   * @example
   * rule.nodes.length  //=> 5
   * rule.removeChild(decl)
   * rule.nodes.length  //=> 4
   * decl.parent        //=> undefined
   */
  ;

  _proto.removeChild = function removeChild(child) {
    child = this.index(child);
    this.nodes[child].parent = undefined;
    this.nodes.splice(child, 1);
    var index;

    for (var id in this.indexes) {
      index = this.indexes[id];

      if (index >= child) {
        this.indexes[id] = index - 1;
      }
    }

    return this;
  }
  /**
   * Removes all children from the container
   * and cleans their parent properties.
   *
   * @return {Node} This node for methods chain.
   *
   * @example
   * rule.removeAll()
   * rule.nodes.length //=> 0
   */
  ;

  _proto.removeAll = function removeAll() {
    for (var _iterator7 = _createForOfIteratorHelperLoose(this.nodes), _step7; !(_step7 = _iterator7()).done;) {
      var node = _step7.value;
      node.parent = undefined;
    }

    this.nodes = [];
    return this;
  }
  /**
   * Passes all declaration values within the container that match pattern
   * through callback, replacing those values with the returned result
   * of callback.
   *
   * This method is useful if you are using a custom unit or function
   * and need to iterate through all values.
   *
   * @param {string|RegExp} pattern      Replace pattern.
   * @param {object} opts                Options to speed up the search.
   * @param {string|string[]} opts.props An array of property names.
   * @param {string} opts.fast           String that‚Äôs used to narrow down
   *                                     values and speed up the regexp search.
   * @param {function|string} callback   String to replace pattern or callback
   *                                     that returns a new value. The callback
   *                                     will receive the same arguments
   *                                     as those passed to a function parameter
   *                                     of `String#replace`.
   *
   * @return {Node} This node for methods chain.
   *
   * @example
   * root.replaceValues(/\d+rem/, { fast: 'rem' }, string => {
   *   return 15 * parseInt(string) + 'px'
   * })
   */
  ;

  _proto.replaceValues = function replaceValues(pattern, opts, callback) {
    if (!callback) {
      callback = opts;
      opts = {};
    }

    this.walkDecls(function (decl) {
      if (opts.props && opts.props.indexOf(decl.prop) === -1) return;
      if (opts.fast && decl.value.indexOf(opts.fast) === -1) return;
      decl.value = decl.value.replace(pattern, callback);
    });
    return this;
  }
  /**
   * Returns `true` if callback returns `true`
   * for all of the container‚Äôs children.
   *
   * @param {childCondition} condition Iterator returns true or false.
   *
   * @return {boolean} Is every child pass condition.
   *
   * @example
   * const noPrefixes = rule.every(i => i.prop[0] !== '-')
   */
  ;

  _proto.every = function every(condition) {
    return this.nodes.every(condition);
  }
  /**
   * Returns `true` if callback returns `true` for (at least) one
   * of the container‚Äôs children.
   *
   * @param {childCondition} condition Iterator returns true or false.
   *
   * @return {boolean} Is some child pass condition.
   *
   * @example
   * const hasPrefix = rule.some(i => i.prop[0] === '-')
   */
  ;

  _proto.some = function some(condition) {
    return this.nodes.some(condition);
  }
  /**
   * Returns a `child`‚Äôs index within the {@link Container#nodes} array.
   *
   * @param {Node} child Child of the current container.
   *
   * @return {number} Child index.
   *
   * @example
   * rule.index( rule.nodes[2] ) //=> 2
   */
  ;

  _proto.index = function index(child) {
    if (typeof child === 'number') {
      return child;
    }

    return this.nodes.indexOf(child);
  }
  /**
   * The container‚Äôs first child.
   *
   * @type {Node}
   *
   * @example
   * rule.first === rules.nodes[0]
   */
  ;

  _proto.normalize = function normalize(nodes, sample) {
    var _this = this;

    if (typeof nodes === 'string') {
      var parse = require('./parse');

      nodes = cleanSource(parse(nodes).nodes);
    } else if (Array.isArray(nodes)) {
      nodes = nodes.slice(0);

      for (var _iterator8 = _createForOfIteratorHelperLoose(nodes), _step8; !(_step8 = _iterator8()).done;) {
        var i = _step8.value;
        if (i.parent) i.parent.removeChild(i, 'ignore');
      }
    } else if (nodes.type === 'root') {
      nodes = nodes.nodes.slice(0);

      for (var _iterator9 = _createForOfIteratorHelperLoose(nodes), _step9; !(_step9 = _iterator9()).done;) {
        var _i2 = _step9.value;
        if (_i2.parent) _i2.parent.removeChild(_i2, 'ignore');
      }
    } else if (nodes.type) {
      nodes = [nodes];
    } else if (nodes.prop) {
      if (typeof nodes.value === 'undefined') {
        throw new Error('Value field is missed in node creation');
      } else if (typeof nodes.value !== 'string') {
        nodes.value = String(nodes.value);
      }

      nodes = [new _declaration.default(nodes)];
    } else if (nodes.selector) {
      var Rule = require('./rule');

      nodes = [new Rule(nodes)];
    } else if (nodes.name) {
      var AtRule = require('./at-rule');

      nodes = [new AtRule(nodes)];
    } else if (nodes.text) {
      nodes = [new _comment.default(nodes)];
    } else {
      throw new Error('Unknown node type in node creation');
    }

    var processed = nodes.map(function (i) {
      if (i.parent) i.parent.removeChild(i);

      if (typeof i.raws.before === 'undefined') {
        if (sample && typeof sample.raws.before !== 'undefined') {
          i.raws.before = sample.raws.before.replace(/[^\s]/g, '');
        }
      }

      i.parent = _this;
      return i;
    });
    return processed;
  }
  /**
   * @memberof Container#
   * @member {Node[]} nodes An array containing the container‚Äôs children.
   *
   * @example
   * const root = postcss.parse('a { color: black }')
   * root.nodes.length           //=> 1
   * root.nodes[0].selector      //=> 'a'
   * root.nodes[0].nodes[0].prop //=> 'color'
   */
  ;

  _createClass(Container, [{
    key: "first",
    get: function get() {
      if (!this.nodes) return undefined;
      return this.nodes[0];
    }
    /**
     * The container‚Äôs last child.
     *
     * @type {Node}
     *
     * @example
     * rule.last === rule.nodes[rule.nodes.length - 1]
     */

  }, {
    key: "last",
    get: function get() {
      if (!this.nodes) return undefined;
      return this.nodes[this.nodes.length - 1];
    }
  }]);

  return Container;
}(_node.default);

var _default = Container;
/**
 * @callback childCondition
 * @param {Node} node    Container child.
 * @param {number} index Child index.
 * @param {Node[]} nodes All container children.
 * @return {boolean}
 */

/**
 * @callback childIterator
 * @param {Node} node    Container child.
 * @param {number} index Child index.
 * @return {false|undefined} Returning `false` will break iteration.
 */

exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     The MIT License (MIT)

Copyright (c) 2015-2016, Jon Schlinkert

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 'use strict';

exports.__esModule = true;

var _node = require('./node');

var _node2 = _interopRequireDefault(_node);

var _types = require('./types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var String = function (_Node) {
    _inherits(String, _Node);

    function String(opts) {
        _classCallCheck(this, String);

        var _this = _possibleConstructorReturn(this, _Node.call(this, opts));

        _this.type = _types.STRING;
        return _this;
    }

    return String;
}(_node2.default);

exports.default = String;
module.exports = exports['default'];                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                import { Observable } from '../Observable';
import { Operator } from '../Operator';
import { Subscriber } from '../Subscriber';
import { MonoTypeOperatorFunction, TeardownLogic } from '../types';
import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';

/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.
 *
 * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will
 * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the
 * source observable directly with an equality check against previous values.
 *
 * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.
 *
 * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the
 * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`
 * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so
 * that the internal `Set` can be "flushed", basically clearing it of values.
 *
 * ## Examples
 * A simple example with numbers
 * ```ts
 * import { of } from 'rxjs';
 * import { distinct } from 'rxjs/operators';
 *
 * of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1).pipe(
 *     distinct(),
 *   )
 *   .subscribe(x => console.log(x)); // 1, 2, 3, 4
 * ```
 *
 * An example using a keySelector function
 * ```typescript
 * import { of } from 'rxjs';
 * import { distinct } from 'rxjs/operators';
 *
 * interface Person {
 *    age: number,
 *    name: string
 * }
 *
 * of<Person>(
 *     { age: 4, name: 'Foo'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo'},
 *   ).pipe(
 *     distinct((p: Person) => p.name),
 *   )
 *   .subscribe(x => console.log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo' }
 * // { age: 7, name: 'Bar' }
 * ```
 * @see {@link distinctUntilChanged}
 * @see {@link distinctUntilKeyChanged}
 *
 * @param {function} [keySelector] Optional function to select which value you want to check as distinct.
 * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.
 * @return {Observable} An Observable that emits items from the source Observable with distinct values.
 * @method distinct
 * @owner Observable
 */
export function distinct<T, K>(keySelector?: (value: T) => K,
                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {
  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));
}

class DistinctOperator<T, K> implements Operator<T, T> {
  constructor(private keySelector?: (value: T) => K, private flushes?: Observable<any>) {
  }

  call(subscriber: Subscriber<T>, source: any): TeardownLogic {
    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));
  }
}

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
export class DistinctSubscriber<T, K> extends SimpleOuterSubscriber<T, T> {
  private values = new Set<K>();

  constructor(destination: Subscriber<T>, private keySelector?: (value: T) => K, flushes?: Observable<any>) {
    super(destination);

    if (flushes) {
      this.add(innerSubscribe(flushes, new SimpleInnerSubscriber(this)));
    }
  }

  notifyNext(): void {
    this.values.clear();
  }

  notifyError(error: any): void {
    this._error(error);
  }

  protected _next(value: T): void {
    if (this.keySelector) {
      this._useKeySelector(value);
    } else {
      this._finalizeNext(value, value);
    }
  }

  private _useKeySelector(value: T): void {
    let key: K;
    const { destination } = this;
    try {
      key = this.keySelector!(value);
    } catch (err) {
      destination.error!(err);
      return;
    }
    this._finalizeNext(key, value);
  }

  private _finalizeNext(key: K|T, value: T) {
    const { values } = this;
    if (!values.has(<K>key)) {
      values.add(<K>key);
      this.destination.next!(value);
    }
  }

}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   "use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = getscrollAccessor;

var _isWindow = _interopRequireDefault(require("./isWindow"));

function getscrollAccessor(offset) {
  var prop = offset === 'pageXOffset' ? 'scrollLeft' : 'scrollTop';

  function scrollAccessor(node, val) {
    var win = (0, _isWindow.default)(node);

    if (val === undefined) {
      return win ? win[offset] : node[prop];
    }

    if (win) {
      win.scrollTo(win[offset], val);
    } else {
      node[prop] = val;
    }
  }

  return scrollAccessor;
}

module.exports = exports["default"];                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     'use strict';
const os = require('os');
const hasFlag = require('has-flag');

const env = process.env;

let forceColor;
if (hasFlag('no-color') ||
	hasFlag('no-colors') ||
	hasFlag('color=false')) {
	forceColor = false;
} else if (hasFlag('color') ||
	hasFlag('colors') ||
	hasFlag('color=true') ||
	hasFlag('color=always')) {
	forceColor = true;
}
if ('FORCE_COLOR' in env) {
	forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;
}

function translateLevel(level) {
	if (level === 0) {
		return false;
	}

	return {
		level,
		hasBasic: true,
		has256: level >= 2,
		has16m: level >= 3
	};
}

function supportsColor(stream) {
	if (forceColor === false) {
		return 0;
	}

	if (hasFlag('color=16m') ||
		hasFlag('color=full') ||
		hasFlag('color=truecolor')) {
		return 3;
	}

	if (hasFlag('color=256')) {
		return 2;
	}

	if (stream && !stream.isTTY && forceColor !== true) {
		return 0;
	}

	const min = forceColor ? 1 : 0;

	if (process.platform === 'win32') {
		// Node.js 7.5.0 is the first version of Node.js to include a patch to
		// libuv that enables 256 color output on Windows. Anything earlier and it
		// won't work. However, here we target Node.js 8 at minimum as it is an LTS
		// release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows
		// release that supports 256 colors. Windows 10 build 14931 is the first release
		// that supports 16m/TrueColor.
		const osRelease = os.release().split('.');
		if (
			Number(process.versions.node.split('.')[0]) >= 8 &&
			Number(osRelease[0]) >= 10 &&
			Number(osRelease[2]) >= 10586
		) {
			return Number(osRelease[2]) >= 14931 ? 3 : 2;
		}

		return 1;
	}

	if ('CI' in env) {
		if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
			return 1;
		}

		return min;
	}

	if ('TEAMCITY_VERSION' in env) {
		return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
	}

	if (env.COLORTERM === 'truecolor') {
		return 3;
	}

	if ('TERM_PROGRAM' in env) {
		const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

		switch (env.TERM_PROGRAM) {
			case 'iTerm.app':
				return version >= 3 ? 3 : 2;
			case 'Apple_Terminal':
				return 2;
			// No default
		}
	}

	if (/-256(color)?$/i.test(env.TERM)) {
		return 2;
	}

	if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
		return 1;
	}

	if ('COLORTERM' in env) {
		return 1;
	}

	if (env.TERM === 'dumb') {
		return min;
	}

	return min;
}

function getSupportLevel(stream) {
	const level = supportsColor(stream);
	return translateLevel(level);
}

module.exports = {
	supportsColor: getSupportLevel,
	stdout: getSupportLevel(process.stdout),
	stderr: getSupportLevel(process.stderr)
};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             var consumeNumber = require('../../tokenizer/utils').consumeNumber;
var TYPE = require('../../tokenizer').TYPE;

var PERCENTAGE = TYPE.Percentage;

module.exports = {
    name: 'Percentage',
    structure: {
        value: String
    },
    parse: function() {
        var start = this.scanner.tokenStart;
        var numberEnd = consumeNumber(this.scanner.source, start);

        this.eat(PERCENTAGE);

        return {
            type: 'Percentage',
            loc: this.getLocation(start, this.scanner.tokenStart),
            value: this.scanner.source.substring(start, numberEnd)
        };
    },
    generate: function(node) {
        this.chunk(node.value);
        this.chunk('%');
    }
};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 module.exports={A:{A:{"1":"E A B","2":"O D G lB"},B:{"1":"C I F P J K L M KB N R YB T PB"},C:{"1":"0 1 2 3 4 5 6 7 8 9 vB OB H Y O D G E A B C I F P J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB NB GB HB IB JB Q LB FB W V U QB RB SB TB UB VB WB M KB N sB R kB jB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 H Y O D G E A B C I F P J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB NB GB HB IB JB Q LB FB W V U QB RB SB TB UB VB WB M KB N R YB T PB eB cB 2B"},E:{"1":"H Y O D G E A B C I F fB gB hB iB ZB S X mB nB","16":"dB aB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C P J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB Q LB FB W V U oB pB qB rB S XB tB X"},G:{"1":"G F MB wB xB yB zB 0B 1B bB 3B 4B 5B 6B 7B 8B 9B AC BC","16":"aB uB"},H:{"1":"CC"},I:{"1":"OB H N DC EC FC GC MB HC IC"},J:{"1":"D A"},K:{"1":"A B C DB S XB X"},L:{"1":"T"},M:{"1":"M"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"H KC LC MC NC OC ZB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"TC"}},B:2,C:"CSS namespaces"};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Ethereum (and ilk) Network Definitions
======================================

This sub-module is part of the [ethers project](https://github.com/ethers-io/ethers.js).

It is responsible for tracking common networks along with important
parameters for each.

For more information, see the [documentation](https://docs.ethers.io/v5/api/providers/types/#providers-Network).

Importing
---------

Most users will prefer to use the [umbrella package](https://www.npmjs.com/package/ethers),
but for those with more specific needs, individual components can be imported.

```javascript
const {

    getNetwork,

    // Types

    Network,
    Networkish

} = require("@ethersproject/networks");
```


License
-------

MIT License
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            {"version":3,"file":"http_proxy.js","sourceRoot":"","sources":["../../src/http_proxy.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;GAeG;;;AAEH,uCAAgC;AAChC,2CAA2C;AAC3C,yCAAiD;AAEjD,6BAA6B;AAC7B,2BAA2B;AAC3B,qCAAqC;AACrC,6CAIsB;AAEtB,6CAA6E;AAC7E,6BAA0B;AAE1B,MAAM,WAAW,GAAG,OAAO,CAAC;AAE5B,SAAS,KAAK,CAAC,IAAY;IACzB,OAAO,CAAC,KAAK,CAAC,wBAAY,CAAC,KAAK,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;AACvD,CAAC;AAOD,SAAS,YAAY;IACnB,IAAI,QAAQ,GAAG,EAAE,CAAC;IAClB,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB;;;OAGG;IACH,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE;QAC1B,MAAM,GAAG,YAAY,CAAC;QACtB,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC;KACnC;SAAM,IAAI,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE;QAClC,MAAM,GAAG,aAAa,CAAC;QACvB,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;KACpC;SAAM,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE;QACjC,MAAM,GAAG,YAAY,CAAC;QACtB,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC;KACnC;SAAM;QACL,OAAO,EAAE,CAAC;KACX;IACD,IAAI,QAAa,CAAC;IAClB,IAAI;QACF,QAAQ,GAAG,IAAI,SAAG,CAAC,QAAQ,CAAC,CAAC;KAC9B;IAAC,OAAO,CAAC,EAAE;QACV,aAAG,CAAC,wBAAY,CAAC,KAAK,EAAE,0BAA0B,MAAM,WAAW,CAAC,CAAC;QACrE,OAAO,EAAE,CAAC;KACX;IACD,IAAI,QAAQ,CAAC,QAAQ,KAAK,OAAO,EAAE;QACjC,aAAG,CACD,wBAAY,CAAC,KAAK,EAClB,IAAI,QAAQ,CAAC,QAAQ,qCAAqC,CAC3D,CAAC;QACF,OAAO,EAAE,CAAC;KACX;IACD,IAAI,QAAQ,GAAkB,IAAI,CAAC;IACnC,IAAI,QAAQ,CAAC,QAAQ,EAAE;QACrB,IAAI,QAAQ,CAAC,QAAQ,EAAE;YACrB,aAAG,CAAC,wBAAY,CAAC,IAAI,EAAE,6BAA6B,CAAC,CAAC;YACtD,QAAQ,GAAG,GAAG,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,EAAE,CAAC;SACxD;aAAM;YACL,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;SAC9B;KACF;IACD,MAAM,MAAM,GAAc;QACxB,OAAO,EAAE,QAAQ,CAAC,IAAI;KACvB,CAAC;IACF,IAAI,QAAQ,EAAE;QACZ,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC;KACzB;IACD,KAAK,CACH,eAAe,GAAG,MAAM,CAAC,OAAO,GAAG,+BAA+B,GAAG,MAAM,CAC5E,CAAC;IACF,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,SAAS,kBAAkB;IACzB,4EAA4E;IAC5E,IAAI,UAAU,GAAuB,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC;IAC/D,IAAI,MAAM,GAAG,eAAe,CAAC;IAC7B,IAAI,CAAC,UAAU,EAAE;QACf,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;QAClC,MAAM,GAAG,UAAU,CAAC;KACrB;IACD,IAAI,UAAU,EAAE;QACd,KAAK,CAAC,mDAAmD,GAAG,MAAM,CAAC,CAAC;QACpE,OAAO,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KAC9B;SAAM;QACL,OAAO,EAAE,CAAC;KACX;AACH,CAAC;AAOD,SAAgB,YAAY,CAC1B,MAAe,EACf,OAAuB;;IAEvB,MAAM,aAAa,GAAmB;QACpC,MAAM,EAAE,MAAM;QACd,YAAY,EAAE,EAAE;KACjB,CAAC;IACF,IAAI,OAAC,OAAO,CAAC,wBAAwB,CAAC,mCAAI,CAAC,CAAC,KAAK,CAAC,EAAE;QAClD,OAAO,aAAa,CAAC;KACtB;IACD,MAAM,SAAS,GAAG,YAAY,EAAE,CAAC;IACjC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE;QACtB,OAAO,aAAa,CAAC;KACtB;IACD,MAAM,QAAQ,GAAG,0BAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC5C,IAAI,CAAC,QAAQ,EAAE;QACb,OAAO,aAAa,CAAC;KACtB;IACD,MAAM,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC;IACjC,KAAK,MAAM,IAAI,IAAI,kBAAkB,EAAE,EAAE;QACvC,IAAI,IAAI,KAAK,UAAU,EAAE;YACvB,KAAK,CAAC,+CAA+C,GAAG,wBAAW,CAAC,MAAM,CAAC,CAAC,CAAC;YAC7E,OAAO,aAAa,CAAC;SACtB;KACF;IACD,MAAM,YAAY,GAAmB;QACnC,0BAA0B,EAAE,wBAAW,CAAC,MAAM,CAAC;KAChD,CAAC;IACF,IAAI,SAAS,CAAC,KAAK,EAAE;QACnB,YAAY,CAAC,yBAAyB,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC;KAC3D;IACD,OAAO;QACL,MAAM,EAAE;YACN,MAAM,EAAE,KAAK;YACb,IAAI,EAAE,SAAS,CAAC,OAAO;SACxB;QACD,YAAY,EAAE,YAAY;KAC3B,CAAC;AACJ,CAAC;AAvCD,oCAuCC;AAOD,SAAgB,oBAAoB,CAClC,OAA0B,EAC1B,cAA8B,EAC9B,iBAAwC;IAExC,IAAI,CAAC,CAAC,0BAA0B,IAAI,cAAc,CAAC,EAAE;QACnD,OAAO,OAAO,CAAC,OAAO,CAAwB,EAAE,CAAC,CAAC;KACnD;IACD,MAAM,UAAU,GAAG,cAAc,CAAC,0BAA0B,CAAW,CAAC;IACxE,MAAM,YAAY,GAAG,qBAAQ,CAAC,UAAU,CAAC,CAAC;IAC1C,IAAI,YAAY,KAAK,IAAI,EAAE;QACzB,OAAO,OAAO,CAAC,OAAO,CAAwB,EAAE,CAAC,CAAC;KACnD;IACD,MAAM,OAAO,GAAwB;QACnC,MAAM,EAAE,SAAS;QACjB,IAAI,EAAE,YAAY,CAAC,IAAI;KACxB,CAAC;IACF,+CAA+C;IAC/C,IAAI,mCAAsB,CAAC,OAAO,CAAC,EAAE;QACnC,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QAC5B,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;KAC7B;SAAM;QACL,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC;KACnC;IACD,IAAI,yBAAyB,IAAI,cAAc,EAAE;QAC/C,OAAO,CAAC,OAAO,GAAG;YAChB,qBAAqB,EACnB,QAAQ;gBACR,MAAM,CAAC,IAAI,CACT,cAAc,CAAC,yBAAyB,CAAW,CACpD,CAAC,QAAQ,CAAC,QAAQ,CAAC;SACvB,CAAC;KACH;IACD,MAAM,kBAAkB,GAAG,sCAAyB,CAAC,OAAO,CAAC,CAAC;IAC9D,KAAK,CAAC,cAAc,GAAG,kBAAkB,GAAG,iBAAiB,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;IAC9E,OAAO,IAAI,OAAO,CAAwB,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC5D,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACtC,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE;;YAC5C,OAAO,CAAC,kBAAkB,EAAE,CAAC;YAC7B,MAAM,CAAC,kBAAkB,EAAE,CAAC;YAC5B,IAAI,GAAG,CAAC,UAAU,KAAK,GAAG,EAAE;gBAC1B,KAAK,CACH,4BAA4B;oBAC1B,OAAO,CAAC,IAAI;oBACZ,iBAAiB;oBACjB,kBAAkB,CACrB,CAAC;gBACF,IAAI,eAAe,IAAI,iBAAiB,EAAE;oBACxC;;;wFAGoE;oBACpE,MAAM,UAAU,GAAG,8BAAmB,CAAC,YAAY,CAAC,CAAC;oBACrD,MAAM,QAAQ,GAAG,0BAAa,CAAC,UAAU,CAAC,CAAC;oBAC3C,MAAM,UAAU,SAAG,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,IAAI,mCAAI,UAAU,CAAC;oBAEhD,MAAM,GAAG,GAAG,GAAG,CAAC,OAAO,iBAEnB,IAAI,EAAE,UAAU,EAChB,UAAU,EAAE,UAAU,EACtB,MAAM,EAAE,MAAM,IACX,iBAAiB,GAEtB,GAAG,EAAE;wBACH,KAAK,CACH,+CAA+C;4BAC7C,OAAO,CAAC,IAAI;4BACZ,iBAAiB;4BACjB,kBAAkB,CACrB,CAAC;wBACF,OAAO,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE,YAAY,EAAE,CAAC,CAAC;oBACrD,CAAC,CACF,CAAC;oBACF,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;wBACnB,MAAM,EAAE,CAAC;oBACX,CAAC,CAAC,CAAC;iBACJ;qBAAM;oBACL,OAAO,CAAC;wBACN,MAAM;wBACN,UAAU,EAAE,YAAY;qBACzB,CAAC,CAAC;iBACJ;aACF;iBAAM;gBACL,aAAG,CACD,wBAAY,CAAC,KAAK,EAClB,uBAAuB;oBACrB,OAAO,CAAC,IAAI;oBACZ,iBAAiB;oBACjB,kBAAkB;oBAClB,eAAe;oBACf,GAAG,CAAC,UAAU,CACjB,CAAC;gBACF,MAAM,EAAE,CAAC;aACV;QACH,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,EAAE;YAC5B,OAAO,CAAC,kBAAkB,EAAE,CAAC;YAC7B,aAAG,CACD,wBAAY,CAAC,KAAK,EAClB,6BAA6B;gBAC3B,kBAAkB;gBAClB,cAAc;gBACd,GAAG,CAAC,OAAO,CACd,CAAC;YACF,MAAM,EAAE,CAAC;QACX,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,GAAG,EAAE,CAAC;IAChB,CAAC,CAAC,CAAC;AACL,CAAC;AA5GD,oDA4GC"}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    "use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));

var _default = (0, _createSvgIcon.default)(_react.default.createElement(_react.default.Fragment, null, _react.default.createElement("path", {
  fill: "none",
  d: "M0 0h24v24H0V0z"
}), _react.default.createElement("g", null, _react.default.createElement("path", {
  d: "M8 6c-3.31 0-6 2.69-6 6s2.69 6 6 6c2.35 0 4.38-1.36 5.36-3.32l.01-.01c.4-.81.63-1.71.63-2.67 0-3.31-2.69-6-6-6zm2.3 10l-.7-2H6.4l-.7 2H3.8L7 7h2l3.2 9h-1.9z",
  opacity: ".3"
}), _react.default.createElement("path", {
  d: "M6.85 12.65h2.3L8 9z",
  opacity: ".3"
}), _react.default.createElement("path", {
  d: "M7 7l-3.2 9h1.9l.7-2h3.2l.7 2h1.9L9 7H7zm-.15 5.65L8 9l1.15 3.65h-2.3z"
}), _react.default.createElement("path", {
  d: "M20.8 13.29L19.3 7h-1.6l-1.49 6.29L15 7h-.76l-.01.01C12.76 5.18 10.53 4 8 4c-4.42 0-8 3.58-8 8s3.58 8 8 8c2.96 0 5.55-1.61 6.93-4 .03-.06.05-.12.08-.18.05-.08.09-.17.14-.25l.1.43H17l1.5-6.1L20 16h1.75l2.05-9H22l-1.2 6.29zm-7.43 1.38C12.38 16.64 10.35 18 8 18c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6c0 .96-.23 1.86-.63 2.67z"
}))), 'WbAutoTwoTone');

exports.default = _default;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             "use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));

var _default = (0, _createSvgIcon.default)(_react.default.createElement(_react.default.Fragment, null, _react.default.createElement("path", {
  fill: "none",
  d: "M0 0h24v24H0V0z"
}), _react.default.createElement("g", null, _react.default.createElement("path", {
  d: "M20.94 11c-.46-4.17-3.77-7.48-7.94-7.94V1h-2v2.06c-.98.11-1.91.38-2.77.78l1.53 1.53C10.46 5.13 11.22 5 12 5c3.87 0 7 3.13 7 7 0 .79-.13 1.54-.37 2.24l1.53 1.53c.4-.86.67-1.79.78-2.77H23v-2h-2.06zM3 4.27l2.04 2.04C3.97 7.62 3.26 9.23 3.06 11H1v2h2.06c.46 4.17 3.77 7.48 7.94 7.94V23h2v-2.06c1.77-.2 3.38-.91 4.69-1.98L19.73 21l1.41-1.41L4.41 2.86 3 4.27zm13.27 13.27C15.09 18.45 13.61 19 12 19c-3.87 0-7-3.13-7-7 0-1.61.55-3.09 1.46-4.27l9.81 9.81z"
}))), 'GpsOffTwoTone');

exports.default = _default;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   INDX( 	                 (   ®  Ë      @ t   ÷                ∆    Ä p     ˇ≈    õÎ¡÷ —6ãç¨÷W§Î¡÷:ˆ¯.ƒ÷                        c r e a t e G e n e r a t e C l a s s N a m e ∆    p Z     ˇ≈    xí§Î¡÷ —6ãç¨÷Ìá≠Î¡÷ú˛¯.ƒ÷                        c r e a t e S t y l e s       ∆    x b     ˇ≈    Ÿ¿≠Î¡÷ÄÓbèç¨÷Œ†∫Î¡÷GÄ ¯.ƒ÷                        g e t S t y l e s C r e a t o r       ∆    p \     ˇ≈    }ﬁ∫Î¡÷ —6ãç¨÷‰]øÎ¡÷zø˝˜.ƒ÷                        g e @ T h e m e P r o p s      ∆    h R     ˇ≈    ÖáòÎ¡÷ ö8∫mØóªöÎ¡÷f¢Å\5ƒ÷       È               i n d e x . j s       ∆    h T     ˇ≈    #ñøÎ¡÷Ä¡1éç¨÷ã≈Î¡÷#›˚˜.ƒ÷                       	 j s s P r e s e t     ∆    h V     ˇ≈    ’◊≈Î¡÷ÄÓbèç¨÷˛’Î¡÷ÿÅ¯˜.ƒ÷                       
 m a k e S t y l e s   ∆    p Z     ˇ≈    xO’Î¡÷ÄÓbèç¨÷ÌÿÎ¡÷ú'ˆ˜.ƒ÷                        m e r g e C l a s s e s       ∆    x d     ˇ≈    #ŸÎ¡÷ÄÓbèç¨÷ë∂ﬂÎ¡÷‰öÛ˜.ƒ÷      @                 S e r v e r S t y l e S h e e t s     ∆    ` N     ˇ≈    QﬂÎ¡÷ÄÓbèç¨÷ë
ËÎ¡÷l˜.ƒ÷                        s t y l e d    ∆    p ^     ˇ≈    ÈÅËÎ¡÷ Ö˚èç¨÷¥ÔÎ¡÷+≤Ï˜.ƒ÷                        S t y l e s P r o v i d e r   #∆    p \     ˇ≈    àÏÔÎ¡÷Äîêç¨÷gˇÎ¡÷Ó¶Ë˜.ƒ÷                        T h e m e P r o v i d e r     '∆    h R     ˇ≈    ˇ#ˇÎ¡÷Äîêç¨÷feÏ¡÷|∫óÏ¡÷                        u s e T h e m e       +∆    h V     ˇ≈    ÷≠Ï¡@  ≤,ëç¨÷ábÏ¡÷t˛·˜.ƒ÷                       
 w i t h S t y l e s   .∆    h T     ˇ≈    •©Ï¡÷ ≤,ëç¨÷>•Ï¡÷j}ﬂ˜.ƒ÷                       	 w i t h T h e m e                                                                                                                                                                                                                                                                                                                                                 @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               @ {"ast":null,"code":"var ListCache = require('./_ListCache'),\n    Map = require('./_Map'),\n    MapCache = require('./_MapCache');\n/** Used as the size to enable large array optimizations. */\n\n\nvar LARGE_ARRAY_SIZE = 200;\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\n\nfunction stackSet(key, value) {\n  var data = this.__data__;\n\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n\n    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n\n    data = this.__data__ = new MapCache(pairs);\n  }\n\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nmodule.exports = stackSet;","map":null,"metadata":{},"sourceType":"script"}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              'use strict'

const { Buffer } = require('buffer')
const Benchmark = require('benchmark')
if (typeof window !== 'undefined') {
  window.Benchmark = Benchmark
}

const protobuf = require('protocol-buffers')
const protonsNpm = require('protons')
const protons = require('../')
const proto = require('./bench.proto')
const messages = protobuf(proto)
const messagesBuf = protons(proto)
const messagesNpm = protonsNpm(proto)

const EXAMPLE = {
  foo: 'hello',
  hello: 42,
  payload: Buffer.from('a'),
  meh: {
    b: {
      tmp: {
        baz: 1000
      }
    },
    lol: 'lol'
  }
}

const suite = new Benchmark.Suite()

function add (name, encode, decode) {
  const EXAMPLE_BUFFER = encode(EXAMPLE)

  suite
    .add(name + ' (encode)', function () {
      return encode(EXAMPLE)
    })
    .add(name + ' (decode)', function () {
      return decode(EXAMPLE_BUFFER)
    })
    .add(name + ' (encode + decode)', function () {
      return decode(encode(EXAMPLE))
    })
}

add('JSON', JSON.stringify, JSON.parse)
add(`protocol-buffers@${require('protocol-buffers/package.json').version}`, messages.Test.encode, messages.Test.decode)
add(`protons@${require('protons/package.json').version}`, messagesNpm.Test.encode, messagesNpm.Test.decode)
add('local', messagesBuf.Test.encode, messagesBuf.Test.decode)

suite
  .on('cycle', (e) => {
    console.log(String(e.target))
  })
  .run()
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          'use strict';

var forEach = require('foreach');
var debug = require('object-inspect');

var assertRecord = require('../../helpers/assertRecord');
var v = require('./values');

module.exports = function assertRecordTests(ES, test) {
	test('Property Descriptor', function (t) {
		var record = 'Property Descriptor';

		forEach(v.nonUndefinedPrimitives, function (primitive) {
			t['throws'](
				function () { assertRecord(ES.Type, record, 'arg', primitive); },
				TypeError,
				debug(primitive) + ' is not a Property Descriptor'
			);
		});

		t['throws'](
			function () { assertRecord(ES.Type, record, 'arg', { invalid: true }); },
			TypeError,
			'invalid keys not allowed on a Property Descriptor'
		);

		t.doesNotThrow(
			function () { assertRecord(ES.Type, record, 'arg', {}); },
			'empty object is an incomplete Property Descriptor'
		);

		t.doesNotThrow(
			function () { assertRecord(ES.Type, record, 'arg', v.accessorDescriptor()); },
			'accessor descriptor is a Property Descriptor'
		);

		t.doesNotThrow(
			function () { assertRecord(ES.Type, record, 'arg', v.mutatorDescriptor()); },
			'mutator descriptor is a Property Descriptor'
		);

		t.doesNotThrow(
			function () { assertRecord(ES.Type, record, 'arg', v.dataDescriptor()); },
			'data descriptor is a Property Descriptor'
		);

		t.doesNotThrow(
			function () { assertRecord(ES.Type, record, 'arg', v.genericDescriptor()); },
			'generic descriptor is a Property Descriptor'
		);

		t['throws'](
			function () { assertRecord(ES.Type, record, 'arg', v.bothDescriptor()); },
			TypeError,
			'a Property Descriptor can not be both a Data and an Accessor Descriptor'
		);

		t.end();
	});
};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Long;

/**
 * wasm optimizations, to do native i64 multiplication and divide
 */
var wasm = null;

try {
  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
} catch (e) {} // no wasm support :(

/**
 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
 *  See the from* functions below for more convenient ways of constructing Longs.
 * @exports Long
 * @class A Long class for representing a 64 bit two's-complement integer value.
 * @param {number} low The low (signed) 32 bits of the long
 * @param {number} high The high (signed) 32 bits of the long
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @constructor
 */


function Long(low, high, unsigned) {
  /**
   * The low 32 bits as a signed value.
   * @type {number}
   */
  this.low = low | 0;
  /**
   * The high 32 bits as a signed value.
   * @type {number}
   */

  this.high = high | 0;
  /**
   * Whether unsigned or not.
   * @type {boolean}
   */

  this.unsigned = !!unsigned;
} // The internal representation of a long is the two given signed, 32-bit values.
// We use 32-bit pieces because these are the size of integers on which
// Javascript performs bit-operations.  For operations like addition and
// multiplication, we split each number into 16 bit pieces, which can easily be
// multiplied within Javascript's floating-point representation without overflow
// or change in sign.
//
// In the algorithms below, we frequently reduce the negative case to the
// positive case by negating the input(s) and then post-processing the result.
// Note that we must ALWAYS check specially whether those values are MIN_VALUE
// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
// a positive number, it overflows back into a negative).  Not handling this
// case would often result in infinite recursion.
//
// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
// methods on which they depend.

/**
 * An indicator used to reliably determine if an object is a Long or not.
 * @type {boolean}
 * @const
 * @private
 */


Long.prototype.__isLong__;
Object.defineProperty(Long.prototype, "__isLong__", {
  value: true
});
/**
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 * @inner
 */

function isLong(obj) {
  return (obj && obj["__isLong__"]) === true;
}
/**
 * Tests if the specified object is a Long.
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 */


Long.isLong = isLong;
/**
 * A cache of the Long representations of small integer values.
 * @type {!Object}
 * @inner
 */

var INT_CACHE = {};
/**
 * A cache of the Long representations of small unsigned integer values.
 * @type {!Object}
 * @inner
 */

var UINT_CACHE = {};
/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */

function fromInt(value, unsigned) {
  var obj, cachedObj, cache;

  if (unsigned) {
    value >>>= 0;

    if (cache = 0 <= value && value < 256) {
      cachedObj = UINT_CACHE[value];
      if (cachedObj) return cachedObj;
    }

    obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
    if (cache) UINT_CACHE[value] = obj;
    return obj;
  } else {
    value |= 0;

    if (cache = -128 <= value && value < 128) {
      cachedObj = INT_CACHE[value];
      if (cachedObj) return cachedObj;
    }

    obj = fromBits(value, value < 0 ? -1 : 0, false);
    if (cache) INT_CACHE[value] = obj;
    return obj;
  }
}
/**
 * Returns a Long representing the given 32 bit integer value.
 * @function
 * @param {number} value The 32 bit integer in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */


Long.fromInt = fromInt;
/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */

function fromNumber(value, unsigned) {
  if (isNaN(value)) return unsigned ? UZERO : ZERO;

  if (unsigned) {
    if (value < 0) return UZERO;
    if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;
  } else {
    if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;
    if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;
  }

  if (value < 0) return fromNumber(-value, unsigned).neg();
  return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
}
/**
 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
 * @function
 * @param {number} value The number in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */


Long.fromNumber = fromNumber;
/**
 * @param {number} lowBits
 * @param {number} highBits
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */

function fromBits(lowBits, highBits, unsigned) {
  return new Long(lowBits, highBits, unsigned);
}
/**
 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
 *  assumed to use 32 bits.
 * @function
 * @param {number} lowBits The low 32 bits
 * @param {number} highBits The high 32 bits
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */


Long.fromBits = fromBits;
/**
 * @function
 * @param {number} base
 * @param {number} exponent
 * @returns {number}
 * @inner
 */

var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

/**
 * @param {string} str
 * @param {(boolean|number)=} unsigned
 * @param {number=} radix
 * @returns {!Long}
 * @inner
 */

function fromString(str, unsigned, radix) {
  if (str.length === 0) throw Error('empty string');
  if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity") return ZERO;

  if (typeof unsigned === 'number') {
    // For goog.math.long compatibility
    radix = unsigned, unsigned = false;
  } else {
    unsigned = !!unsigned;
  }

  radix = radix || 10;
  if (radix < 2 || 36 < radix) throw RangeError('radix');
  var p;
  if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {
    return fromString(str.substring(1), unsigned, radix).neg();
  } // Do several (8) digits each time through the loop, so as to
  // minimize the calls to the very expensive emulated div.

  var radixToPower = fromNumber(pow_dbl(radix, 8));
  var result = ZERO;

  for (var i = 0; i < str.length; i += 8) {
    var size = Math.min(8, str.length - i),
        value = parseInt(str.substring(i, i + size), radix);

    if (size < 8) {
      var power = fromNumber(pow_dbl(radix, size));
      result = result.mul(power).add(fromNumber(value));
    } else {
      result = result.mul(radixToPower);
      result = result.add(fromNumber(value));
    }
  }

  result.unsigned = unsigned;
  return result;
}
/**
 * Returns a Long representation of the given string, written using the specified radix.
 * @function
 * @param {string} str The textual representation of the Long
 * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
 * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
 * @returns {!Long} The corresponding Long value
 */


Long.fromString = fromString;
/**
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */

function fromValue(val, unsigned) {
  if (typeof val === 'number') return fromNumber(val, unsigned);
  if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:

  return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
}
/**
 * Converts the specified value to a Long using the appropriate from* function for its type.
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long}
 */


Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
// no runtime penalty for these.

/**
 * @type {number}
 * @const
 * @inner
 */

var TWO_PWR_16_DBL = 1 << 16;
/**
 * @type {number}
 * @const
 * @inner
 */

var TWO_PWR_24_DBL = 1 << 24;
/**
 * @type {number}
 * @const
 * @inner
 */

var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
/**
 * @type {number}
 * @const
 * @inner
 */

var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
/**
 * @type {number}
 * @const
 * @inner
 */

var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
/**
 * @type {!Long}
 * @const
 * @inner
 */

var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);
/**
 * @type {!Long}
 * @inner
 */

var ZERO = fromInt(0);
/**
 * Signed zero.
 * @type {!Long}
 */

Long.ZERO = ZERO;
/**
 * @type {!Long}
 * @inner
 */

var UZERO = fromInt(0, true);
/**
 * Unsigned zero.
 * @type {!Long}
 */

Long.UZERO = UZERO;
/**
 * @type {!Long}
 * @inner
 */

var ONE = fromInt(1);
/**
 * Signed one.
 * @type {!Long}
 */

Long.ONE = ONE;
/**
 * @type {!Long}
 * @inner
 */

var UONE = fromInt(1, true);
/**
 * Unsigned one.
 * @type {!Long}
 */

Long.UONE = UONE;
/**
 * @type {!Long}
 * @inner
 */

var NEG_ONE = fromInt(-1);
/**
 * Signed negative one.
 * @type {!Long}
 */

Long.NEG_ONE = NEG_ONE;
/**
 * @type {!Long}
 * @inner
 */

var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);
/**
 * Maximum signed value.
 * @type {!Long}
 */

Long.MAX_VALUE = MAX_VALUE;
/**
 * @type {!Long}
 * @inner
 */

var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);
/**
 * Maximum unsigned value.
 * @type {!Long}
 */

Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;
/**
 * @type {!Long}
 * @inner
 */

var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);
/**
 * Minimum signed value.
 * @type {!Long}
 */

Long.MIN_VALUE = MIN_VALUE;
/**
 * @alias Long.prototype
 * @inner
 */

var LongPrototype = Long.prototype;
/**
 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
 * @this {!Long}
 * @returns {number}
 */

LongPrototype.toInt = function toInt() {
  return this.unsigned ? this.low >>> 0 : this.low;
};
/**
 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
 * @this {!Long}
 * @returns {number}
 */


LongPrototype.toNumber = function toNumber() {
  if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
  return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
};
/**
 * Converts the Long to a string written in the specified radix.
 * @this {!Long}
 * @param {number=} radix Radix (2-36), defaults to 10
 * @returns {string}
 * @override
 * @throws {RangeError} If `radix` is out of range
 */


LongPrototype.toString = function toString(radix) {
  radix = radix || 10;
  if (radix < 2 || 36 < radix) throw RangeError('radix');
  if (this.isZero()) return '0';

  if (this.isNegative()) {
    // Unsigned Longs are never negative
    if (this.eq(MIN_VALUE)) {
      // We need to change the Long value before it can be negated, so we remove
      // the bottom-most digit in this base and then recurse to do the rest.
      var radixLong = fromNumber(radix),
          div = this.div(radixLong),
          rem1 = div.mul(radixLong).sub(this);
      return div.toString(radix) + rem1.toInt().toString(radix);
    } else return '-' + this.neg().toString(radix);
  } // Do several (6) digits each time through the loop, so as to
  // minimize the calls to the very expensive emulated div.


  var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
      rem = this;
  var result = '';

  while (true) {
    var remDiv = rem.div(radixToPower),
        intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
        digits = intval.toString(radix);
    rem = remDiv;
    if (rem.isZero()) return digits + result;else {
      while (digits.length < 6) digits = '0' + digits;

      result = '' + digits + result;
    }
  }
};
/**
 * Gets the high 32 bits as a signed integer.
 * @this {!Long}
 * @returns {number} Signed high bits
 */


LongPrototype.getHighBits = function getHighBits() {
  return this.high;
};
/**
 * Gets the high 32 bits as an unsigned integer.
 * @this {!Long}
 * @returns {number} Unsigned high bits
 */


LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
  return this.high >>> 0;
};
/**
 * Gets the low 32 bits as a signed integer.
 * @this {!Long}
 * @returns {number} Signed low bits
 */


LongPrototype.getLowBits = function getLowBits() {
  return this.low;
};
/**
 * Gets the low 32 bits as an unsigned integer.
 * @this {!Long}
 * @returns {number} Unsigned low bits
 */


LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
  return this.low >>> 0;
};
/**
 * Gets the number of bits needed to represent the absolute value of this Long.
 * @this {!Long}
 * @returns {number}
 */


LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
  if (this.isNegative()) // Unsigned Longs are never negative
    return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
  var val = this.high != 0 ? this.high : this.low;

  for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;

  return this.high != 0 ? bit + 33 : bit + 1;
};
/**
 * Tests if this Long's value equals zero.
 * @this {!Long}
 * @returns {boolean}
 */


LongPrototype.isZero = function isZero() {
  return this.high === 0 && this.low === 0;
};
/**
 * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
 * @returns {boolean}
 */


LongPrototype.eqz = LongPrototype.isZero;
/**
 * Tests if this Long's value is negative.
 * @this {!Long}
 * @returns {boolean}
 */

LongPrototype.isNegative = function isNegative() {
  return !this.unsigned && this.high < 0;
};
/**
 * Tests if this Long's value is positive.
 * @this {!Long}
 * @returns {boolean}
 */


LongPrototype.isPositive = function isPositive() {
  return this.unsigned || this.high >= 0;
};
/**
 * Tests if this Long's value is odd.
 * @this {!Long}
 * @returns {boolean}
 */


LongPrototype.isOdd = function isOdd() {
  return (this.low & 1) === 1;
};
/**
 * Tests if this Long's value is even.
 * @this {!Long}
 * @returns {boolean}
 */


LongPrototype.isEven = function isEven() {
  return (this.low & 1) === 0;
};
/**
 * Tests if this Long's value equals the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */


LongPrototype.equals = function equals(other) {
  if (!isLong(other)) other = fromValue(other);
  if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;
  return this.high === other.high && this.low === other.low;
};
/**
 * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */


LongPrototype.eq = LongPrototype.equals;
/**
 * Tests if this Long's value differs from the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */

LongPrototype.notEquals = function notEquals(other) {
  return !this.eq(
  /* validates */
  other);
};
/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */


LongPrototype.neq = LongPrototype.notEquals;
/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */

LongPrototype.ne = LongPrototype.notEquals;
/**
 * Tests if this Long's value is less than the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */

LongPrototype.lessThan = function lessThan(other) {
  return this.comp(
  /* validates */
  other) < 0;
};
/**
 * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */


LongPrototype.lt = LongPrototype.lessThan;
/**
 * Tests if this Long's value is less than or equal the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */

LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
  return this.comp(
  /* validates */
  other) <= 0;
};
/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */


LongPrototype.lte = LongPrototype.lessThanOrEqual;
/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */

LongPrototype.le = LongPrototype.lessThanOrEqual;
/**
 * Tests if this Long's value is greater than the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */

LongPrototype.greaterThan = function greaterThan(other) {
  return this.comp(
  /* validates */
  other) > 0;
};
/**
 * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */


LongPrototype.gt = LongPrototype.greaterThan;
/**
 * Tests if this Long's value is greater than or equal the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */

LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
  return this.comp(
  /* validates */
  other) >= 0;
};
/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */


LongPrototype.gte = LongPrototype.greaterThanOrEqual;
/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */

LongPrototype.ge = LongPrototype.greaterThanOrEqual;
/**
 * Compares this Long's value with the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */

LongPrototype.compare = function compare(other) {
  if (!isLong(other)) other = fromValue(other);
  if (this.eq(other)) return 0;
  var thisNeg = this.isNegative(),
      otherNeg = other.isNegative();
  if (thisNeg && !otherNeg) return -1;
  if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same

  if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned

  return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
};
/**
 * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */


LongPrototype.comp = LongPrototype.compare;
/**
 * Negates this Long's value.
 * @this {!Long}
 * @returns {!Long} Negated Long
 */

LongPrototype.negate = function negate() {
  if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;
  return this.not().add(ONE);
};
/**
 * Negates this Long's value. This is an alias of {@link Long#negate}.
 * @function
 * @returns {!Long} Negated Long
 */


LongPrototype.neg = LongPrototype.negate;
/**
 * Returns the sum of this and the specified Long.
 * @this {!Long}
 * @param {!Long|number|string} addend Addend
 * @returns {!Long} Sum
 */

LongPrototype.add = function add(addend) {
  if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

  var a48 = this.high >>> 16;
  var a32 = this.high & 0xFFFF;
  var a16 = this.low >>> 16;
  var a00 = this.low & 0xFFFF;
  var b48 = addend.high >>> 16;
  var b32 = addend.high & 0xFFFF;
  var b16 = addend.low >>> 16;
  var b00 = addend.low & 0xFFFF;
  var c48 = 0,
      c32 = 0,
      c16 = 0,
      c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 0xFFFF;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 0xFFFF;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 0xFFFF;
  c48 += a48 + b48;
  c48 &= 0xFFFF;
  return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
};
/**
 * Returns the difference of this and the specified Long.
 * @this {!Long}
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */


LongPrototype.subtract = function subtract(subtrahend) {
  if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);
  return this.add(subtrahend.neg());
};
/**
 * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
 * @function
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */


LongPrototype.sub = LongPrototype.subtract;
/**
 * Returns the product of this and the specified Long.
 * @this {!Long}
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */

LongPrototype.multiply = function multiply(multiplier) {
  if (this.isZero()) return ZERO;
  if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present

  if (wasm) {
    var low = wasm["mul"](this.low, this.high, multiplier.low, multiplier.high);
    return fromBits(low, wasm["get_high"](), this.unsigned);
  }

  if (multiplier.isZero()) return ZERO;
  if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;
  if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;

  if (this.isNegative()) {
    if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();
  } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication


  if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
  // We can skip products that would overflow.

  var a48 = this.high >>> 16;
  var a32 = this.high & 0xFFFF;
  var a16 = this.low >>> 16;
  var a00 = this.low & 0xFFFF;
  var b48 = multiplier.high >>> 16;
  var b32 = multiplier.high & 0xFFFF;
  var b16 = multiplier.low >>> 16;
  var b00 = multiplier.low & 0xFFFF;
  var c48 = 0,
      c32 = 0,
      c16 = 0,
      c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 0xFFFF;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 0xFFFF;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 0xFFFF;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 0xFFFF;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 0xFFFF;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 0xFFFF;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 0xFFFF;
  return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
};
/**
 * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
 * @function
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */


LongPrototype.mul = LongPrototype.multiply;
/**
 * Returns this Long divided by the specified. The result is signed if this Long is signed or
 *  unsigned if this Long is unsigned.
 * @this {!Long}
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */

LongPrototype.divide = function divide(divisor) {
  if (!isLong(divisor)) divisor = fromValue(divisor);
  if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present

  if (wasm) {
    // guard against signed division overflow: the largest
    // negative number / -1 would be 1 larger than the largest
    // positive number, due to two's complement.
    if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {
      // be consistent with non-wasm code path
      return this;
    }

    var low = (this.unsigned ? wasm["div_u"] : wasm["div_s"])(this.low, this.high, divisor.low, divisor.high);
    return fromBits(low, wasm["get_high"](), this.unsigned);
  }

  if (this.isZero()) return this.unsigned ? UZERO : ZERO;
  var approx, rem, res;

  if (!this.unsigned) {
    // This section is only relevant for signed longs and is derived from the
    // closure library as a whole.
    if (this.eq(MIN_VALUE)) {
      if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE
      else if (divisor.eq(MIN_VALUE)) return ONE;else {
          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
          var halfThis = this.shr(1);
          approx = halfThis.div(divisor).shl(1);

          if (approx.eq(ZERO)) {
            return divisor.isNegative() ? ONE : NEG_ONE;
          } else {
            rem = this.sub(divisor.mul(approx));
            res = approx.add(rem.div(divisor));
            return res;
          }
        }
    } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;

    if (this.isNegative()) {
      if (divisor.isNegative()) return this.neg().div(divisor.neg());
      return this.neg().div(divisor).neg();
    } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();

    res = ZERO;
  } else {
    // The algorithm below has not been made for unsigned longs. It's therefore
    // required to take special care of the MSB prior to running it.
    if (!divisor.unsigned) divisor = divisor.toUnsigned();
    if (divisor.gt(this)) return UZERO;
    if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
      return UONE;
    res = UZERO;
  } // Repeat the following until the remainder is less than other:  find a
  // floating-point that approximates remainder / other *from below*, add this
  // into the result, and subtract it from the remainder.  It is critical that
  // the approximate value is less than or equal to the real value so that the
  // remainder never becomes negative.


  rem = this;

  while (rem.gte(divisor)) {
    // Approximate the result of division. This may be a little greater or
    // smaller than the actual value.
    approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or
    // the smallest non-fractional digit, whichever is larger.

    var log2 = Math.ceil(Math.log(approx) / Math.LN2),
        delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),
        // Decrease the approximation until it is smaller than the remainder.  Note
    // that if it is too large, the product overflows and is negative.
    approxRes = fromNumber(approx),
        approxRem = approxRes.mul(divisor);

    while (approxRem.isNegative() || approxRem.gt(rem)) {
      approx -= delta;
      approxRes = fromNumber(approx, this.unsigned);
      approxRem = approxRes.mul(divisor);
    } // We know the answer can't be zero... and actually, zero would cause
    // infinite recursion since we would make no progress.


    if (approxRes.isZero()) approxRes = ONE;
    res = res.add(approxRes);
    rem = rem.sub(approxRem);
  }

  return res;
};
/**
 * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */


LongPrototype.div = LongPrototype.divide;
/**
 * Returns this Long modulo the specified.
 * @this {!Long}
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */

LongPrototype.modulo = function modulo(divisor) {
  if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present

  if (wasm) {
    var low = (this.unsigned ? wasm["rem_u"] : wasm["rem_s"])(this.low, this.high, divisor.low, divisor.high);
    return fromBits(low, wasm["get_high"](), this.unsigned);
  }

  return this.sub(this.div(divisor).mul(divisor));
};
/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */


LongPrototype.mod = LongPrototype.modulo;
/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */

LongPrototype.rem = LongPrototype.modulo;
/**
 * Returns the bitwise NOT of this Long.
 * @this {!Long}
 * @returns {!Long}
 */

LongPrototype.not = function not() {
  return fromBits(~this.low, ~this.high, this.unsigned);
};
/**
 * Returns the bitwise AND of this Long and the specified.
 * @this {!Long}
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */


LongPrototype.and = function and(other) {
  if (!isLong(other)) other = fromValue(other);
  return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
};
/**
 * Returns the bitwise OR of this Long and the specified.
 * @this {!Long}
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */


LongPrototype.or = function or(other) {
  if (!isLong(other)) other = fromValue(other);
  return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
};
/**
 * Returns the bitwise XOR of this Long and the given one.
 * @this {!Long}
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */


LongPrototype.xor = function xor(other) {
  if (!isLong(other)) other = fromValue(other);
  return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
};
/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @this {!Long}
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */


LongPrototype.shiftLeft = function shiftLeft(numBits) {
  if (isLong(numBits)) numBits = numBits.toInt();
  if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);
};
/**
 * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */


LongPrototype.shl = LongPrototype.shiftLeft;
/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount.
 * @this {!Long}
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */

LongPrototype.shiftRight = function shiftRight(numBits) {
  if (isLong(numBits)) numBits = numBits.toInt();
  if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
};
/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */


LongPrototype.shr = LongPrototype.shiftRight;
/**
 * Returns this Long with bits logically shifted to the right by the given amount.
 * @this {!Long}
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */

LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
  if (isLong(numBits)) numBits = numBits.toInt();
  numBits &= 63;
  if (numBits === 0) return this;else {
    var high = this.high;

    if (numBits < 32) {
      var low = this.low;
      return fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);
    } else if (numBits === 32) return fromBits(high, 0, this.unsigned);else return fromBits(high >>> numBits - 32, 0, this.unsigned);
  }
};
/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */


LongPrototype.shru = LongPrototype.shiftRightUnsigned;
/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */

LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;
/**
 * Converts this Long to signed.
 * @this {!Long}
 * @returns {!Long} Signed long
 */

LongPrototype.toSigned = function toSigned() {
  if (!this.unsigned) return this;
  return fromBits(this.low, this.high, false);
};
/**
 * Converts this Long to unsigned.
 * @this {!Long}
 * @returns {!Long} Unsigned long
 */


LongPrototype.toUnsigned = function toUnsigned() {
  if (this.unsigned) return this;
  return fromBits(this.low, this.high, true);
};
/**
 * Converts this Long to its byte representation.
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @this {!Long}
 * @returns {!Array.<number>} Byte representation
 */


LongPrototype.toBytes = function toBytes(le) {
  return le ? this.toBytesLE() : this.toBytesBE();
};
/**
 * Converts this Long to its little endian byte representation.
 * @this {!Long}
 * @returns {!Array.<number>} Little endian byte representation
 */


LongPrototype.toBytesLE = function toBytesLE() {
  var hi = this.high,
      lo = this.low;
  return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];
};
/**
 * Converts this Long to its big endian byte representation.
 * @this {!Long}
 * @returns {!Array.<number>} Big endian byte representation
 */


LongPrototype.toBytesBE = function toBytesBE() {
  var hi = this.high,
      lo = this.low;
  return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];
};
/**
 * Creates a Long from its byte representation.
 * @param {!Array.<number>} bytes Byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {Long} The corresponding Long value
 */


Long.fromBytes = function fromBytes(bytes, unsigned, le) {
  return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
};
/**
 * Creates a Long from its little endian byte representation.
 * @param {!Array.<number>} bytes Little endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */


Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
  return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);
};
/**
 * Creates a Long from its big endian byte representation.
 * @param {!Array.<number>} bytes Big endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */


Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
  return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);
};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Node.js is licensed for use as follows:

"""
Copyright Node.js contributors. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to
deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE.
"""

This license applies to parts of Node.js originating from the
https://github.com/joyent/node repository:

"""
Copyright Joyent, Inc. and other Node contributors. All rights reserved.
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to
deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE.
"""
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               2018-01-03: Version 0.3.0
  * Add support for [named capturing groups](https://github.com/tc39/proposal-regexp-named-groups) (issue #83)
  * Add polyfill for `fromCodePoint` for Nodejs < 4 (issue #86)

2017-02-23: Version 0.2.1
  * Correctly specify license in `package.json`

2016-05-24: Version 0.2.0
  * Introduce a third argument to the `parse` function for toggling (experimental) features
  * Add experimental support for parsing "\p{‚Ä¶} and \P{‚Ä¶} in Unicode mode" (issue #78)
  * Add `-v`/`--version` and `-f`/`--flags` arguments to the cli command `regjsparser` (issue #79)

2015-08-16: Version 0.1.5
  * Add better error message on parser errors (issues #74 and #76)

2015-02-28: Version 0.1.4
  * Fix parsing of backreferences, which are sometimes parsed as octal escapes (issue #70)

2014-11-25: Version 0.1.3
  * Remove the upper limit of hex digits in Unicode code point escapes (issue #69)

2014-08-31: Version 0.1.2
  * Change the field ref to matchIndex on the type=reference node (issue #67)

2014-08-30: Version 0.1.1
  * Only handle unicode code point escapes if 'u' flag is set (issue #56)
  * Remove `matchIdx` from the AST
  * Fix references like /\1/ (issue #57)
  * Rename type `ref` to `reference` in the AST
  * Update regex to match identifier and include script to generate regex

2014-06-29: Version 0.1.0
  * first tagged release
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             # supports-color [![Build Status](https://travis-ci.org/chalk/supports-color.svg?branch=master)](https://travis-ci.org/chalk/supports-color)

> Detect whether a terminal supports color

---

<div align="center">
	<b>
		<a href="https://tidelift.com/subscription/pkg/npm-supports-color?utm_source=npm-supports-color&utm_medium=referral&utm_campaign=readme">Get professional support for this package with a Tidelift subscription</a>
	</b>
	<br>
	<sub>
		Tidelift helps make open source sustainable for maintainers while giving companies<br>assurances about security, maintenance, and licensing for their dependencies.
	</sub>
</div>

---


## Install

```
$ npm install supports-color
```


## Usage

```js
const supportsColor = require('supports-color');

if (supportsColor.stdout) {
	console.log('Terminal stdout supports color');
}

if (supportsColor.stdout.has256) {
	console.log('Terminal stdout supports 256 colors');
}

if (supportsColor.stderr.has16m) {
	console.log('Terminal stderr supports 16 million colors (truecolor)');
}
```


## API

Returns an `Object` with a `stdout` and `stderr` property for testing either streams. Each property is an `Object`, or `false` if color is not supported.

The `stdout`/`stderr` objects specifies a level of support for color through a `.level` property and a corresponding flag:

- `.level = 1` and `.hasBasic = true`: Basic color support (16 colors)
- `.level = 2` and `.has256 = true`: 256 color support
- `.level = 3` and `.has16m = true`: Truecolor support (16 million colors)


## Info

It obeys the `--color` and `--no-color` CLI flags.

For situations where using `--color` is not possible, use the environment variable `FORCE_COLOR=1` (level 1), `FORCE_COLOR=2` (level 2), or `FORCE_COLOR=3` (level 3) to forcefully enable color, or `FORCE_COLOR=0` to forcefully disable. The use of `FORCE_COLOR` overrides all other color support checks.

Explicit 256/Truecolor mode can be enabled using the `--color=256` and `--color=16m` flags, respectively.


## Security

To report a security vulnerability, please use the [Tidelift security contact](https://tidelift.com/security). Tidelift will coordinate the fix and disclosure.


## Related

- [supports-color-cli](https://github.com/chalk/supports-color-cli) - CLI for this module
- [chalk](https://github.com/chalk/chalk) - Terminal string styling done right


## Maintainers

- [Sindre Sorhus](https://github.com/sindresorhus)
- [Josh Junon](https://github.com/qix-)


## License

MIT
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          'use strict'

const BB = require('bluebird')

const contentPath = require('./content/path')
const crypto = require('crypto')
const figgyPudding = require('figgy-pudding')
const fixOwner = require('./util/fix-owner')
const fs = require('graceful-fs')
const hashToSegments = require('./util/hash-to-segments')
const ms = require('mississippi')
const path = require('path')
const ssri = require('ssri')
const Y = require('./util/y.js')

const indexV = require('../package.json')['cache-version'].index

const appendFileAsync = BB.promisify(fs.appendFile)
const readFileAsync = BB.promisify(fs.readFile)
const readdirAsync = BB.promisify(fs.readdir)
const concat = ms.concat
const from = ms.from

module.exports.NotFoundError = class NotFoundError extends Error {
  constructor (cache, key) {
    super(Y`No cache entry for \`${key}\` found in \`${cache}\``)
    this.code = 'ENOENT'
    this.cache = cache
    this.key = key
  }
}

const IndexOpts = figgyPudding({
  metadata: {},
  size: {},
  uid: {},
  gid: {}
})

module.exports.insert = insert
function insert (cache, key, integrity, opts) {
  opts = IndexOpts(opts)
  const bucket = bucketPath(cache, key)
  const entry = {
    key,
    integrity: integrity && ssri.stringify(integrity),
    time: Date.now(),
    size: opts.size,
    metadata: opts.metadata
  }
  return fixOwner.mkdirfix(
    path.dirname(bucket), opts.uid, opts.gid
  ).then(() => {
    const stringified = JSON.stringify(entry)
    // NOTE - Cleverness ahoy!
    //
    // This works because it's tremendously unlikely for an entry to corrupt
    // another while still preserving the string length of the JSON in
    // question. So, we just slap the length in there and verify it on read.
    //
    // Thanks to @isaacs for the whiteboarding session that ended up with this.
    return appendFileAsync(
      bucket, `\n${hashEntry(stringified)}\t${stringified}`
    )
  }).then(
    () => fixOwner.chownr(bucket, opts.uid, opts.gid)
  ).catch({ code: 'ENOENT' }, () => {
    // There's a class of race conditions that happen when things get deleted
    // during fixOwner, or between the two mkdirfix/chownr calls.
    //
    // It's perfectly fine to just not bother in those cases and lie
    // that the index entry was written. Because it's a cache.
  }).then(() => {
    return formatEntry(cache, entry)
  })
}

module.exports.insert.sync = insertSync
function insertSync (cache, key, integrity, opts) {
  opts = IndexOpts(opts)
  const bucket = bucketPath(cache, key)
  const entry = {
    key,
    integrity: integrity && ssri.stringify(integrity),
    time: Date.now(),
    size: opts.size,
    metadata: opts.metadata
  }
  fixOwner.mkdirfix.sync(path.dirname(bucket), opts.uid, opts.gid)
  const stringified = JSON.stringify(entry)
  fs.appendFileSync(
    bucket, `\n${hashEntry(stringified)}\t${stringified}`
  )
  try {
    fixOwner.chownr.sync(bucket, opts.uid, opts.gid)
  } catch (err) {
    if (err.code !== 'ENOENT') {
      throw err
    }
  }
  return formatEntry(cache, entry)
}

module.exports.find = find
function find (cache, key) {
  const bucket = bucketPath(cache, key)
  return bucketEntries(bucket).then(entries => {
    return entries.reduce((latest, next) => {
      if (next && next.key === key) {
        return formatEntry(cache, next)
      } else {
        return latest
      }
    }, null)
  }).catch(err => {
    if (err.code === 'ENOENT') {
      return null
    } else {
      throw err
    }
  })
}

module.exports.find.sync = findSync
function findSync (cache, key) {
  const bucket = bucketPath(cache, key)
  try {
    return bucketEntriesSync(bucket).reduce((latest, next) => {
      if (next && next.key === key) {
        return formatEntry(cache, next)
      } else {
        return latest
      }
    }, null)
  } catch (err) {
    if (err.code === 'ENOENT') {
      return null
    } else {
      throw err
    }
  }
}

module.exports.delete = del
function del (cache, key, opts) {
  return insert(cache, key, null, opts)
}

module.exports.delete.sync = delSync
function delSync (cache, key, opts) {
  return insertSync(cache, key, null, opts)
}

module.exports.lsStream = lsStream
function lsStream (cache) {
  const indexDir = bucketDir(cache)
  const stream = from.obj()

  // "/cachename/*"
  readdirOrEmpty(indexDir).map(bucket => {
    const bucketPath = path.join(indexDir, bucket)

    // "/cachename/<bucket 0xFF>/*"
    return readdirOrEmpty(bucketPath).map(subbucket => {
      const subbucketPath = path.join(bucketPath, subbucket)

      // "/cachename/<bucket 0xFF>/<bucket 0xFF>/*"
      return readdirOrEmpty(subbucketPath).map(entry => {
        const getKeyToEntry = bucketEntries(
          path.join(subbucketPath, entry)
        ).reduce((acc, entry) => {
          acc.set(entry.key, entry)
          return acc
        }, new Map())

        return getKeyToEntry.then(reduced => {
          for (let entry of reduced.values()) {
            const formatted = formatEntry(cache, entry)
            formatted && stream.push(formatted)
          }
        }).catch({ code: 'ENOENT' }, nop)
      })
    })
  }).then(() => {
    stream.push(null)
  }, err => {
    stream.emit('error', err)
  })

  return stream
}

module.exports.ls = ls
function ls (cache) {
  return BB.fromNode(cb => {
    lsStream(cache).on('error', cb).pipe(concat(entries => {
      cb(null, entries.reduce((acc, xs) => {
        acc[xs.key] = xs
        return acc
      }, {}))
    }))
  })
}

function bucketEntries (bucket, filter) {
  return readFileAsync(
    bucket, 'utf8'
  ).then(data => _bucketEntries(data, filter))
}

function bucketEntriesSync (bucket, filter) {
  const data = fs.readFileSync(bucket, 'utf8')
  return _bucketEntries(data, filter)
}

function _bucketEntries (data, filter) {
  let entries = []
  data.split('\n').forEach(entry => {
    if (!entry) { return }
    const pieces = entry.split('\t')
    if (!pieces[1] || hashEntry(pieces[1]) !== pieces[0]) {
      // Hash is no good! Corruption or malice? Doesn't matter!
      // EJECT EJECT
      return
    }
    let obj
    try {
      obj = JSON.parse(pieces[1])
    } catch (e) {
      // Entry is corrupted!
      return
    }
    if (obj) {
      entries.push(obj)
    }
  })
  return entries
}

module.exports._bucketDir = bucketDir
function bucketDir (cache) {
  return path.join(cache, `index-v${indexV}`)
}

module.exports._bucketPath = bucketPath
function bucketPath (cache, key) {
  const hashed = hashKey(key)
  return path.join.apply(path, [bucketDir(cache)].concat(
    hashToSegments(hashed)
  ))
}

module.exports._hashKey = hashKey
function hashKey (key) {
  return hash(key, 'sha256')
}

module.exports._hashEntry = hashEntry
function hashEntry (str) {
  return hash(str, 'sha1')
}

function hash (str, digest) {
  return crypto
    .createHash(digest)
    .update(str)
    .digest('hex')
}

function formatEntry (cache, entry) {
  // Treat null digests as deletions. They'll shadow any previous entries.
  if (!entry.integrity) { return null }
  return {
    key: entry.key,
    integrity: entry.integrity,
    path: contentPath(cache, entry.integrity),
    size: entry.size,
    time: entry.time,
    metadata: entry.metadata
  }
}

function readdirOrEmpty (dir) {
  return readdirAsync(dir)
    .catch({ code: 'ENOENT' }, () => [])
    .catch({ code: 'ENOTDIR' }, () => [])
}

function nop () {
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     INDX( 	                (   à
  Ë      9  ÷c               ÿV    p `     Å1    3˜l‚Ù¡÷ ÷)œç¨÷/Ew‚Ù¡÷ÕâÊ-ƒ÷                        j e s t - s e r i a l i z e r dL    p \     Å1    ï¬ûIÚ¡÷Ä1j«ç¨÷!Ã”IÚ¡÷„aã.ƒ÷                        j e s t - s n a p s h o t     v    h T     Å1    ù6√®Ú¡÷ÄãÃ…ç¨÷%ıX©Ú¡÷#Y˚l.ƒ÷                       	 j e s t - u t i l     o"    p \     Å1     =NVÙ¡÷ÄãÃ…ç¨÷€∑gVÙ¡÷:÷Z.ƒ÷                        j e s t - v a l i d a t e     ˇu   9p Z     Å1    ≈yé®Ú¡÷ÄãÃ…ç¨÷›Ó≥®Ú¡÷Ãsm.ƒ÷                        j e s t - w a t c h e r       nS    h X     Å1    –Dl[Ú¡÷Ä1j«ç¨÷uÖ[Ú¡÷*U¬Ü.ƒ÷                        j e s t - w o r k e r ∫G    X H     Å1    z&∆¥Ù¡÷Ä^õ»ç¨÷r'µÙ¡÷fıñÓ-ƒ÷                        j o i ”V    p ^     Å1    `J[‚Ù¡÷ ÷)œç¨÷£¿l‚Ù¡÷Í˜Ê-ƒ÷                        j s - l e v e n s h t e i n   (ú    ` P     Å1    y#˘Ú¡÷ ÷)œç¨÷‚Ÿ0˘Ú¡÷π∞˘Ú¡÷                        j s - s h a 3 ú   9h T     Å1    [Ú˘¯Ú¡÷ ÷)œç¨÷{˘Ú¡÷ÆC4L.ƒ÷                       	 j s - t o k e n s     sg    ` P     Å1    	ı¡÷ ÷)œç¨÷˚Élı¡÷Ü¢ı¡÷                        j s - y a m l ú    ` J     Å1    Ÿ#Â¯Ú¡÷ ÷)œç¨÷VÕ˘¯Ú¡÷x};L.ƒ÷                        j s b n       á9    ` L     Å1    kÚ¡÷ÄPt¡ç¨÷âôFÚ¡÷¬0ò.ƒ÷                        j s d o m     ú    ` L     Å1    Ú»‘¯Ú¡÷ ÷)œç¨÷LÌ‰¯Ú¡÷µ	CL.ƒ÷                        j s e s c     ˝õ    h X     Å1    Øz«¯Ú¡9 ÷)œç¨÷¸ë‘¯Ú¡÷çÅgL.ƒ÷                        j s o n - b i g i n t Ùõ    h X     Å1    µÊ∂¯Ú¡÷ ÷)œç¨÷8L«¯Ú¡÷…uL.ƒ÷                        j s o n - b u f f e r Óõ    à r     Å1    ßN≠¯Ú¡÷ ÷)œç¨÷Ô¥∂¯Ú¡÷_˚L.ƒ÷                        j s o n - p a r s e - b e t t e r - e r r o r s       ∆õ    h X     Å1    °°m¯Ú¡÷ ÷)œç¨÷N,≠¯Ú¡÷8˘Ú¡÷                        j s o n - s c h e m a «V    Ä j     Å1    <Ù‚Ù¡÷ ÷)œç¨÷ú[‚Ù¡÷o≈Ê-ƒ÷                        j s o n - s 9h e m a - t r a v e r s e       iõ    Ä l     Å1    E†º˜Ú¡÷ ÷)œç¨÷ˇnÁ˜Ú¡÷70RM.ƒ÷                        j s o n - s t a b l e - s t r i n g i f y     ≥õ    † å     Å1    ÍAN¯Ú¡÷ ÷)œç¨÷Ω]m¯Ú¡÷@eÕL.ƒ÷                       % j s o n - s t a b l e - s t r i n g i f y - w i t h o u t - j s o n i f y     ®õ    x h     Å1    6È?¯Ú¡÷ ÷)œç¨÷N¯Ú¡÷…uÎL.ƒ÷                        j s o n - s t r i n g i f y - s a f e îõ    x f     Å1    … ¯Ú¡÷ ÷)œç¨÷ä∞?¯Ú¡÷¯!
M.ƒ÷              9        j s o n - t e x t - s e q u e n c e   ãõ    ` L     Å1    A,	¯Ú¡÷ ÷)œç¨÷…Ã¯Ú¡÷pëM.ƒ÷                        j s o n 3                   µt    Ä l     Å1    ]I•Ú¡÷ ı3…ç¨÷ãÑe•Ú¡÷]I•Ú¡÷                        j s s - p l u g i n - p r o p s - s o r t     t    ê ~     Å1    1 ·§Ú¡÷ ı3…ç¨÷»L•Ú¡÷, ·§Ú¡÷                        j s s - p l u g i n - r u l e - v a l u e - f u n c t i o n   •t    à v     Å1    éZ%•Ú¡÷ ı3…ç¨÷(I•Ú¡÷äZ%•Ú¡÷                     9 j s s - p l u g i n - v e n d o r - p r e f i x e r   ⁄}    X H     Å1    ™#∫Ú¡÷Ä∏˝ ç¨÷SÕ∫Ú¡÷®#∫Ú¡÷                        j w s ”ó    ` N     Å1    ÏZÓÚ¡÷Ä?ëŒç¨÷Õ‹ÍÓÚ¡÷|ÇÛÓÚ¡÷                        k e c c a k   `õ    ` P     Å1    a•´˜Ú¡÷ ÷)œç¨÷ˇgº˜Ú¡÷\•´˜Ú¡÷                        k e y p a i r [õ    ` P     Å1    è.°˜Ú¡÷ ÷)œç¨÷wZ´˜Ú¡÷à.°˜Ú¡÷                        k i n d - o f     à r     Å1    ÍÛ!5Ù¡÷ Aoƒç¨÷ª‰.5Ù¡÷ÍÛ!5Ù¡÷                     9 l a s t - c a l l - w e b p a c k - p l u g i n       Fõ    h V     Å1    Aãr˜Ú¡÷ ÷)œç¨÷ˆÖ~˜Ú¡÷<ãr˜Ú¡÷                       
 l a z y - c a c h e   pë    ` J     Å1    }'QÂÚ¡÷ ÷)œç¨÷YËRÂÚ¡÷t'QÂÚ¡÷                        l c i d       :õ    h R     Å1    Ÿ+b˜Ú¡÷ ÷)œç¨÷Gpr˜Ú¡÷‘+b˜Ú¡÷                        l e f t - p a d       5õ    ` L     Å1    T˘^˜Ú¡÷ ÷)œç¨÷ûb˜Ú¡÷P˘^˜Ú¡÷                        l e v e n                         f                           9INDX( 	                (   ∏  Ë      ÿ   r     ÷           <D    h R     Å1    ~,Ò4Ú¡÷Ä™÷√ç¨÷3?5Ú¡÷8ãê.ƒ÷                        w o r d w r a p       ƒ;    Ä p     Å1    πÄôÙ¡÷Ä™÷√ç¨÷/ÆôÙ¡÷b2\˜-ƒ÷                        w o r k b o x - b a c k g r o u n d - s y n c B    ê ~     Å1    ~æÿ/Ú¡÷Ä™÷√ç¨÷iÏ	0Ú¡÷ÉÔ°ë.ƒ÷                        w o r k b o x - b r o a d c a s t - c a c h e - u p d a t e   ˚@    p \     Å1    o†=,Ú¡÷ >√ç¨÷àÉ’-Ú¡÷¿;í.ƒ÷              ÿ         w o r k b o x - b u i l d     nB    à r     Å1    \≠/Ú¡÷Ä™÷√ç¨÷™ãÿ/Ú¡÷ÈL∞ë.ƒ÷                        w o r k b o x - c a c h e - e x p i r a t i o n       _B    à v     Å1    mäë/Ú¡÷Ä™÷√ç¨÷‰A≠/Ú¡÷üò√ë.ƒ÷                        w o r k b o x - c a c h e a b l e - r e s p o n s e   ï    p Z     Å1    $Œ÷3Ù¡÷Ä™÷√ç¨÷·/4Ù¡÷†do4Ù¡÷                        w o r k b o x - c o r e       ›a    à r     Å1    [†Kı¡÷ >√ç¨÷ÒÂuı¡÷#ÿñﬂ-ƒ÷                        w o ÿ k b o x - g o o g l e - a n a l y t i c s       Ö    à v     Å1    mTº3Ù¡÷Ä™÷√ç¨÷^•÷3Ù¡÷Õjo.ƒ÷                        w o r k b o x - n a v i g a t i o n - p r e l o a d   l    x f     Å1    ëâ3Ù¡÷Ä™÷√ç¨÷Eº3Ù¡÷h∫ê.ƒ÷                        w o r k b o x - p r e c a c h i n g   Ïa    Ä n     Å1    gvı¡÷ >√ç¨÷Á∆¶ı¡÷‡¨ı¡÷                        w o r k b o x - r a n g e - r e q u e s t s   V    p `     Å1    +\3Ù¡÷Ä™÷√ç¨÷kÕà3Ù¡÷&∂.ƒ÷                     ÿ  w o r k b o x - r o u t i n g IB    x f     Å1    ˇ´]/Ú¡÷Ä™÷√ç¨÷µ`ë/Ú¡÷~ì—ë.ƒ÷                        w o r k b o x - s t r a t e g i e s   C    p `     Å1    `a;3Ù¡÷ >√ç¨÷‡ÿ[3Ù¡÷‡˜”3Ù¡÷                        w o r k b o x - s t r e a m s ∂;    h V     Å1    Â@dôÙ¡÷ >√ç¨÷›|ÄôÙ¡÷´ûo˜-ƒ÷                       
 w o r k b o x - s w   á    Ä n     Å1    '©–1Ù¡÷ >√ç¨÷â! 2Ù¡÷tõ“.ƒ÷                        w o r k b o x - w e b p a c k - p l u g i n   ≈a    h X   ÿ Å1    ¿bı¡÷ >√ç¨÷(kKı¡÷*ùﬂ-ƒ÷                        w o r k e r - f a r m DB    h T     Å1    ûÀQ/Ú¡÷ >√ç¨÷Ob]/Ú¡÷’·Êë.ƒ÷                       	 w r a p - a n s i                   hú+Ú¡÷                        w r i t e     |    x d     Å1    ⁄≤1Ù¡÷Ä}•¬ç¨÷"Kƒ1Ù¡÷⁄≤1Ù¡÷                        w r i t e - f i l e - a t o m i c     ¨a    X F     Å1    M¿ ı¡÷Ä}•¬ç¨÷ûı¡÷F¿ ı¡÷                        w s   ¢7    X H     Å1    |æÚ¡÷ÄPt¡ç¨÷†∫1Ú¡ÿ zæÚ¡÷                        x h r ò7    h X     Å1    S§Ú¡÷ÄPt¡ç¨÷ﬂÖÚ¡÷L§Ú¡÷                        x h r - r e q u e s t £a    x h     Å1    —˙§ ı¡÷ÄPt¡ç¨÷˜ø ı¡÷–˙§ ı¡÷                        x h r - r e q u e s t - p r o m i s e f    p Z     Å1    ø3o1Ù¡÷Ä}•¬ç¨÷·±1Ù¡÷6 2Ù¡÷                        x h r 2 - c o o k i e s       ¢@    x f     Å1    ‚—<+Ú¡÷Ä}•¬ç¨÷·]+Ú¡÷⁄—<+Ú¡÷                        x m l - n a m e - v a l i d a t o r   )    h R   ÿ Å1    π≠»0Ù¡÷ÄPt¡ç¨÷£ 1Ù¡÷6Da1Ù¡÷                        x m l c h a r s       y9    p ^     Å1    -Ú¡÷ÄPt¡ç¨÷ÈÆÚ¡÷*Ú¡÷                       